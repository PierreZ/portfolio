<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Pierre Zemb</title>
        <link>https://pierrezemb.fr/</link>
        <description>Pierre Zemb&#39;s personal blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Jul 2024 01:22:36 &#43;0100</lastBuildDate>
            <atom:link href="https://pierrezemb.fr/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Redwood’s memory tuning in FoundationDB</title>
    <link>https://pierrezemb.fr/posts/redwood-memory-tuning/</link>
    <pubDate>Mon, 22 Apr 2024 00:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/redwood-memory-tuning/</guid>
    <description><![CDATA[While FoundationDB allows you to obtain sub-milliseconds transactions’s latency without any knob-tuning, we had to bump a bit memory usage for Redwood under certain usage and workload. The following configuration has been tested on clusters from 7.1 to 7.3.
BTree page cache We discovered the issue when we saw a performance decrease on our cluster storing time-series data. Our cluster was reporting some high disk-business, causing outages:
10.0.3.23:4501 ( 65% cpu; 61% machine; 0.]]></description>
</item>
<item>
    <title>True idempotent transactions with FoundationDB 7.3</title>
    <link>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</link>
    <pubDate>Tue, 12 Mar 2024 00:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</guid>
    <description><![CDATA[I have been working around FoundationDB for several years now, and the new upcoming version is fixing one of the most evil and painful caveats you can deal with when writing layers: commit_unknown_result.
Transactions with unknown results When you start writing code with FDB, you may be under the assertions that given the database’s robustness, you will not experience some strange behavior under certain failure scenarios. Turns out, there is one scenario that is possible to reach, and quickly explained in the official documentation:]]></description>
</item>
<item>
    <title>The unseen treasures of Infrastructure Engineering: Academic Papers</title>
    <link>https://pierrezemb.fr/posts/academic-conferences/</link>
    <pubDate>Mon, 22 Jan 2024 15:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/academic-conferences/</guid>
    <description><![CDATA[I really like using RSS feeds. My Feedly account has more than 190 feeds, all neatly organized by categories. They help me keep up with new ideas and interesting blog posts about engineering. But there&rsquo;s another source of information I&rsquo;ve been using for a long time that not many people know about: academic papers.
You can discover details about infrastructure that you might not find in regular blog posts. Academic papers, unlike typical blog content, often dive deeper into specific aspects of infrastructure.]]></description>
</item>
<item>
    <title>Best resources to learn about data and distributed systems</title>
    <link>https://pierrezemb.fr/posts/distsys-resources/</link>
    <pubDate>Mon, 17 Jan 2022 01:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/distsys-resources/</guid>
    <description><![CDATA[Learning distributed systems is tough. You need to go through a lot of academic papers, concepts, code review, before being able to have a global pictures. Thankfully, there is a lot of resources out there that can help you to get started. Here&rsquo;s a list of resources I used to learn distributed systems. I will keep this blogpost up-to-date with books, conferences, and so on.
A distributed system is one in which the failure of a computer you didn&rsquo;t even know existed can render your own computer unusable.]]></description>
</item>
<item>
    <title>Crafting row keys in FoundationDB</title>
    <link>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</link>
    <pubDate>Sun, 21 Feb 2021 00:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</guid>
    <description><![CDATA[As I&rsquo;m working on my latest contribution around FoundationDB and Rust, I had the chance to dig a bit into how FoundationDB&rsquo;s bindings are offering helpers to generate keys. Their approach is interesting enough to deserve a blogpost 😎
Row key? When you are using a key/value store, the design of the row key is extremely important, as this will define how well:
your scans will be optimized, your puts will be spread, you will avoid hot-spotting a shard/region.]]></description>
</item>
<item>
    <title>Notes about ETCD</title>
    <link>https://pierrezemb.fr/posts/notes-about-etcd/</link>
    <pubDate>Mon, 11 Jan 2021 00:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/notes-about-etcd/</guid>
    <description><![CDATA[Notes About is a blogpost serie you will find a lot of links, videos, quotes, podcasts to click on about a specific topic. Today we will discover ETCD.
Overview of ETCD As stated in the official documentation:
etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.]]></description>
</item>
<item>
    <title>10 years of programming and counting 🚀</title>
    <link>https://pierrezemb.fr/posts/ten-years-programming/</link>
    <pubDate>Wed, 30 Sep 2020 00:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/ten-years-programming/</guid>
    <description><![CDATA[I’ve just realized that I’ve spent the last decade programming 🤯 While 2020 feels like a strange year, I thought it would be nice to write down a retrospective of the last 10 years 🗓
Learning to program 👨🏻‍💻 I wrote my first Hello, world program somewhere around September 2010, when I started my engineering school to do some electronics, but that C language got me. I spent 6 months struggling to understand pointers and memory.]]></description>
</item>
<item>
    <title>Announcing Record-Store, a new (experimental) place for your data</title>
    <link>https://pierrezemb.fr/posts/announcing-record-store/</link>
    <pubDate>Wed, 23 Sep 2020 10:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/announcing-record-store/</guid>
    <description><![CDATA[TL;DR: I&rsquo;m really happy to announce my latest open-source project called Record-Store 🚀 Please check it out on https://pierrez.github.io/record-store.
What? Record-Store is a layer running on top of FoundationDB. It provides abstractions to create, load and deletes customer-defined data called records, which are hold into a RecordSpace. We would like to have this kind of flow for developers:
Opening RecordSpace, for example prod/users Create a protobuf definition which will be used as schema Upsert schema Push records Query records delete records You need another KeySpace to store another type of data, or maybe a KeySpace dedicated to production env?]]></description>
</item>
<item>
    <title>Diving into ETCD&#39;s linearizable reads</title>
    <link>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</link>
    <pubDate>Fri, 18 Sep 2020 05:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</guid>
    <description><![CDATA[Diving Into is a blogpost serie where we are digging a specific part of the project&rsquo;s basecode. In this episode, we will digg into the implementation behind ETCD&rsquo;s Linearizable reads.
What is ETCD? From the official website:
etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.]]></description>
</item>
<item>
    <title>Notes about Raft&#39;s paper</title>
    <link>https://pierrezemb.fr/posts/notes-about-raft/</link>
    <pubDate>Thu, 30 Jul 2020 07:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/notes-about-raft/</guid>
    <description><![CDATA[Notes About is a blogpost serie you will find a lot of links, videos, quotes, podcasts to click on about a specific topic. Today we will discover Raft&rsquo;s paper called &lsquo;In Search of an Understandable Consensus Algorithm&rsquo;.
As I&rsquo;m digging into ETCD, I needed to refresh my memory about Raft. I started by reading the paper located here and I&rsquo;m also playing with the amazing Raft labs made by PingCAP.]]></description>
</item>
</channel>
</rss>
