<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Pierre Zemb&#x27;s Blog</title>
      <link>https://pierrezemb.fr</link>
      <description>Pierre Zemb personal blog</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://pierrezemb.fr/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Mon, 18 Aug 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Shipped vs. Operated, or How Many Bash Scripts Does It Take?</title>
          <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/shipped-vs-operated/</link>
          <guid>https://pierrezemb.fr/posts/shipped-vs-operated/</guid>
          <description xml:base="https://pierrezemb.fr/posts/shipped-vs-operated/">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Summary:&lt;&#x2F;strong&gt; The difference between shipped and operated software is the difference between something you can run and forget, and something that demands ongoing, hands-on care. Choosing the former protects your team‚Äôs focus and sanity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-shipped-vs-operated-spectrum&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-shipped-vs-operated-spectrum&quot; aria-label=&quot;Anchor link for: the-shipped-vs-operated-spectrum&quot;&gt;üîó&lt;&#x2F;a&gt;The Shipped vs. Operated Spectrum&lt;&#x2F;h2&gt;
&lt;p&gt;Some technologies arrive as complete systems: you deploy them, give them minimal care, and they quietly do their job. Others arrive like complex machines: powerful, but demanding regular attention and maintenance. That‚Äôs the difference between &lt;em&gt;shipped&lt;&#x2F;em&gt; and &lt;em&gt;operated&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The distinction isn‚Äôt just about features; it‚Äôs about the level of operational effort the system will demand over its lifetime. &lt;strong&gt;Operated&lt;&#x2F;strong&gt; technologies require continuous human care to stay healthy. They age, drift, and accumulate operational quirks. They often have sharp edges you only discover at 2 a.m., and when something goes wrong, you need people who already know the failure modes by heart. Think of a self-managed &lt;strong&gt;HBase&lt;&#x2F;strong&gt; or a ZooKeeper ensemble that you &lt;em&gt;really&lt;&#x2F;em&gt; hope never splits brain.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Shipped&lt;&#x2F;strong&gt; technologies are built to reduce that constant overhead. They can still fail, but they tend to fail in ways that are predictable, recoverable, and not existential. You can learn them as you go. Your outages will be frustrating, but they won‚Äôt demand a dedicated handler on payroll. &lt;strong&gt;FoundationDB&lt;&#x2F;strong&gt; is a good example: it‚Äôs not magic, but its operational surface area is small enough to fit in a single human brain.&lt;&#x2F;p&gt;
&lt;p&gt;For contrast, I‚Äôve also spent years with the other kind: &lt;strong&gt;HBase&lt;&#x2F;strong&gt; clusters spread over 250+ nodes, &lt;strong&gt;Ceph&lt;&#x2F;strong&gt;, &lt;strong&gt;Kafka&lt;&#x2F;strong&gt; and &lt;strong&gt;ZooKeeper&lt;&#x2F;strong&gt; in various configurations, &lt;strong&gt;Pulsar&lt;&#x2F;strong&gt;, &lt;strong&gt;Warp10&lt;&#x2F;strong&gt;, &lt;strong&gt;etcd&lt;&#x2F;strong&gt;, &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt;, &lt;strong&gt;Flink&lt;&#x2F;strong&gt;, and &lt;strong&gt;RabbitMQ&lt;&#x2F;strong&gt;, each with its own set of operational ‚Äúadventures.‚Äù&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identifying-operated-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#identifying-operated-systems&quot; aria-label=&quot;Anchor link for: identifying-operated-systems&quot;&gt;üîó&lt;&#x2F;a&gt;Identifying Operated Systems&lt;&#x2F;h2&gt;
&lt;p&gt;Some systems live in both worlds depending on how you use them. &lt;strong&gt;PostgreSQL&lt;&#x2F;strong&gt; in standalone mode is usually shipped: it‚Äôs simple to run, predictable, and rarely causes surprises. But under certain conditions, like fighting vacuum performance at scale or running it in HA mode under sustained heavy load, it shifts into operated territory. The difference isn‚Äôt in the codebase, but in the demands your use case puts on it.&lt;&#x2F;p&gt;
&lt;p&gt;A quick way to tell which camp your system belongs to is the &lt;strong&gt;Bash Script Test&lt;&#x2F;strong&gt;: ask how many bash scripts or home-grown tools are required to survive an on-call shift. If the answer includes a collection of automation to clean up data, shuffle it between nodes, or probe the cluster‚Äôs health, you‚Äôre probably in operated territory. I‚Äôve been there: running &lt;code&gt;hbck&lt;&#x2F;code&gt; and manually moving regions in &lt;strong&gt;HBase&lt;&#x2F;strong&gt;, shuffling partitions around in &lt;strong&gt;Kafka&lt;&#x2F;strong&gt; to balance load, or triggering repairs in &lt;strong&gt;Ceph&lt;&#x2F;strong&gt; after failed scrub errors. Many distributed systems quietly rely on these manual interventions, often run weekly, to stay healthy, and that‚Äôs an operational cost you can‚Äôt ignore.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, we have &lt;strong&gt;no&lt;&#x2F;strong&gt; such scripts for &lt;strong&gt;FoundationDB&lt;&#x2F;strong&gt;, and that‚Äôs exactly why it feels shipped.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-strategic-cost-of-operations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-strategic-cost-of-operations&quot; aria-label=&quot;Anchor link for: the-strategic-cost-of-operations&quot;&gt;üîó&lt;&#x2F;a&gt;The Strategic Cost of Operations&lt;&#x2F;h2&gt;
&lt;p&gt;Each operated system consumes a slice of your team‚Äôs focus. Add too many, and you‚Äôll spend more time keeping the lights on than moving forward. The more you can choose robust, low-maintenance software, the more space you keep for actually building new things.&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôm not a fan of Kubernetes from an operational perspective. But it does something important for end users: it gives them a standard way to write software that reacts to the state of the infrastructure through &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;operator&#x2F;&quot;&gt;Operators&lt;&#x2F;a&gt;. Operators turn that into continuous automation, with a reconciliation loop that keeps drifting systems aligned with the desired state. It‚Äôs a way to bake SRE knowledge into code, so even complex systems can be run and handed over without months of hand-holding.&lt;&#x2F;p&gt;
&lt;p&gt;The stakes are only going to get higher as LLMs become a common tool for software engineers. We‚Äôll inevitably build more advanced and complex systems, but that complexity doesn‚Äôt disappear; it gets pushed to the people on call. LLMs are good at fixing failures that are reproducible and deterministic, because they can alter the system freely, but most on-call incidents aren‚Äôt like that. The only way to keep operational load sustainable is to change how we design and test: building for robustness from the start, and using techniques like &lt;a href=&quot;&#x2F;posts&#x2F;simulation-driven-development&#x2F;&quot;&gt;simulation-driven development&lt;&#x2F;a&gt; to expose failure modes before they reach production.&lt;&#x2F;p&gt;
&lt;p&gt;If you can, choose the system you can deploy and leave alone, not the complex machine that demands your weekends.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with shipped&#x2F;operated software. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed-systems</category>
          <category domain="tag">operation</category>
      </item>
      <item>
          <title>Two Podcast Episodes on Topics Developers Rarely Talk About</title>
          <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/debugging-and-correctness-podcasts/</link>
          <guid>https://pierrezemb.fr/posts/debugging-and-correctness-podcasts/</guid>
          <description xml:base="https://pierrezemb.fr/posts/debugging-and-correctness-podcasts/">&lt;p&gt;I was listening to a couple of podcasts the other day and stumbled across two episodes that were so compelling I had to stop my chores and listen. They dive into corners of software engineering that most developers barely think about; not because they‚Äôre unimportant, but because they appear in the hard corners of engineering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;catastrophic data corruption,&lt;&#x2F;li&gt;
&lt;li&gt;correctness work done before a single line is shipped.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first is &lt;a href=&quot;https:&#x2F;&#x2F;oxide-and-friends.transistor.fm&#x2F;episodes&#x2F;adventures-in-data-corruption&quot;&gt;Adventures in Data Corruption&lt;&#x2F;a&gt; from &lt;em&gt;Oxide and Friends&lt;&#x2F;em&gt;. Two years ago, the Oxide team ran into data corruption during what should have been a routine network transfer. The debugging journey that followed went from packet traces to CPU speculation quirks, peeling back the stack layer by layer, hardware, kernel, network, application, asking hard questions at each step. What I love here is the combination of clear storytelling and the rapid-fire hypotheses: they make an assumption, test it, discard it, and immediately move to the next, pulling you along in the investigation until the root cause finally clicks into place.&lt;&#x2F;p&gt;
&lt;p&gt;The second is &lt;a href=&quot;https:&#x2F;&#x2F;x.com&#x2F;AntithesisHQ&#x2F;status&#x2F;1953097721205710918&quot;&gt;Scaling Correctness: Marc Brooker on a Decade of Formal Methods at AWS&lt;&#x2F;a&gt; of &lt;em&gt;The BugBash Podcast&lt;&#x2F;em&gt; by Antithesis. Marc Brooker, who has spent nearly 17 years building core AWS services like S3 and Lambda, shares the company‚Äôs decade-long journey with formal methods, from heavyweight tools like TLA+ to the &lt;em&gt;lightweight&lt;&#x2F;em&gt; approaches that any team can adopt like &lt;a href=&quot;&#x2F;tags&#x2F;simulation&quot;&gt;simulation-based testing&lt;&#x2F;a&gt;. At AWS, they‚Äôve learned that investing in correctness up front not only improves reliability but actually speeds up delivery. They also touch on deterministic simulation testing, the challenge of verifying UIs and control planes, and the role AI might play in the future of verification.&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôve been paged way too many times for metastable failures, data corruption, network meltdowns, or NTP drift in production. These days, I‚Äôd rather tackle the correctness part &lt;em&gt;before&lt;&#x2F;em&gt; those alarms go off. Every new layer I build is designed to be simulated to explore failure modes in a controlled environment before they can hurt real users.&lt;&#x2F;p&gt;
&lt;p&gt;But when things fall apart anyway, and spoilers &lt;strong&gt;they will&lt;&#x2F;strong&gt;, developers have the opportunity to truly understand their software. Being responsible for the systems you build means you‚Äôre the one getting paged, and it‚Äôs in those moments of crisis that the sharpest debugging skills are forged.&lt;&#x2F;p&gt;
&lt;p&gt;So don‚Äôt just bookmark them. Put them at the top of your queue. Listen. And maybe, the next time your system misbehaves, you‚Äôll be ready.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with debugging and correctness. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed-systems</category>
          <category domain="tag">debugging</category>
          <category domain="tag">correctness</category>
          <category domain="tag">podcasts</category>
          <category domain="tag">simulation</category>
      </item>
      <item>
          <title>Three Years of Nix and NixOS: The Good, the Bad, and the Ugly</title>
          <pubDate>Wed, 02 Jul 2025 00:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/nixos-good-bad-ugly/</link>
          <guid>https://pierrezemb.fr/posts/nixos-good-bad-ugly/</guid>
          <description xml:base="https://pierrezemb.fr/posts/nixos-good-bad-ugly/">&lt;p&gt;For years, I was a serial distro-hopper, working my way through Ubuntu, Arch, Gentoo, Exherbo, Void Linux, Fedora, Pop!_OS, and Manjaro. Every few months, a new Linux distribution would catch my eye, and I‚Äôd spend a weekend migrating my setup, hoping to find the perfect fit. That cycle broke three years ago when I switched to NixOS. It has since become the foundation for all my Linux machines, not because it‚Äôs perfect, but because it fundamentally changes the contract between the user and the operating system.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to distinguish between &lt;strong&gt;Nix&lt;&#x2F;strong&gt;, the powerful package manager that can run on any Linux distro (and even macOS), and &lt;strong&gt;NixOS&lt;&#x2F;strong&gt;, the full immutable operating system built around it. This post is a review of my three years with both‚Äîthe good, the bad, and the ugly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-good&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-good&quot; aria-label=&quot;Anchor link for: the-good&quot;&gt;üîó&lt;&#x2F;a&gt;The Good&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;declarative-and-atomic-system-management-on-nixos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#declarative-and-atomic-system-management-on-nixos&quot; aria-label=&quot;Anchor link for: declarative-and-atomic-system-management-on-nixos&quot;&gt;üîó&lt;&#x2F;a&gt;Declarative and Atomic System Management on NixOS&lt;&#x2F;h3&gt;
&lt;p&gt;The core promise of NixOS is that your entire system is configured from a set of files, which you can store in a Git repository. Every change is a commit, giving you a complete, auditable history of your system&#x27;s state. This makes setting up a new machine trivial: I clone my repository, run one command, and my entire setup is replicated perfectly. No more manually copying dotfiles or running install scripts.&lt;&#x2F;p&gt;
&lt;p&gt;This declarative approach also makes the system incredibly robust. I once broke a laptop running Exherbo right before an on-call shift, and it was a nightmare to fix. With NixOS, that fear is gone. Every &lt;code&gt;nixos-rebuild switch&lt;&#x2F;code&gt; creates a new &quot;generation&quot; of the system. If an update breaks something, you simply reboot and select the previous generation from the boot menu. This atomic update mechanism makes you fearless about making and testing changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;system-crafting-as-a-first-class-citizen&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#system-crafting-as-a-first-class-citizen&quot; aria-label=&quot;Anchor link for: system-crafting-as-a-first-class-citizen&quot;&gt;üîó&lt;&#x2F;a&gt;System Crafting as a First-Class Citizen&lt;&#x2F;h3&gt;
&lt;p&gt;On NixOS, customizing your system is not an afterthought‚Äîit&#x27;s a core feature. While the Nix package manager gives you fine-grained control over packages, NixOS uses this power to make deep system modifications simple. For example, building a custom ISO with your SSH keys pre-installed is just a few lines of configuration. This philosophy extends to packages: you can use pre-built binaries for most things, but easily build a package from source with your own patches when you need to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sandboxed-development-environments&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sandboxed-development-environments&quot; aria-label=&quot;Anchor link for: sandboxed-development-environments&quot;&gt;üîó&lt;&#x2F;a&gt;Sandboxed Development Environments&lt;&#x2F;h3&gt;
&lt;p&gt;A powerful feature of &lt;strong&gt;Nix&lt;&#x2F;strong&gt; (the package manager) is the ability to define per-project development environments using a &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file. When you enter the project directory, &lt;code&gt;direnv&lt;&#x2F;code&gt; can automatically load a shell with all the specific tools and libraries you need for that project‚Äîa specific version of Rust, Node.js, or any other dependency. This completely solves the problem of conflicting dependencies between projects. Each project is perfectly isolated, and you can be sure that you and your colleagues are using the exact same environment.&lt;&#x2F;p&gt;
&lt;p&gt;My favorite tip is to add &lt;code&gt;if has nix; then use nix; fi&lt;&#x2F;code&gt; to the &lt;code&gt;.envrc&lt;&#x2F;code&gt; file, so the environment is only loaded for team members who have Nix installed, avoiding errors for everyone else.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;built-in-vm-based-testing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#built-in-vm-based-testing&quot; aria-label=&quot;Anchor link for: built-in-vm-based-testing&quot;&gt;üîó&lt;&#x2F;a&gt;Built-in VM-Based Testing&lt;&#x2F;h3&gt;
&lt;p&gt;A great, underrated &lt;strong&gt;NixOS&lt;&#x2F;strong&gt; feature is the built-in testing framework. You can write tests that spin up lightweight virtual machines with their own configurations to test your setup. I saw this firsthand when I recently packaged &lt;code&gt;fdbserver&lt;&#x2F;code&gt;. It took me about 30 minutes to get a test running that spins up a full FoundationDB cluster across multiple VMs. The setup is still basic‚Äîit doesn&#x27;t even use systemd‚Äîbut it was more than enough to validate the packaging. You can see the test definition &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;overlay&#x2F;blob&#x2F;main&#x2F;tests&#x2F;cluster.nix&quot;&gt;here&lt;&#x2F;a&gt;. Being able to build that kind of complex integration test so quickly is something I&#x27;ve only found in NixOS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-bad&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-bad&quot; aria-label=&quot;Anchor link for: the-bad&quot;&gt;üîó&lt;&#x2F;a&gt;The Bad&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-friction-of-simple-changes-on-nixos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-friction-of-simple-changes-on-nixos&quot; aria-label=&quot;Anchor link for: the-friction-of-simple-changes-on-nixos&quot;&gt;üîó&lt;&#x2F;a&gt;The Friction of Simple Changes on NixOS&lt;&#x2F;h3&gt;
&lt;p&gt;On a normal system, if you want to add a shell alias, you edit &lt;code&gt;.bashrc&lt;&#x2F;code&gt; and you&#x27;re done. In NixOS, there are no quick edits. You have to find the right option in your configuration, add the line, and then rebuild your system. This is great for keeping your configuration tracked, but it adds a lot of friction to simple tasks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-steep-and-isolated-learning-curve&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-steep-and-isolated-learning-curve&quot; aria-label=&quot;Anchor link for: a-steep-and-isolated-learning-curve&quot;&gt;üîó&lt;&#x2F;a&gt;A Steep and Isolated Learning Curve&lt;&#x2F;h3&gt;
&lt;p&gt;Learning the Nix ecosystem is a big commitment. The ideas are very different from other Linux systems, so your existing knowledge doesn&#x27;t help much. You have to learn the Nix language, how derivations work, and now Flakes. It takes a few months before you feel productive.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;incompatibility-with-the-wider-ecosystem&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#incompatibility-with-the-wider-ecosystem&quot; aria-label=&quot;Anchor link for: incompatibility-with-the-wider-ecosystem&quot;&gt;üîó&lt;&#x2F;a&gt;Incompatibility with the Wider Ecosystem&lt;&#x2F;h3&gt;
&lt;p&gt;Because NixOS doesn&#x27;t use the standard Filesystem Hierarchy Standard (FHS), you can&#x27;t just download a pre-compiled binary and expect it to work. It will fail to run because it can&#x27;t find its shared libraries in places like &lt;code&gt;&#x2F;lib&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;usr&#x2F;lib&lt;&#x2F;code&gt;. The Nix way to solve this is to use &lt;code&gt;patchelf&lt;&#x2F;code&gt; to modify the binary and tell it where to find its dependencies inside the &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A similar problem occurs with &quot;impure&quot; build tools. For example, the standard Protobuf plugin for Gradle tries to download the &lt;code&gt;protoc&lt;&#x2F;code&gt; compiler during the build. To make this work in a pure Nix environment, you have to disable this feature and instead provide &lt;code&gt;protoc&lt;&#x2F;code&gt; through the Nix derivation.&lt;&#x2F;p&gt;
&lt;p&gt;While these tools provide a solution, they are another hurdle to overcome. For a deep dive on patching binaries, Sander van der Burg&#x27;s post on &lt;a href=&quot;https:&#x2F;&#x2F;sandervanderburg.blogspot.com&#x2F;2015&#x2F;10&#x2F;deploying-prebuilt-binary-software-with.html&quot;&gt;deploying prebuilt binaries with Nix&lt;&#x2F;a&gt; is an excellent resource.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;handling-hardcoded-build-environments&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-hardcoded-build-environments&quot; aria-label=&quot;Anchor link for: handling-hardcoded-build-environments&quot;&gt;üîó&lt;&#x2F;a&gt;Handling Hardcoded Build Environments&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes, you can&#x27;t override impure behavior. Certain libraries, particularly in the cryptography space, might have build scripts that are hardcoded to look for dependencies in standard locations like &lt;code&gt;&#x2F;usr&#x2F;lib&lt;&#x2F;code&gt;. In these cases, your only option is to fall back on &lt;a href=&quot;https:&#x2F;&#x2F;ryantm.github.io&#x2F;nixpkgs&#x2F;builders&#x2F;special&#x2F;fhs-environments&#x2F;&quot;&gt;&lt;code&gt;buildFHSUserEnv&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to create a sandboxed environment that simulates a traditional filesystem. It&#x27;s a powerful tool, but it feels like a workaround and highlights the gap between the pure world of Nix and how many other tools work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-ugly&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-ugly&quot; aria-label=&quot;Anchor link for: the-ugly&quot;&gt;üîó&lt;&#x2F;a&gt;The Ugly&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-nix-language-barrier&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-nix-language-barrier&quot; aria-label=&quot;Anchor link for: the-nix-language-barrier&quot;&gt;üîó&lt;&#x2F;a&gt;The Nix Language Barrier&lt;&#x2F;h3&gt;
&lt;p&gt;The Nix language itself is the hardest part. It‚Äôs a functional language that feels very different from most programming languages. Simple things can be hard to figure out, and you often have to look up how to do basic operations.&lt;&#x2F;p&gt;
&lt;p&gt;LLMs have made this much easier. Before they were widely available, I spent countless hours searching for similar packages on GitHub to figure out how to solve a specific problem. Now, you can ask for a code snippet and get something that works. But needing an AI to help with basic packaging shows how hard the language is to learn.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;So, what&#x27;s the verdict? The scales may seem evenly balanced between praise and frustration, yet I wouldn&#x27;t switch away from NixOS. The learning curve is a mountain, and the daily friction can be grating. But the payoff‚Äîthe absolute, ironclad guarantee of reproducibility‚Äîis a superpower.&lt;&#x2F;p&gt;
&lt;p&gt;As someone who builds and tests complex distributed systems, I spend my days fighting entropy. NixOS provides a sane foundation where the environment is a solved problem. The fear of a broken update before an on-call shift is gone. The hours spent debugging &quot;works on my machine&quot; issues have vanished. Setting up a new machine is a 15-minute, one-command affair.&lt;&#x2F;p&gt;
&lt;p&gt;NixOS demands a significant upfront investment for long-term peace of mind. It trades short-term convenience for long-term stability and control. It&#x27;s not for everyone, but if you&#x27;re a developer or systems engineer who sees your OS as a critical part of your toolkit‚Äîone that should be as reliable and version-controlled as your code‚Äîthen the tough road of NixOS is absolutely worth it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-gentler-start-try-nix-first&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-gentler-start-try-nix-first&quot; aria-label=&quot;Anchor link for: a-gentler-start-try-nix-first&quot;&gt;üîó&lt;&#x2F;a&gt;A Gentler Start: Try Nix First&lt;&#x2F;h3&gt;
&lt;p&gt;If this article makes you curious but wary of diving headfirst into a full OS migration, there‚Äôs good news: you don‚Äôt have to. You can get a taste of Nix‚Äôs power on your existing macOS or Linux setup.&lt;&#x2F;p&gt;
&lt;p&gt;By installing just the Nix package manager, you can start creating reproducible development environments using &lt;code&gt;nix-shell&lt;&#x2F;code&gt; or Nix Flakes. This lets you manage project-specific dependencies without conflicts and share a consistent setup with your team. It&#x27;s a fantastic way to learn the Nix language and experience its benefits in a familiar environment before committing to NixOS.&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôve found it incredibly useful to have dependencies managed the same way between Linux and macOS. This website, for example, is built using the same Flake to pull Zola, and it works identically on my Linux laptop and my Mac.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with NixOS. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">nixos</category>
          <category domain="tag">nix</category>
          <category domain="tag">linux</category>
          <category domain="tag">devops</category>
      </item>
      <item>
          <title>Thank You, DataFusion: Queries in Rust, Without the Pain</title>
          <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/thank-you-datafusion/</link>
          <guid>https://pierrezemb.fr/posts/thank-you-datafusion/</guid>
          <description xml:base="https://pierrezemb.fr/posts/thank-you-datafusion/">&lt;h2 id=&quot;that-yatta-moment-rebooted&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-yatta-moment-rebooted&quot; aria-label=&quot;Anchor link for: that-yatta-moment-rebooted&quot;&gt;üîó&lt;&#x2F;a&gt;That ‚ÄúYATTA!‚Äù Moment, Rebooted&lt;&#x2F;h2&gt;
&lt;p&gt;We just merged at work our first successful data retrieval using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&quot;&gt;DataFusion&lt;&#x2F;a&gt; ‚Äî a real SQL query, over real data, flowing through a system we built. And I‚Äôll be honest: I haven‚Äôt had a ‚ÄúYATTA!‚Äù moment like this in years. This wasn&#x27;t just a feature shipped; it felt like unlocking a new superpower for our entire system, a complex vision finally materializing.&lt;&#x2F;p&gt;
&lt;p&gt;Not a silent nod. Not ‚Äúhuh, that works.‚Äù A &lt;em&gt;real&lt;&#x2F;em&gt;, physical, joyful reaction. The kind that makes you want to run a lap around the office (or, in my remote-first case, the living room).&lt;&#x2F;p&gt;
&lt;p&gt;Because plugging a query engine into your software isn‚Äôt supposed to feel this smooth. It&#x27;s usually a battle. But this one did. This one felt like an invitation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-don-t-just-add-a-query-engine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-don-t-just-add-a-query-engine&quot; aria-label=&quot;Anchor link for: you-don-t-just-add-a-query-engine&quot;&gt;üîó&lt;&#x2F;a&gt;You Don‚Äôt Just Add a Query Engine&lt;&#x2F;h2&gt;
&lt;p&gt;Adding a query engine to a codebase isn‚Äôt something you do lightly. It‚Äôs a foundational piece of infrastructure, the kind of decision that usually ends in regret, or at least a &lt;em&gt;lot&lt;&#x2F;em&gt; of rewriting. Most engines assume they own the world: they want to dictate your storage, your execution model, your schema, your optimizer, often forcing you to contort your application around their idiosyncrasies. It&#x27;s a path often paved with impedance mismatches, performance bottlenecks, and the haunting feeling that you‚Äôve just bolted an opinionated, unyielding black box onto your carefully crafted system.&lt;&#x2F;p&gt;
&lt;p&gt;But then there‚Äôs DataFusion. A SQL engine written in Rust, and ‚Äî against all odds ‚Äî one you can actually &lt;em&gt;use&lt;&#x2F;em&gt;. Drop-in? Not quite. But close enough to be kind of magical, offering a set of powerful, composable tools rather than a rigid framework.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ve-been-watching-from-day-one&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-ve-been-watching-from-day-one&quot; aria-label=&quot;Anchor link for: i-ve-been-watching-from-day-one&quot;&gt;üîó&lt;&#x2F;a&gt;I‚Äôve Been Watching From Day One&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôve been following DataFusion since it was a weekend project. I still remember the early blog posts, the prototypes, the potential. And more importantly, I read &lt;a href=&quot;https:&#x2F;&#x2F;andygrove.io&#x2F;how-query-engines-work&#x2F;&quot;&gt;Andy Grove‚Äôs book &lt;em&gt;How Query Engines Work&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. That book unlocked it for me.&lt;&#x2F;p&gt;
&lt;p&gt;It demystified concepts like logical plans, physical plans, and execution trees ‚Äî enough to give me the confidence to experiment. I first played with Apache Calcite, then circled back to DataFusion. Eventually, I contributed a small example: a custom &lt;code&gt;TableProvider&lt;&#x2F;code&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;issues&#x2F;1864&quot;&gt;added to DataFusion in this issue&lt;&#x2F;a&gt; to demonstrate how to integrate custom datasources.&lt;&#x2F;p&gt;
&lt;p&gt;And then... it only took me &lt;strong&gt;three years&lt;&#x2F;strong&gt; to actually write the code that &lt;em&gt;used&lt;&#x2F;em&gt; it. Why so long? Well, let&#x27;s just say a gazillion other things, the never-ending sagas of on-call, and a &lt;a href=&quot;&#x2F;posts&#x2F;back-engineering&quot;&gt;brief-but-eventful detour into management&lt;&#x2F;a&gt; kept my dance card impressively full. But hey, it still felt amazing when it finally clicked.&lt;&#x2F;p&gt;
&lt;p&gt;More recently, I was genuinely happy to see that &lt;strong&gt;Andrew Lamb&lt;&#x2F;strong&gt; co-authored an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;issues&#x2F;6782&quot;&gt;academic paper describing DataFusion‚Äôs architecture&lt;&#x2F;a&gt;. There‚Äôs something really validating about seeing a project you‚Äôve followed for years get formalized in research ‚Äî it‚Äôs a sign that the internals are solid and the ideas are worth sharing. And they are.&lt;&#x2F;p&gt;
&lt;p&gt;That moment was big. Because here was a Rust-native query engine where I could plug in &lt;em&gt;my own data&lt;&#x2F;em&gt;, and get &lt;em&gt;real queries&lt;&#x2F;em&gt; back. No layers of JVM glue, no corroded abstractions. Just composable, hackable Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modular-composable-respectful&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#modular-composable-respectful&quot; aria-label=&quot;Anchor link for: modular-composable-respectful&quot;&gt;üîó&lt;&#x2F;a&gt;Modular, Composable, Respectful&lt;&#x2F;h2&gt;
&lt;p&gt;What I love about DataFusion is that it doesn‚Äôt try to control your application. It‚Äôs a query engine that knows it‚Äôs a library ‚Äî not a database.&lt;&#x2F;p&gt;
&lt;p&gt;It lets you:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Plug in your own data sources&lt;&#x2F;li&gt;
&lt;li&gt;Register logical tables dynamically&lt;&#x2F;li&gt;
&lt;li&gt;Push down filters, projections, even partitions&lt;&#x2F;li&gt;
&lt;li&gt;Swap in or extend physical execution nodes&lt;&#x2F;li&gt;
&lt;li&gt;Keep your own runtime, threading, and lifecycle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And all that without feeling like you‚Äôre stepping into ‚Äúinternal‚Äù code. It‚Äôs all open, cleanly layered, and welcoming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-goal-join-indexes-without-going-insane&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-goal-join-indexes-without-going-insane&quot; aria-label=&quot;Anchor link for: my-goal-join-indexes-without-going-insane&quot;&gt;üîó&lt;&#x2F;a&gt;My Goal: Join Indexes Without Going Insane&lt;&#x2F;h2&gt;
&lt;p&gt;From the beginning, my goal was never to just scan data ‚Äî it was to &lt;strong&gt;query it properly&lt;&#x2F;strong&gt;, with indexes, joins, and all the things a real engine should do. I never had any intention of writing a join execution engine myself. That‚Äôs not the kind of wheel I want to reinvent.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s no secret that at work, we&#x27;re building a system on top of FoundationDB that draws inspiration from Apple&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;&quot;&gt;FDB Record Layer&lt;&#x2F;a&gt; (you can learn more about its concepts in &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SvoUHHM9IKU&quot;&gt;this talk&lt;&#x2F;a&gt;). We offer &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;GettingStarted.html&quot;&gt;a similar programmatic API for constructing queries&lt;&#x2F;a&gt;, which naturally leads to similar requirements. For example, developers need to express sophisticated data retrieval logic, much like this FDB Record Layer example for querying orders:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt; query = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newBuilder&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setRecordType&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Order&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFilter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lessThan&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equalsValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FlowerType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ROSE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()))))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The challenge then becomes translating such programmatic queries into efficient, index-backed scans and, crucially, leveraging a robust engine for complex operations like joins‚Äîwithout rebuilding that engine from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;What I wanted was the ability to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch rows efficiently through custom index-backed scans&lt;&#x2F;li&gt;
&lt;li&gt;Join them using &lt;code&gt;HashJoinExec&lt;&#x2F;code&gt; or &lt;code&gt;MergeJoinExec&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Let the planner and execution engine figure out the hard parts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This vision is what spurred me to start working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;datafusion-contrib&#x2F;datafusion-index-provider&quot;&gt;&lt;code&gt;datafusion-index-provider&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, a library hosted in the &lt;code&gt;datafusion-contrib&lt;&#x2F;code&gt; GitHub organization ‚Äî part of the growing ecosystem around DataFusion. At the time of writing, I‚Äôve built a PoC ‚Äî you can find it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;datafusion-index-provider&#x2F;tree&#x2F;init-v2&quot;&gt;on this branch&lt;&#x2F;a&gt; ‚Äî and I‚Äôm integrating it into our internal stack before opening a proper PR upstream.&lt;&#x2F;p&gt;
&lt;p&gt;The architecture makes it feel possible. The abstractions are ready. And I still don‚Äôt have to write a join engine. Victory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-joy-of-real-libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-joy-of-real-libraries&quot; aria-label=&quot;Anchor link for: the-joy-of-real-libraries&quot;&gt;üîó&lt;&#x2F;a&gt;The Joy of Real Libraries&lt;&#x2F;h2&gt;
&lt;p&gt;There‚Äôs a special joy in finding a library that &lt;em&gt;slots in&lt;&#x2F;em&gt; ‚Äî that doesn‚Äôt just solve a problem, but fits the shape of your system. DataFusion was that for me.&lt;&#x2F;p&gt;
&lt;p&gt;It didn‚Äôt just let me query data; it gave me a better way to think about the data I already had, and how I wanted to work with it. Instead of manually stitching together filters and projections, I could describe my intent, and let the engine handle the rest.&lt;&#x2F;p&gt;
&lt;p&gt;What‚Äôs even more exciting is that this isn‚Äôt happening in a vacuum.&lt;&#x2F;p&gt;
&lt;p&gt;We‚Äôre seeing a quiet shift in how query engines are built and used. Projects like &lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;&quot;&gt;DuckDB&lt;&#x2F;a&gt; have shown just how powerful it is to have &lt;strong&gt;SQL as a library&lt;&#x2F;strong&gt;, not a service. No server to deploy. No socket to connect to. Just an API, embedded right in your code.&lt;&#x2F;p&gt;
&lt;p&gt;DataFusion follows that same philosophy ‚Äî Rust-native, embeddable, and unapologetically library-first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-the-datafusion-team-thank-you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#to-the-datafusion-team-thank-you&quot; aria-label=&quot;Anchor link for: to-the-datafusion-team-thank-you&quot;&gt;üîó&lt;&#x2F;a&gt;To the DataFusion Team: Thank You&lt;&#x2F;h2&gt;
&lt;p&gt;To Andy Grove, to all the contributors, to everyone filing issues and refining abstractions: thank you. Your work is enabling a new generation of Rust systems to think like databases ‚Äî without becoming one.&lt;&#x2F;p&gt;
&lt;p&gt;I don‚Äôt know if you realize how rare that is. I just know it changed what I thought was possible in my software.&lt;&#x2F;p&gt;
&lt;p&gt;And I‚Äôm having a lot more fun because of it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with DataFusion. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">rust</category>
          <category domain="tag">datafusion</category>
          <category domain="tag">sql</category>
          <category domain="tag">query-engine</category>
          <category domain="tag">databases</category>
      </item>
      <item>
          <title>Bypassing FoundationDB&#x27;s Transaction Limits with Record Layer Continuations</title>
          <pubDate>Tue, 03 Jun 2025 00:30:00 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/understanding-fdb-record-layer-continuations/</link>
          <guid>https://pierrezemb.fr/posts/understanding-fdb-record-layer-continuations/</guid>
          <description xml:base="https://pierrezemb.fr/posts/understanding-fdb-record-layer-continuations/">&lt;h2 id=&quot;introducing-the-foundationdb-record-layer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introducing-the-foundationdb-record-layer&quot; aria-label=&quot;Anchor link for: introducing-the-foundationdb-record-layer&quot;&gt;üîó&lt;&#x2F;a&gt;Introducing the FoundationDB Record Layer&lt;&#x2F;h2&gt;
&lt;p&gt;Before we dive into the specifics of handling large operations with continuations (the main topic of this post), let&#x27;s briefly introduce the &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;index.html&quot;&gt;&lt;strong&gt;FoundationDB Record Layer&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. It&#x27;s a powerful open-source library built atop FoundationDB that brings a structured, record-oriented data model to FDB&#x27;s highly scalable key-value store. Think of it as adding schema management, rich indexing capabilities, and a sophisticated query engine, making it easier to build complex applications.&lt;&#x2F;p&gt;
&lt;p&gt;The Record Layer is versatile and has been adopted for demanding use-cases, most notably by Apple as the core of CloudKit, powering services for millions of users. It allows developers to define their data models using Protocol Buffers and then query them in a flexible manner.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, you can express queries like finding all &#x27;Order&#x27; records for roses costing less than $50 with a declarative API (example in Java):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt; query = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newBuilder&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setRecordType&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Order&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFilter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lessThan&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equalsValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FlowerType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ROSE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()))))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To get started and explore its capabilities further, the official &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;GettingStarted.html&quot;&gt;Getting Started Guide&lt;&#x2F;a&gt; is an excellent resource. You can also watch these talks for a deeper understanding:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SvoUHHM9IKU&quot;&gt;Using FoundationDB and the FDB Record Layer to Build CloudKit - Scott Gray, Apple&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=HLE8chgw6LI&quot;&gt;FoundationDB Record Layer: Open Source Structured Storage on FoundationDB - Nicholas Schiefer, Apple&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;For a detailed academic perspective on its design and how CloudKit uses it, refer to the &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;files&#x2F;record-layer-paper.pdf&quot;&gt;SIGMOD&#x27;19 paper: FoundationDB Record Layer: A Multi-Tenant Structured Datastore&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-challenge-fdb-s-transaction-constraints&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-challenge-fdb-s-transaction-constraints&quot; aria-label=&quot;Anchor link for: the-challenge-fdb-s-transaction-constraints&quot;&gt;üîó&lt;&#x2F;a&gt;The Challenge: FDB&#x27;s Transaction Constraints&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB (FDB) imposes strict constraints on its transactions: they must complete within 5 seconds and are limited to 10MB of manipulated data, either writes or reads. These constraints are fundamental to FDB&#x27;s design, ensuring high performance and serializable isolation. However, they pose a significant challenge for operations that inherently require processing large datasets or executing complex queries that cannot complete within these tight boundaries, such as full table scans, large analytical queries, or bulk data exports.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;FoundationDB Record Layer&lt;&#x2F;strong&gt; addresses this challenge through a mechanism known as &lt;strong&gt;continuations&lt;&#x2F;strong&gt;. Continuations allow a single logical operation to be broken down into a sequence of smaller, independent FDB transactions. Each transaction processes a segment of the total workload and, if more work remains, yields a &lt;strong&gt;continuation token&lt;&#x2F;strong&gt;. This opaque token encapsulates the state required to resume the operation precisely where the previous transaction left off.&lt;&#x2F;p&gt;
&lt;p&gt;This article delves into the technical details of Record Layer continuations, exploring how they function and how to leverage them effectively to build robust, scalable applications on FDB.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bridging-transactions-the-role-of-continuations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bridging-transactions-the-role-of-continuations&quot; aria-label=&quot;Anchor link for: bridging-transactions-the-role-of-continuations&quot;&gt;üîó&lt;&#x2F;a&gt;Bridging Transactions: The Role of Continuations&lt;&#x2F;h2&gt;
&lt;p&gt;Consider a query to retrieve all records matching a specific filter from a large dataset. Executing this as a single FDB transaction would likely violate the 5-second or 10MB limit. The Record Layer employs continuations to serialize this operation across multiple transactions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Initial Request:&lt;&#x2F;strong&gt; The application initiates a query against the Record Layer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Segmented Execution:&lt;&#x2F;strong&gt; The Record Layer&#x27;s query planner executes the query, but with built-in scan limiters. It processes records until a predefined limit (e.g., row count, time duration, or byte size) is approached, or it nears FDB&#x27;s intrinsic transaction limits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;State Serialization:&lt;&#x2F;strong&gt; Before the current FDB transaction commits, if the logical operation is incomplete, the Record Layer serializes the execution state of the query plan into a continuation token.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Partial Result &amp;amp; Token:&lt;&#x2F;strong&gt; The application receives the processed segment of data and the continuation token. The FDB transaction for this segment commits successfully.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resumption:&lt;&#x2F;strong&gt; To fetch the next segment, the application submits a new request, providing the previously received continuation token.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;State Deserialization &amp;amp; Continued Execution:&lt;&#x2F;strong&gt; The Record Layer deserializes the token, restores the query plan&#x27;s state, and resumes execution from the exact point it paused. This typically involves adjusting scan boundaries (e.g., starting a key-range scan from the key after the last one processed).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This cycle repeats until the entire logical operation is complete. The continuation token acts as the critical link, enabling a series of short, FDB-compliant transactions to collectively achieve the effect of a single, long-running operation without violating FDB&#x27;s core constraints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dissecting-the-continuation-token&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dissecting-the-continuation-token&quot; aria-label=&quot;Anchor link for: dissecting-the-continuation-token&quot;&gt;üîó&lt;&#x2F;a&gt;Dissecting the Continuation Token&lt;&#x2F;h2&gt;
&lt;p&gt;While the continuation token is &lt;strong&gt;opaque&lt;&#x2F;strong&gt; to the application (it&#x27;s a &lt;code&gt;byte[]&lt;&#x2F;code&gt; that should not be introspected or modified), it internally contains structured information vital for resuming query execution. The exact format is an implementation detail of the Record Layer and can evolve, but conceptually, it must capture:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scan Boundaries:&lt;&#x2F;strong&gt; The key (or keys, for multi-dimensional indexes) where the next scan segment should begin. This ensures no data is missed or re-processed unnecessarily.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Query Plan State:&lt;&#x2F;strong&gt; For complex query plans involving joins, filters, aggregations, or in-memory sorting, the token may need to store intermediate state specific to those operators. For instance, a &lt;code&gt;UnionPlan&lt;&#x2F;code&gt; or &lt;code&gt;IntersectionPlan&lt;&#x2F;code&gt; might need to remember which child plan was active and its respective continuation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scan Limiter State:&lt;&#x2F;strong&gt; Information about accumulated counts or sizes if the scan was paused due to application-defined limits rather than FDB limits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Version Information:&lt;&#x2F;strong&gt; To ensure compatibility if the token format changes across Record Layer versions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The opacity of the token is a deliberate design choice. It decouples the application from the internal mechanics of the Record Layer, allowing the latter to evolve its continuation strategies (e.g., for efficiency or new features) without breaking client applications. The application&#x27;s responsibility is solely to store and return this token verbatim.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resuming-query-execution-via-continuations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#resuming-query-execution-via-continuations&quot; aria-label=&quot;Anchor link for: resuming-query-execution-via-continuations&quot;&gt;üîó&lt;&#x2F;a&gt;Resuming Query Execution via Continuations&lt;&#x2F;h2&gt;
&lt;p&gt;When a continuation token is provided to a &lt;code&gt;RecordCursor&lt;&#x2F;code&gt; (the Record Layer&#x27;s abstraction for iterating over query results), the underlying &lt;code&gt;RecordQueryPlan&lt;&#x2F;code&gt; uses it to reconstruct its state.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Plan Identification:&lt;&#x2F;strong&gt; The token typically identifies the specific query plan or sub-plan it pertains to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;State Restoration:&lt;&#x2F;strong&gt; Each operator in the query plan (e.g., &lt;code&gt;IndexScanPlan&lt;&#x2F;code&gt;, &lt;code&gt;FilterPlan&lt;&#x2F;code&gt;, &lt;code&gt;SortPlan&lt;&#x2F;code&gt;) that can be stateful across transaction boundaries implements logic to initialize itself from the continuation. For an &lt;code&gt;IndexScanPlan&lt;&#x2F;code&gt;, this primarily means setting the &lt;code&gt;ScanComparisons&lt;&#x2F;code&gt; for the next range read. For a &lt;code&gt;UnionPlan&lt;&#x2F;code&gt;, it might mean restoring the continuation for one of its child plans and indicating which child to resume.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Execution Resumption:&lt;&#x2F;strong&gt; Once the plan&#x27;s state is restored, the &lt;code&gt;RecordCursor&lt;&#x2F;code&gt; can proceed to fetch the next batch of records. The execution effectively &quot;jumps&quot; to the point encoded in the continuation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This mechanism allows the Record Layer to transparently manage the complexities of distributed, stateful iteration over potentially vast datasets, all while adhering to FDB&#x27;s transactional model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implications-of-non-atomicity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#implications-of-non-atomicity&quot; aria-label=&quot;Anchor link for: implications-of-non-atomicity&quot;&gt;üîó&lt;&#x2F;a&gt;Implications of Non-Atomicity&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s important to understand a key implication of this multi-transaction approach: while each individual FDB transaction executed as part of a continued operation is atomic and isolated (typically providing serializable isolation), the overall logical operation spanning multiple continuations is &lt;strong&gt;not atomic&lt;&#x2F;strong&gt; in the same way. Mutations to the data by other concurrent transactions can occur &lt;em&gt;between&lt;&#x2F;em&gt; the FDB transactions of a continued scan. As a result, a long-running operation that uses continuations doesn&#x27;t see the entire dataset at a single, frozen moment in time. Instead, it might see some data that was present or changed &lt;em&gt;after&lt;&#x2F;em&gt; the operation began but &lt;em&gt;before&lt;&#x2F;em&gt; it completed. This is a natural consequence of breaking the work into smaller pieces to fit within FDB&#x27;s transaction limits. Applications should be aware of this behavior, particularly if they need all the data to reflect its state from one specific instant.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The Record Layer&#x27;s continuation feature is a powerful tool for handling large datasets and complex queries in FoundationDB, but it&#x27;s important to understand the implications of non-atomicity. By breaking operations into smaller, FDB-compliant transactions, the Record Layer provides a flexible and scalable solution while maintaining the core principles of FDB&#x27;s transactional model.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your thoughts. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">foundationdb</category>
          <category domain="tag">record-layer</category>
          <category domain="tag">java</category>
          <category domain="tag">database</category>
          <category domain="tag">continuation</category>
          <category domain="tag">pagination</category>
          <category domain="tag">distributed-systems</category>
      </item>
      <item>
          <title>Unlocking Tokio&#x27;s Hidden Gems: Determinism, Paused Time, and Local Execution</title>
          <pubDate>Sun, 18 May 2025 18:13:02 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/tokio-hidden-gems/</link>
          <guid>https://pierrezemb.fr/posts/tokio-hidden-gems/</guid>
          <description xml:base="https://pierrezemb.fr/posts/tokio-hidden-gems/">&lt;p&gt;Tokio is the powerhouse of asynchronous Rust, celebrated for its blazing speed and robust concurrency primitives. Many of us interact with its core components daily‚Äî&lt;code&gt;spawn&lt;&#x2F;code&gt;, &lt;code&gt;select!&lt;&#x2F;code&gt;, &lt;code&gt;async fn&lt;&#x2F;code&gt;, and the rich ecosystem of I&#x2F;O utilities. But beyond these well-trodden paths lie some incredibly potent, albeit less-publicized, features that can dramatically elevate your testing strategies, offer more nuanced task management, and grant you surgical control over your runtime&#x27;s execution.&lt;&#x2F;p&gt;
&lt;p&gt;Today, let&#x27;s pull back the curtain on a few of these invaluable tools: current-thread runtimes for embracing single-threaded flexibility with &lt;code&gt;!Send&lt;&#x2F;code&gt; types, seeded runtimes for taming non-determinism, and the paused clock for mastering time in your tests.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effortless-send-futures-with-current-thread-runtimes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#effortless-send-futures-with-current-thread-runtimes&quot; aria-label=&quot;Anchor link for: effortless-send-futures-with-current-thread-runtimes&quot;&gt;üîó&lt;&#x2F;a&gt;Effortless &lt;code&gt;!Send&lt;&#x2F;code&gt; Futures with Current-Thread Runtimes&lt;&#x2F;h2&gt;
&lt;p&gt;While Tokio&#x27;s multi-threaded scheduler is a marvel for CPU-bound and parallel I&#x2F;O tasks, there are scenarios where a single-threaded execution model is simpler or even necessary. This is particularly true when dealing with types that are not &lt;code&gt;Send&lt;&#x2F;code&gt; (i.e., cannot be safely transferred across threads), such as &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, or when you want to avoid the overhead and complexity of synchronization primitives like &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt; for state shared only within a single thread of execution.&lt;&#x2F;p&gt;
&lt;p&gt;Tokio&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.new_current_thread&quot;&gt;&lt;code&gt;Builder::new_current_thread()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; followed by &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.build_local&quot;&gt;&lt;code&gt;build_local()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (part of the same &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html&quot;&gt;&lt;code&gt;Builder&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; API) provides a streamlined way to create a runtime that executes tasks on the thread that created it. This setup inherently supports spawning &lt;code&gt;!Send&lt;&#x2F;code&gt; futures using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;task&#x2F;fn.spawn_local.html&quot;&gt;&lt;code&gt;tokio::task::spawn_local&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; without needing to manually manage a &lt;code&gt;LocalSet&lt;&#x2F;code&gt; for basic cases. This approach aligns well with ongoing discussions in the Tokio community aimed at simplifying &lt;code&gt;!Send&lt;&#x2F;code&gt; task management.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;code&gt;build_local()&lt;&#x2F;code&gt; method not only simplifies handling &lt;code&gt;!Send&lt;&#x2F;code&gt; types today but also reflects the direction Tokio is heading. The Tokio team is exploring ways to make this even more integrated and ergonomic through a proposed &lt;strong&gt;&lt;code&gt;LocalRuntime&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; type (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&#x2F;issues&#x2F;6739&quot;&gt;#6739&lt;&#x2F;a&gt;). The vision for &lt;code&gt;LocalRuntime&lt;&#x2F;code&gt; is a runtime that is inherently &lt;code&gt;!Send&lt;&#x2F;code&gt; (making &lt;code&gt;!Send&lt;&#x2F;code&gt; task management seamless within its context), where &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; and &lt;code&gt;tokio::task::spawn_local&lt;&#x2F;code&gt; would effectively behave identically.&lt;&#x2F;p&gt;
&lt;p&gt;This proposed enhancement is linked to a discussion about potentially deprecating the existing &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;task&#x2F;struct.LocalSet.html&quot;&gt;&lt;code&gt;tokio::task::LocalSet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&#x2F;issues&#x2F;6741&quot;&gt;#6741&lt;&#x2F;a&gt;). While &lt;code&gt;LocalSet&lt;&#x2F;code&gt; currently offers fine-grained control for running &lt;code&gt;!Send&lt;&#x2F;code&gt; tasks (e.g., within specific parts of larger, multi-threaded applications), it comes with complexities, performance overhead, and integration challenges that &lt;code&gt;LocalRuntime&lt;&#x2F;code&gt; aims to resolve.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;So, what&#x27;s the takeaway for you?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For most scenarios requiring &lt;code&gt;!Send&lt;&#x2F;code&gt; tasks on a single thread&lt;&#x2F;strong&gt; (like entire applications, test suites, or dedicated utility threads): Using &lt;code&gt;Builder::new_current_thread().build_local()&lt;&#x2F;code&gt; is the recommended, simpler, and more future-proof path. It embodies the principles of the proposed &lt;code&gt;LocalRuntime&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;If you need to embed &lt;code&gt;!Send&lt;&#x2F;code&gt; task execution within a specific scope of a larger, multi-threaded application&lt;&#x2F;strong&gt;: &lt;code&gt;LocalSet&lt;&#x2F;code&gt; is the current tool. However, be mindful of its potential deprecation and associated complexities. For new projects, evaluate if a dedicated thread using a &lt;code&gt;build_local()&lt;&#x2F;code&gt; runtime (or a future &lt;code&gt;LocalRuntime&lt;&#x2F;code&gt;) might offer a cleaner solution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Essentially, Tokio is moving towards making single-threaded &lt;code&gt;!Send&lt;&#x2F;code&gt; execution more straightforward and deeply integrated. The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.build_local&quot;&gt;&lt;code&gt;build_local()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; method is a current gem that aligns you with this forward-looking approach.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how you typically set one up (the &lt;code&gt;build_local()&lt;&#x2F;code&gt; way):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Builder;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rt = Builder::new_current_thread()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_all&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Enable I&#x2F;O, time, etc.
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_local&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Default::default()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Builds a runtime on the current thread
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The runtime itself is the &amp;#39;LocalSet&amp;#39; in this context
&lt;&#x2F;span&gt;&lt;span&gt;    rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Spawn !Send futures here using tokio::task::spawn_local(...)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; For example:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rc_value = std::rc::Rc::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::task::spawn_local(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RC value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, *rc_value);
&lt;&#x2F;span&gt;&lt;span&gt;        }).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running !Send futures on a current-thread runtime!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach simplifies designs where tasks don&#x27;t need to cross thread boundaries, allowing for more straightforward state management.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taming-non-determinism-seeded-runtimes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#taming-non-determinism-seeded-runtimes&quot; aria-label=&quot;Anchor link for: taming-non-determinism-seeded-runtimes&quot;&gt;üîó&lt;&#x2F;a&gt;Taming Non-Determinism: Seeded Runtimes&lt;&#x2F;h2&gt;
&lt;p&gt;One of the challenges in testing concurrent systems is non-determinism. When multiple futures are ready to make progress simultaneously, such as in a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;macro.select.html&quot;&gt;&lt;code&gt;tokio::select!&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; macro, the order in which they are polled can vary between runs. This can make reproducing and debugging race conditions or specific interleavings tricky.&lt;&#x2F;p&gt;
&lt;p&gt;Tokio offers a solution: &lt;strong&gt;seeded runtimes&lt;&#x2F;strong&gt;. By providing a specific &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.rng_seed&quot;&gt;&lt;code&gt;RngSeed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; when building the runtime, you can make certain scheduler behaviors deterministic. This is particularly useful for &lt;code&gt;select!&lt;&#x2F;code&gt; statements involving multiple futures that become ready around the same time.&lt;&#x2F;p&gt;
&lt;p&gt;Consider this example, which demonstrates how a seed can influence which future &#x27;wins&#x27; a &lt;code&gt;select!&lt;&#x2F;code&gt; race:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::{Builder, RngSeed};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::time::{sleep, Duration};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Example function to show deterministic select!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;demo_deterministic_select&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Try changing this seed to see the select! behavior change (but consistently per seed).
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; seed = RngSeed::from_bytes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_fixed_seed_001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; e.g., let seed = RngSeed::from_bytes(b&amp;quot;another_seed_002&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rt = Builder::new_current_thread()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Pausing the clock is crucial here to ensure both tasks become ready 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; at the *exact same logical time* after we call `tokio::time::advance`.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This makes the seed&amp;#39;s role in tie-breaking very clear.
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;start_paused&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rng_seed&lt;&#x2F;span&gt;&lt;span&gt;(seed)     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Apply the seed for deterministic polling order
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_local&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Default::default())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Now, let&amp;#39;s run some tasks and see select! in action.
&lt;&#x2F;span&gt;&lt;span&gt;    rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task_a = async {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Task A finished.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Result from A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task_b = async {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Task B finished.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Result from B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Advance time so both sleeps complete and both tasks become ready.
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::time::advance(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; With the same seed, the select! macro will consistently pick the same
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; branch if both are ready. Change the seed to see if the other branch gets picked.
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::select! {
&lt;&#x2F;span&gt;&lt;span&gt;            res_a = task_a =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Select chose Task A, result: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, res_a);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            res_b = task_b =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Select chose Task B, result: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, res_b);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;demo_deterministic_select&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;mastering-time-paused-clock-and-auto-advancement&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mastering-time-paused-clock-and-auto-advancement&quot; aria-label=&quot;Anchor link for: mastering-time-paused-clock-and-auto-advancement&quot;&gt;üîó&lt;&#x2F;a&gt;Mastering Time: Paused Clock and Auto-Advancement&lt;&#x2F;h2&gt;
&lt;p&gt;Testing time-dependent behavior (timeouts, retries, scheduled tasks) can be slow and flaky. Waiting for real seconds or minutes to pass during tests is inefficient. Tokio&#x27;s time facilities can be &lt;strong&gt;paused&lt;&#x2F;strong&gt; and &lt;strong&gt;manually advanced&lt;&#x2F;strong&gt;, giving you precise control over the flow of time within your tests.&lt;&#x2F;p&gt;
&lt;p&gt;When you initialize a runtime with &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;latest&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.start_paused&quot;&gt;&lt;code&gt;start_paused(true)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, the runtime&#x27;s clock will not advance automatically based on wall-clock time. Instead, you use &lt;code&gt;tokio::time::advance(Duration)&lt;&#x2F;code&gt; to move time forward explicitly.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s particularly neat is Tokio&#x27;s &lt;strong&gt;auto-advance&lt;&#x2F;strong&gt; feature when the runtime is paused and idle. This works because Tokio&#x27;s runtime separates the &lt;strong&gt;executor&lt;&#x2F;strong&gt; (which polls your async code until it&#x27;s blocked) from the &lt;strong&gt;reactor&lt;&#x2F;strong&gt; (which wakes tasks based on I&#x2F;O or timer events). If all tasks are sleeping, the executor is idle. The reactor can then identify the next scheduled timer, allowing Tokio to automatically advance its clock to that point. This prevents tests from hanging indefinitely while still allowing for controlled time progression.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s your example illustrating this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::time::{Duration, Instant, sleep};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;auto_advance_kicks_in_when_idle_example&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Sleep for 5 seconds. Since the runtime is paused, this would normally hang.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; However, if no other tasks are active, Tokio auto-advances time.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; elapsed = start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will be exactly 5 seconds (simulated time)
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(elapsed, Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Elapsed (simulated): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, elapsed);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this scenario, &lt;code&gt;sleep(Duration::from_secs(5)).await&lt;&#x2F;code&gt; doesn&#x27;t cause your test to wait for 5 real seconds. Because the clock is paused and this &lt;code&gt;sleep&lt;&#x2F;code&gt; is the only pending timed event, Tokio advances its internal clock by 5 seconds, allowing the sleep to complete almost instantaneously in real time. This makes testing timeouts, scheduled events, and other time-sensitive logic fast and reliable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Tokio offers more than just speed; it&#x27;s a powerful toolkit. Features like current-thread runtimes for &lt;code&gt;!Send&lt;&#x2F;code&gt; tasks, seeded runtimes for deterministic tests, and a controllable clock for time-based logic help build robust and debuggable async Rust applications. These &#x27;hidden gems&#x27; allow you to confidently handle complex concurrency and testing. So, explore Tokio&#x27;s depth‚Äîthe right tool for your challenge might be closer than you think.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your thoughts. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">rust</category>
          <category domain="tag">tokio</category>
          <category domain="tag">async</category>
          <category domain="tag">testing</category>
          <category domain="tag">concurrency</category>
          <category domain="tag">deterministic</category>
      </item>
      <item>
          <title>What if we embraced simulation-driven development?</title>
          <pubDate>Fri, 18 Apr 2025 11:12:12 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/simulation-driven-development/</link>
          <guid>https://pierrezemb.fr/posts/simulation-driven-development/</guid>
          <description xml:base="https://pierrezemb.fr/posts/simulation-driven-development/">&lt;p&gt;This article has been translated from my original French presentation at the upcoming Devoxx France 2025, titled &quot;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1xm4yNGnV2Oi8Lk3ZHEvg4aDMNEFieSmW06CkItCigSc&#x2F;edit?usp=sharing&quot;&gt;What if we embraced simulation-driven development?&lt;&#x2F;a&gt;&quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-tale-of-a-bug&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-tale-of-a-bug&quot; aria-label=&quot;Anchor link for: the-tale-of-a-bug&quot;&gt;üîó&lt;&#x2F;a&gt;The Tale of a Bug&lt;&#x2F;h2&gt;
&lt;p&gt;As a software engineer, my responsibilities include debugging distributed systems during on-call shifts. My tendency to attract peculiar issues during these shifts earned me the nickname &quot;Black Cat&quot;. Let me share a particularly memorable incident:&lt;&#x2F;p&gt;
&lt;p&gt;One of the most memorable incidents happened when a &lt;strong&gt;network partition&lt;&#x2F;strong&gt; completely disrupted a 70+ node Apache Hadoop cluster. The system was in disarray, with nodes confused about &lt;strong&gt;block replication&lt;&#x2F;strong&gt; and &lt;strong&gt;management&lt;&#x2F;strong&gt;. After the network issue was resolved, we decided to &lt;strong&gt;restart the cluster&lt;&#x2F;strong&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;But it wouldn&#x27;t come back online.&lt;&#x2F;p&gt;
&lt;p&gt;The reason? The system was encountering a &lt;code&gt;NullPointerException&lt;&#x2F;code&gt; during startup due to its faulty state. The cluster was too slow to restart properly because of how severely degraded it had become after the network partition. This bug had actually been fixed in newer versions of &lt;strong&gt;HDFS&lt;&#x2F;strong&gt;, but we were running an older release.&lt;&#x2F;p&gt;
&lt;p&gt;The solution required &lt;strong&gt;patching the Hadoop codebase&lt;&#x2F;strong&gt; by &lt;strong&gt;backporting the fix&lt;&#x2F;strong&gt;, &lt;strong&gt;recompiling&lt;&#x2F;strong&gt;, and &lt;strong&gt;distributing the new jar&lt;&#x2F;strong&gt; across all nodes‚Äînot exactly what you want to be doing during an active incident. Rolling out patches to a distributed system while it&#x27;s already &quot;on fire&quot; is rarely recommended, but we had no choice.&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly the type of code that feels disconnected from production requirements‚Äîthe bug appeared at the worst possible moment, during recovery, when the system was most vulnerable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-development-production-gap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-development-production-gap&quot; aria-label=&quot;Anchor link for: the-development-production-gap&quot;&gt;üîó&lt;&#x2F;a&gt;The Development-Production Gap&lt;&#x2F;h2&gt;
&lt;p&gt;This incident highlights a fundamental truth in software engineering: &lt;strong&gt;production environments are vastly different from development environments&lt;&#x2F;strong&gt;. The gap between them is comparable to the difference between passing a written driving test and actually driving on a busy highway during rush hour.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;pre class=&quot;mermaid&quot;&gt;
        flowchart LR
    S[&amp;quot;Your System&amp;quot;] 
    U[&amp;quot;Your Users&amp;quot;]
    W[&amp;quot;The World&amp;quot;]
    
    U --&amp;gt; S
    W --&amp;gt; S
    &lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In development, everything is &lt;strong&gt;controlled&lt;&#x2F;strong&gt;, &lt;strong&gt;clean&lt;&#x2F;strong&gt;, and &lt;strong&gt;predictable&lt;&#x2F;strong&gt;. In production:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Users do &lt;strong&gt;unexpected things&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Systems operate under &lt;strong&gt;pressure&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Components fail in &lt;strong&gt;complex ways&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Edge cases&lt;&#x2F;strong&gt; occur regularly&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Being on-call forces you to confront this reality. The pager is an unforgiving teacher, but is there a better way to instill a production mindset without throwing engineers into the deep end of incident response?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-testing-problem&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-testing-problem&quot; aria-label=&quot;Anchor link for: the-testing-problem&quot;&gt;üîó&lt;&#x2F;a&gt;The Testing Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s consider a standard e-commerce API with multiple dimensions of variability:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User Types: Guest, Logged-in, Premium, Business (4)&lt;&#x2F;li&gt;
&lt;li&gt;Payment Methods: Credit Card, PayPal, Apple Pay, Gift Card, Bank Transfer (5)&lt;&#x2F;li&gt;
&lt;li&gt;Delivery Options: Standard, Express, In-Store Pickup, Same-Day (4)&lt;&#x2F;li&gt;
&lt;li&gt;Promotions: Yes, No, Expired (3)&lt;&#x2F;li&gt;
&lt;li&gt;Inventory Status: In Stock, Low Stock, Out of Stock, Preorder (4)&lt;&#x2F;li&gt;
&lt;li&gt;Currency: USD, EUR, GBP, JPY (4)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Testing all possible combinations requires 4√ó5√ó4√ó3√ó4√ó4 = 3,840 unique test cases‚Äîand that&#x27;s just for the happy path! Add error conditions, network failures, and other edge cases, and this number explodes exponentially.&lt;&#x2F;p&gt;
&lt;p&gt;This is why comprehensive end-to-end testing is so difficult. Every new feature multiplies the complexity, and bugs often hide in rare combinations of conditions that we never thought to test.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-world-is-harsh&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-world-is-harsh&quot; aria-label=&quot;Anchor link for: the-world-is-harsh&quot;&gt;üîó&lt;&#x2F;a&gt;The World Is Harsh&lt;&#x2F;h2&gt;
&lt;p&gt;Meanwhile, the real world is even more chaotic than our test cases. Research papers like &quot;&lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;osdi18-alquraan.pdf&quot;&gt;An Analysis of Network-Partitioning Failures in Cloud Systems&lt;&#x2F;a&gt;&quot; (OSDI &#x27;18) and &quot;&lt;a href=&quot;https:&#x2F;&#x2F;sigops.org&#x2F;s&#x2F;conferences&#x2F;hotos&#x2F;2021&#x2F;papers&#x2F;hotos21-s11-bronson.pdf&quot;&gt;Metastable Failures in Distributed Systems&lt;&#x2F;a&gt;&quot; (HotOS &#x27;21) document just how complex failure modes can be in production.&lt;&#x2F;p&gt;
&lt;p&gt;In a &lt;a href=&quot;https:&#x2F;&#x2F;qconlondon.com&#x2F;london-2015&#x2F;system&#x2F;files&#x2F;keynotes-slides&#x2F;2015-03%20QCon%20(john%20wilkes).pdf&quot;&gt;presentation by John Wilkes (Google) at QCon London 2015&lt;&#x2F;a&gt;, a 2,000-machine service will experience more than 10 machine crashes per day‚Äîand this is considered normal, not exceptional. When you operate at scale, failures become a constant background noise rather than exceptional events.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, your &lt;strong&gt;microservices architecture&lt;&#x2F;strong&gt; is absolutely a distributed system susceptible to these issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sre-vs-swe-perspectives&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sre-vs-swe-perspectives&quot; aria-label=&quot;Anchor link for: sre-vs-swe-perspectives&quot;&gt;üîó&lt;&#x2F;a&gt;SRE vs. SWE Perspectives&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s often a gap between the Software Engineer (SWE) perspective and the Site Reliability Engineer (SRE) perspective:&lt;&#x2F;p&gt;
&lt;p&gt;SWEs tend to focus on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Development environments (which are completely different from production)&lt;&#x2F;li&gt;
&lt;li&gt;Feature implementations&lt;&#x2F;li&gt;
&lt;li&gt;Code that passes tests (but may not account for real-world complexity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;SREs worry about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;System interactions in production under pressure&lt;&#x2F;li&gt;
&lt;li&gt;Complex, unpredictable failure modes&lt;&#x2F;li&gt;
&lt;li&gt;Recovery mechanisms when things are already broken&lt;&#x2F;li&gt;
&lt;li&gt;Being paged at 3 AM to fix critical issues alone&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The question then becomes: &lt;strong&gt;How can we help developers gain a better understanding of production realities without subjecting them to the trial-by-fire of on-call rotations?&lt;&#x2F;strong&gt; How might we bridge this gap between development and operations, creating environments where engineers can experience production-like conditions safely, learn from failures, and build more resilient systems from the beginning?&lt;&#x2F;p&gt;
&lt;p&gt;We need to test not just our expected use cases, but the &lt;strong&gt;&quot;worse&quot; versions of both our users and the world&lt;&#x2F;strong&gt;. How do we accomplish this comprehensively?&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;pre class=&quot;mermaid&quot;&gt;
        flowchart LR
    S[&amp;quot;Your System&amp;quot;] 
    U[&amp;quot;Your worst Users&amp;quot;]
    W[&amp;quot;The worst World&amp;quot;]
    
    U --&amp;gt; S
    W --&amp;gt; S
    &lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;deterministic-simulation-testing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#deterministic-simulation-testing&quot; aria-label=&quot;Anchor link for: deterministic-simulation-testing&quot;&gt;üîó&lt;&#x2F;a&gt;Deterministic Simulation Testing&lt;&#x2F;h2&gt;
&lt;p&gt;The solution lies in a strategy that&#x27;s both robust and practical: &lt;strong&gt;Deterministic Simulation Testing (DST)&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For effective testing of complex distributed systems, we need an approach that satisfies three key requirements:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fast and debuggable testing&lt;&#x2F;strong&gt; ‚Üí We achieve this with a single-threaded approach that uses a deterministic event loop, making issues perfectly reproducible&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing the entire system at once&lt;&#x2F;strong&gt; ‚Üí By packaging everything into a single binary with simulated network interactions, we can test complex distributed behaviors without actual network infrastructure&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Robust against unknown issues&lt;&#x2F;strong&gt; ‚Üí Through randomized testing with controlled entropy injection, we discover edge cases that we wouldn&#x27;t think to test explicitly&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These three elements work together to create a powerful testing methodology that&#x27;s both practical to implement and effective at finding real-world issues.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how we can simulate both our users and the world?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-simulate&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-to-simulate&quot; aria-label=&quot;Anchor link for: how-to-simulate&quot;&gt;üîó&lt;&#x2F;a&gt;How to simulate?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;simulating-users-randomized-input-and-property-based-testing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simulating-users-randomized-input-and-property-based-testing&quot; aria-label=&quot;Anchor link for: simulating-users-randomized-input-and-property-based-testing&quot;&gt;üîó&lt;&#x2F;a&gt;Simulating Users: Randomized Input and Property-Based Testing&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of writing thousands of individual test cases, we can use &lt;strong&gt;property-based testing&lt;&#x2F;strong&gt; to generate randomized inputs and verify system properties. This approach is not new and is well-known for unit tests but is relatively new for integration tests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UserType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GUEST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, LOGGED_IN, PREMIUM, BUSINESS }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PaymentMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CARD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, PAYPAL, APPLE_PAY, GIFT_CARD, BANK_TRANSFER }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt; rand = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; random seed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UserType&lt;&#x2F;span&gt;&lt;span&gt; user = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pickRandom&lt;&#x2F;span&gt;&lt;span&gt;(rand, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UserType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PaymentMethod&lt;&#x2F;span&gt;&lt;span&gt; paymentMethod = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pickRandom&lt;&#x2F;span&gt;&lt;span&gt;(rand, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PaymentMethod&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rather than hardcoding test cases like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertFalse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;GUEST&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canUse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SAVED_CARD&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can write property-based assertions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertEquals&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(), user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canUse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SAVED_CARD&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach is implemented in libraries like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;strong&gt;Hypothesis&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Java: &lt;strong&gt;jqwik&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust: &lt;strong&gt;proptest&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;simulating-the-world-injecting-chaos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simulating-the-world-injecting-chaos&quot; aria-label=&quot;Anchor link for: simulating-the-world-injecting-chaos&quot;&gt;üîó&lt;&#x2F;a&gt;Simulating the World: Injecting Chaos&lt;&#x2F;h3&gt;
&lt;p&gt;We also need to simulate the chaotic nature of production environments by injecting failures into:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Time (delays, timeouts, retries, race conditions)&lt;&#x2F;li&gt;
&lt;li&gt;Network (latency, failure, disconnection)&lt;&#x2F;li&gt;
&lt;li&gt;Infrastructure (disk full, service crash, replica lag)&lt;&#x2F;li&gt;
&lt;li&gt;External dependencies (slow APIs, rate limiting)&lt;&#x2F;li&gt;
&lt;li&gt;Load (varying numbers of concurrent users)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s important to note that implementing full deterministic simulation requires control over every aspect of your system, from task scheduling to I&#x2F;O operations. This is significantly easier if your system is built with simulation in mind from day one. Some languages offer advantages in this area‚Äîfor example, Rust&#x27;s ecosystem makes it relatively straightforward to implement custom virtual threading executors compared to modifying the JVM.&lt;&#x2F;p&gt;
&lt;p&gt;For existing codebases where a full rewrite isn&#x27;t practical, you can still benefit from simulation testing by adding layers of indirection. Even simple mocks like the HTTP client example below can help you discover how your system behaves under various failure conditions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpClientMock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;random &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; random seed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate random chance of returning an error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextDouble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTTP 500 Internal Server Error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; delay &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate 0‚Äì499ms latency
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(delay);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTTP 200 OK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;who-uses-dst&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#who-uses-dst&quot; aria-label=&quot;Anchor link for: who-uses-dst&quot;&gt;üîó&lt;&#x2F;a&gt;Who Uses DST?&lt;&#x2F;h2&gt;
&lt;p&gt;Not many companies are using DST, but we are starting to have a nice list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clever Cloud&lt;&#x2F;li&gt;
&lt;li&gt;TigerBeetle&lt;&#x2F;li&gt;
&lt;li&gt;Resonate&lt;&#x2F;li&gt;
&lt;li&gt;RisingWave&lt;&#x2F;li&gt;
&lt;li&gt;Sync @ Dropbox&lt;&#x2F;li&gt;
&lt;li&gt;sled.rs&lt;&#x2F;li&gt;
&lt;li&gt;Kafka‚Äôs KRaft&lt;&#x2F;li&gt;
&lt;li&gt;Astradot&lt;&#x2F;li&gt;
&lt;li&gt;Polar Signals&lt;&#x2F;li&gt;
&lt;li&gt;AWS&lt;&#x2F;li&gt;
&lt;li&gt;Antithesis&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dst-at-clever-cloud&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dst-at-clever-cloud&quot; aria-label=&quot;Anchor link for: dst-at-clever-cloud&quot;&gt;üîó&lt;&#x2F;a&gt;DST at Clever Cloud&lt;&#x2F;h3&gt;
&lt;p&gt;At Clever Cloud, we&#x27;re implementing a multi-tenant, multi-model distributed database heavily relying on FoundationDB. While we haven&#x27;t developed our own deterministic simulation testing framework yet, we leverage &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;&quot;&gt;FoundationDB&lt;&#x2F;a&gt;&#x27;s built-in simulation by injecting custom workloads.&lt;&#x2F;strong&gt; This approach is core to developing our first serverless product, &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;blog&#x2F;features&#x2F;2024&#x2F;06&#x2F;11&#x2F;materia-kv-our-easy-to-use-serverless-key-value-database-is-available-to-all&#x2F;&quot;&gt;Materia KV&lt;&#x2F;a&gt;. The simulations FoundationDB provides include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Random network partitions&lt;&#x2F;li&gt;
&lt;li&gt;Machine reboots&lt;&#x2F;li&gt;
&lt;li&gt;Concurrent chaos events, like shuffling the actual data disk between 2 nodes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our simulation-driven development workflow runs simulations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In CI loops&lt;&#x2F;li&gt;
&lt;li&gt;Continuously in the cloud&lt;&#x2F;li&gt;
&lt;li&gt;With 30 minutes of simulation equating to roughly 24 hours of chaos testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When we find a faulty seed, we can replay it locally, providing a superpower for debugging complex distributed systems issues.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benefits-for-developer-education&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#benefits-for-developer-education&quot; aria-label=&quot;Anchor link for: benefits-for-developer-education&quot;&gt;üîó&lt;&#x2F;a&gt;Benefits for Developer Education&lt;&#x2F;h3&gt;
&lt;p&gt;Deterministic simulation testing doesn&#x27;t just help find bugs‚Äîit helps developers grow. By working with simulated but realistic failure scenarios, developers build intuition for how distributed systems behave under stress without having to experience painful on-call incidents.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, deterministic simulation testing has instilled a &lt;strong&gt;deep trust in our software&lt;&#x2F;strong&gt;, as it is tested under conditions even more challenging than those encountered in production. This confidence has been crucial for us.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The gap between development and production is real and significant. Traditional testing approaches can&#x27;t scale to cover all the possible combinations of user behavior and world events that our systems will encounter.&lt;&#x2F;p&gt;
&lt;p&gt;Deterministic simulation testing offers a powerful alternative that allows us to test complex distributed systems more thoroughly, find bugs before they impact users, and train developers to build more resilient systems.&lt;&#x2F;p&gt;
&lt;p&gt;By embracing simulation-driven development, we can build software that better handles the chaotic reality of production environments‚Äîand maybe reduce those 3 AM pages that give engineers like me unfortunate nicknames.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Want to learn more? Check out my &lt;a href=&quot;&#x2F;posts&#x2F;learn-about-dst&#x2F;&quot;&gt;curated list of resources on deterministic simulation testing&lt;&#x2F;a&gt;, which includes articles, talks, and implementation examples.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with simulation testing. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">testing</category>
          <category domain="tag">reliability</category>
          <category domain="tag">simulation</category>
          <category domain="tag">deterministic</category>
      </item>
      <item>
          <title>So, You Want to Learn More About Deterministic Simulation Testing?</title>
          <pubDate>Fri, 11 Apr 2025 00:00:00 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/learn-about-dst/</link>
          <guid>https://pierrezemb.fr/posts/learn-about-dst/</guid>
          <description xml:base="https://pierrezemb.fr/posts/learn-about-dst/">&lt;p&gt;I recently attended &lt;a href=&quot;https:&#x2F;&#x2F;bugbash.antithesis.com&#x2F;&quot;&gt;BugBash 2025&lt;&#x2F;a&gt;, a software reliability conference organized by &lt;a href=&quot;https:&#x2F;&#x2F;antithesis.com&quot;&gt;Antithesis&lt;&#x2F;a&gt; in Washington, D.C. during April 3-4, 2025. The conference brought together industry experts like Kyle Kingsbury, Ankush Desai, and Mitchell Hashimoto to discuss various aspects of building reliable software, with deterministic simulation testing being a significant focus throughout many of the sessions and discussions.&lt;&#x2F;p&gt;
&lt;p&gt;One of the highlights for me was having the chance to talk with the Antithesis team and meet some of the original creators of FoundationDB.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-deterministic-simulation-testing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-deterministic-simulation-testing&quot; aria-label=&quot;Anchor link for: what-is-deterministic-simulation-testing&quot;&gt;üîó&lt;&#x2F;a&gt;What is Deterministic Simulation Testing?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; For a deeper dive into this concept and its practical applications, check out my article on &lt;a href=&quot;&#x2F;posts&#x2F;simulation-driven-development&#x2F;&quot;&gt;What if we embraced simulation-driven development?&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The best description of DST I&#x27;ve found is described in &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;FoundationDB&#x27;s testing page&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The major goal of Simulation is to make sure that we find and diagnose issues in simulation rather than the real world. Simulation runs tens of thousands of simulations every night, each one simulating large numbers of component failures. Based on the volume of tests that we run and the increased intensity of the failures in our scenarios, we estimate that we have run the equivalent of roughly one trillion CPU-hours of simulation on FoundationDB.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simulation is able to conduct a deterministic simulation of an entire FoundationDB cluster within a single-threaded process. Determinism is crucial in that it allows perfect repeatability of a simulated run, facilitating controlled experiments to home in on issues. The simulation steps through time, synchronized across the system, representing a larger amount of real time in a smaller amount of simulated time. In practice, our simulations usually have about a 10-1 factor of real-to-simulated time, which is advantageous for the efficiency of testing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We use Simulation to simulate failures modes at the network, machine, and datacenter levels, including connection failures, degradation of machine performance, machine shutdowns or reboots, machines coming back from the dead, etc. We stress-test all of these failure modes, failing machines at very short intervals, inducing unusually severe loads, and delaying communications channels.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simulation&#x27;s success has surpassed our expectation and has been vital to our engineering team. It seems unlikely that we would have been able to build FoundationDB without this technology.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After years of operating many Apache-oriented distributed systems, I can confidently say that FoundationDB stands apart in its remarkable robustness‚ÄîI&#x27;ve rarely been paged for it, which speaks volumes about its stability in production. At &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;&quot;&gt;Clever Cloud&lt;&#x2F;a&gt;, we&#x27;ve even leveraged FoundationDB&#x27;s simulation framework during our application development by &lt;a href=&quot;&#x2F;posts&#x2F;providing-safety-fdb-rs&#x2F;#user-safety&quot;&gt;embedding Rust code inside FDB&#x27;s simulation environment&lt;&#x2F;a&gt;, allowing us to inherit the same reliability guarantees for our custom applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tl-dr&quot; aria-label=&quot;Anchor link for: tl-dr&quot;&gt;üîó&lt;&#x2F;a&gt;TL;DR&lt;&#x2F;h2&gt;
&lt;p&gt;If you only have limited time, here are the four must-watch videos that will give you the best introduction to deterministic simulation testing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4fFDFbi3toc&quot;&gt;Will Wilson: Testing Distributed Systems with Deterministic Simulation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fFSPwJFXVlw&quot;&gt;Will Wilson: Autonomous Testing and the Future of Software Development&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=m3HwXlQPCEU&quot;&gt;Will Wilson: Testing a Single-Node, Single Threaded, Distributed System Written in 1985&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=eZ1mmqlq-mY&quot;&gt;Will Wilson: Let&#x27;s all write good software&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(Yes, it seems Will Wilson has a monopoly on great introductory talks on the topic. Having had the chance to meet him, I can personally vouch that he is not a deterministic algorithm for generating insightful presentations, though the sheer quality of his talks might make you wonder.)&lt;&#x2F;p&gt;
&lt;p&gt;A curated feed of recent articles and blog posts about DST can be found at &lt;a href=&quot;https:&#x2F;&#x2F;deterministic-simulation-testing.github.io&#x2F;planet-dst&#x2F;&quot;&gt;Planet DST&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;essential-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#essential-reading&quot; aria-label=&quot;Anchor link for: essential-reading&quot;&gt;üîó&lt;&#x2F;a&gt;Essential Reading&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;foundations-concepts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#foundations-concepts&quot; aria-label=&quot;Anchor link for: foundations-concepts&quot;&gt;üîó&lt;&#x2F;a&gt;Foundations &amp;amp; Concepts&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;blog&#x2F;demonic-nondeterminism&#x2F;&quot;&gt;CockroachLabs: Demonic Nondeterminism&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;transactional.blog&#x2F;simulation&#x2F;buggify&quot;&gt;Alex Miller: BUGGIFY&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.tigerbeetle.com&#x2F;concepts&#x2F;safety&#x2F;#software-reliability&quot;&gt;TigerBeetle: Building Reliable Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;journal.resonatehq.io&#x2F;p&#x2F;deterministic-simulation-testing&quot;&gt;Dominik Tornow: Deterministic Simulation Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;poorlydefinedbehaviour.github.io&#x2F;posts&#x2F;deterministic_simulation_testing&#x2F;&quot;&gt;Poorly Defined Behaviour: Deterministic Simulation Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;notes.eatonphil.com&#x2F;2024-08-20-deterministic-simulation-testing.html&quot;&gt;Phil Eaton: What&#x27;s the big deal about Deterministic Simulation Testing?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;queue.acm.org&#x2F;detail.cfm?ref=rss&amp;amp;id=3712057&quot;&gt;AWS: Systems Correctness Practices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language-specific-implementations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#language-specific-implementations&quot; aria-label=&quot;Anchor link for: language-specific-implementations&quot;&gt;üîó&lt;&#x2F;a&gt;Language-Specific Implementations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;turmoil&#x2F;latest&#x2F;turmoil&#x2F;&quot;&gt;Turmoil: Network Simulation Framework for Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;madsim&#x2F;latest&#x2F;madsim&#x2F;&quot;&gt;MadSim: Deterministic Simulation Testing Library for Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sled.rs&#x2F;simulation.html&quot;&gt;Sled: Simulation Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;s2.dev&#x2F;blog&#x2F;dst&quot;&gt;S2: Deterministic simulation testing for async Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.polarsignals.com&#x2F;blog&#x2F;posts&#x2F;2024&#x2F;05&#x2F;28&#x2F;mostly-dst-in-go&quot;&gt;Polar Signals: Mostly-DST in Go&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;real-world-case-studies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-world-case-studies&quot; aria-label=&quot;Anchor link for: real-world-case-studies&quot;&gt;üîó&lt;&#x2F;a&gt;Real-World Case Studies&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tigerbeetle.com&#x2F;blog&#x2F;2022-11-23-a-friendly-abstraction-over-iouring-and-kqueue&#x2F;&quot;&gt;TigerBeetle: A Friendly Abstraction Over io_uring and kqueue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dropbox.tech&#x2F;infrastructure&#x2F;-testing-our-new-sync-engine&quot;&gt;Dropbox: Testing Our New Sync Engine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tigerbeetle.com&#x2F;blog&#x2F;2023-07-11-we-put-a-distributed-database-in-the-browser&#x2F;&quot;&gt;TigerBeetle: We Put a Distributed Database in the Browser&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;antithesis.com&#x2F;solutions&#x2F;case_studies&#x2F;&quot;&gt;Antithesis: Case Studies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;risingwave.com&#x2F;blog&#x2F;deterministic-simulation-a-new-era-of-distributed-system-testing&#x2F;&quot;&gt;RisingWave: A New Era of Distributed System Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;risingwave.com&#x2F;blog&#x2F;applying-deterministic-simulation-the-risingwave-story-part-2-of-2&#x2F;&quot;&gt;RisingWave: The RisingWave Story&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.warpstream.com&#x2F;blog&#x2F;deterministic-simulation-testing-for-our-entire-saas&quot;&gt;WarpStream: DST for Our Entire SaaS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;antithesis.com&#x2F;blog&#x2F;sdtalk&#x2F;&quot;&gt;Antithesis: How Antithesis finds bugs (with help from the Super Mario Bros.)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;talks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#talks&quot; aria-label=&quot;Anchor link for: talks&quot;&gt;üîó&lt;&#x2F;a&gt;Talks&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=IaB8jvjW0kk&quot;&gt;Ben Collins: FoundationDB Testing: Past &amp;amp; Present&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rvHd4Y76-fs&quot;&gt;Marc Brooker: AWS re:Invent 2024 - Try again: The tools and techniques behind resilient systems (ARC403)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=6y8Ga3oogLY&quot;&gt;TigerBeetle: Episode 064: Two In One, New Request Protocol and VOPR Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fosdem.org&#x2F;2025&#x2F;schedule&#x2F;event&#x2F;fosdem-2025-4279-squashing-the-heisenbug-with-deterministic-simulation-testing&#x2F;&quot;&gt;FOSDEM 2025: Squashing the Heisenbug with Deterministic Simulation Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=024c8OwR4JM&quot;&gt;BugBash 2025: Lawrie Green - How to succeed in software testing without really trying&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Have I missed any important resources on Deterministic Simulation Testing? This field is rapidly evolving, and I&#x27;m always looking to expand this collection. If you know of any articles, talks, or tools related to DST that should be included here, please reach out! I&#x27;d love to hear about your experiences with deterministic testing as well.&lt;&#x2F;p&gt;
&lt;p&gt;Please, feel free to react to this article, you can reach me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, or have a look on my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">testing</category>
          <category domain="tag">reliability</category>
          <category domain="tag">simulation</category>
          <category domain="tag">deterministic</category>
      </item>
      <item>
          <title>Key design tip: reverse number scanning in ordered key-value stores</title>
          <pubDate>Thu, 27 Mar 2025 05:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/reverse-number-scanning/</link>
          <guid>https://pierrezemb.fr/posts/reverse-number-scanning/</guid>
          <description xml:base="https://pierrezemb.fr/posts/reverse-number-scanning/">&lt;p&gt;Ordered key-value stores like HBase, FoundationDB or RocksDB store keys in lexicographical order. When getting the latest version or most recent events, this ordering often requires scanning through all values in reverse order. While this works, it can become a performance bottleneck, especially in distributed systems. Let&#x27;s explore a simple yet powerful optimization technique that I&#x27;ve been using recently üöÄ&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-design-in-key-value-stores&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-design-in-key-value-stores&quot; aria-label=&quot;Anchor link for: key-design-in-key-value-stores&quot;&gt;üîó&lt;&#x2F;a&gt;Key design in Key-value stores&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look at this using a tuple structure of &lt;code&gt;(key, number)&lt;&#x2F;code&gt;. This could represent a document version, a timestamp, or any numeric identifier:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 2)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-2&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In ordered key-value stores, keys are stored in &lt;code&gt;lexicographical order&lt;&#x2F;code&gt;. This works well when you want to scan from lowest to highest values, but becomes inefficient when you need the opposite order. For example, to find the highest number for a key, you need to scan through all values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 2)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 99)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could scan in reverse mode, but you would lose the order of your first prefix(the &quot;my-key-1&quot;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reverse-number-scanning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reverse-number-scanning&quot; aria-label=&quot;Anchor link for: reverse-number-scanning&quot;&gt;üîó&lt;&#x2F;a&gt;Reverse Number Scanning&lt;&#x2F;h2&gt;
&lt;p&gt;By reversing the numbers using a simple subtraction from the maximum possible value (e.g., &lt;code&gt;Long.MAX_VALUE&lt;&#x2F;code&gt; in Java), we can optimize the scanning process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; reversedNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span&gt;- number;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This transforms our data into:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775804) &#x2F;&#x2F; number 3
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775805) &#x2F;&#x2F; number 2
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775806) &#x2F;&#x2F; number 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the highest number (which appears first in the reversed order) can be found efficiently, allowing us to stop after finding the first match.&lt;&#x2F;p&gt;
&lt;p&gt;This technique is particularly useful in systems dealing with time-series data, versioned documents, or any scenario requiring efficient retrieval of the most recent or highest-valued items.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;number 1: 9223372036854775806
&lt;&#x2F;span&gt;&lt;span&gt;number 2: 9223372036854775805
&lt;&#x2F;span&gt;&lt;span&gt;number 3: 9223372036854775804
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Reversing back is straightforward
&lt;&#x2F;span&gt;&lt;span&gt;Long.MAX_VALUE - 9223372036854775806 = 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">performance</category>
          <category domain="tag">optimization</category>
          <category domain="tag">storage</category>
          <category domain="tag">distributed</category>
      </item>
      <item>
          <title>Debugging FoundationDB&#x27;s Data Distributor</title>
          <pubDate>Fri, 07 Mar 2025 00:00:00 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/fdb-data-distributor/</link>
          <guid>https://pierrezemb.fr/posts/fdb-data-distributor/</guid>
          <description xml:base="https://pierrezemb.fr/posts/fdb-data-distributor/">&lt;p&gt;FoundationDB is a powerful, distributed database designed to handle massive workloads with high consistency guarantees. At its core, the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt; plays a critical role in determining how shards are distributed across the cluster to maintain load balance and resilience.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we dive into the &lt;strong&gt;Data Distributor&#x27;s&lt;&#x2F;strong&gt; internals, along with practical lessons we learned during a outage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-data-distributor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-data-distributor&quot; aria-label=&quot;Anchor link for: what-is-the-data-distributor&quot;&gt;üîó&lt;&#x2F;a&gt;What is the Data Distributor?&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;Data Distributor (DD)&lt;&#x2F;strong&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;architecture.html&quot;&gt;a subsystem&lt;&#x2F;a&gt; responsible for efficiently placing and relocating shards (range of keys) in a FoundationDB cluster. Its key goals are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Balancing load across servers&lt;&#x2F;li&gt;
&lt;li&gt;Handling failures by redistributing data&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring optimal data placement for performance reliability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-distributor-wording&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-distributor-wording&quot; aria-label=&quot;Anchor link for: data-distributor-wording&quot;&gt;üîó&lt;&#x2F;a&gt;Data Distributor wording&lt;&#x2F;h2&gt;
&lt;p&gt;The architecture and behavior of the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt; are documented in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;design&#x2F;data-distributor-internals.md&quot;&gt;official design document&lt;&#x2F;a&gt;, and introduce the following concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Machine&lt;&#x2F;strong&gt;: A failure domain in FoundationDB, often considered equivalent to a rack.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard&lt;&#x2F;strong&gt;: A range of key-values‚Äîessentially a contiguous block of the database keyspace.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Server Team&lt;&#x2F;strong&gt;: A group of &lt;code&gt;k&lt;&#x2F;code&gt; processes (where &lt;code&gt;k&lt;&#x2F;code&gt; is the replication factor) hosting the same shard.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Machine Team&lt;&#x2F;strong&gt;: A collection of &lt;code&gt;k&lt;&#x2F;code&gt; machines, ensuring fault isolation for redundancy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The term &quot;machine&quot; in FoundationDB‚Äôs documentation &lt;strong&gt;often translates better as &quot;rack&quot;&lt;&#x2F;strong&gt; in many practical cases. Using racks makes the Machine Team&#x27;s role clearer: it ensures fault isolation by storing copies of data in different racks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debug-dd-with-status-json&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debug-dd-with-status-json&quot; aria-label=&quot;Anchor link for: debug-dd-with-status-json&quot;&gt;üîó&lt;&#x2F;a&gt;Debug DD with &lt;code&gt;status json&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Your first input point should be to have a look at the &lt;code&gt;team_trackers&lt;&#x2F;code&gt; key in the &lt;code&gt;status json&lt;&#x2F;code&gt;. The JSON should contain enough information for basic monitoring:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team_trackers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;primary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unhealthy_servers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;healthy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;healthy_rebalancing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;debug-dd-with-trace-events&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debug-dd-with-trace-events&quot; aria-label=&quot;Anchor link for: debug-dd-with-trace-events&quot;&gt;üîó&lt;&#x2F;a&gt;Debug DD with Trace events&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB provides a robust tracing system where each process generates detailed events in either XML or JSON formats. To troubleshoot the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt;, you first need to locate the process it has been elected to. From there, trace events can be analyzed to understand shard movements, priorities, and failures.&lt;&#x2F;p&gt;
&lt;p&gt;One particularly important attribute in these events is the &lt;code&gt;Priority&lt;&#x2F;code&gt; field. This field determines the precedence of shard placement or redistribution tasks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_RECOVER_MOVE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_REBALANCE_UNDERUTILIZED_TEAM, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_REBALANCE_OVERUTILIZED_TEAM, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;122 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_TEAM_UNHEALTHY, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;700&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_SPLIT_SHARD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;950 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A full list of defined priorities can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;fdbclient&#x2F;ServerKnobs.cpp#L155-L173&quot;&gt;Knobs file&lt;&#x2F;a&gt;, providing useful insights into how tasks are scheduled.&lt;&#x2F;p&gt;
&lt;p&gt;EDIT: Yes, &lt;code&gt;SPLIT_SHARD&lt;&#x2F;code&gt; has an higher priority! See &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;alexmillerdb.bsky.social&#x2F;post&#x2F;3ljsqqvfslc24&quot;&gt;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;alexmillerdb.bsky.social&#x2F;post&#x2F;3ljsqqvfslc24&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serverteaminfo-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#serverteaminfo-event&quot; aria-label=&quot;Anchor link for: serverteaminfo-event&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;code&gt;ServerTeamInfo&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;Understanding the state of server teams is essential since the Data Distributor schedules data movements based on real-time metrics. The &lt;code&gt;fdbcli&lt;&#x2F;code&gt; command &lt;code&gt;triggerddteaminfolog&lt;&#x2F;code&gt; triggers informative logs by invoking &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;fdbserver&#x2F;DDTeamCollection.actor.cpp#L3425&quot;&gt;printSnapshotTeamsInfo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ServerTeamInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;709&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Healthy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamSize&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MemberIDs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5a69... 5fc1... 8718...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LoadBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1135157527&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MinAvailableSpaceRatio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.94108&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;serverteamprioritychange-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#serverteamprioritychange-event&quot; aria-label=&quot;Anchor link for: serverteamprioritychange-event&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;code&gt;ServerTeamPriorityChange&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;This event is logged when server team priorities change, often indicating server failures or rebalancing actions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ServerTeamPriorityChange&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;950&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e9b362decbafbd81&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;relocateshard-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#relocateshard-event&quot; aria-label=&quot;Anchor link for: relocateshard-event&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;code&gt;RelocateShard&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;This event tracks shard movement between teams to maintain balance.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RelocateShard&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PRIORITY_REBALANCE_UNDERUTILIZED_TEAM
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RelocationID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3f1290654949771e&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, the most useful field is the priority, indicating why it is relocated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;valleyfiller-and-mountainchopper-mechanisms&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#valleyfiller-and-mountainchopper-mechanisms&quot; aria-label=&quot;Anchor link for: valleyfiller-and-mountainchopper-mechanisms&quot;&gt;üîó&lt;&#x2F;a&gt;&quot;ValleyFiller&quot; and &quot;MountainChopper&quot; Mechanisms&lt;&#x2F;h3&gt;
&lt;p&gt;To optimize shard placement, FoundationDB employs two balancing strategies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ValleyFiller&lt;&#x2F;strong&gt;: Fills underutilized servers (the &lt;strong&gt;valleys&lt;&#x2F;strong&gt;) with data to balance the load.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;MountainChopper&lt;&#x2F;strong&gt;: Redistributes shards from overutilized servers (the &lt;strong&gt;mountains&lt;&#x2F;strong&gt;) to spread the load evenly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both logs will have a &lt;code&gt;SourceTeam&lt;&#x2F;code&gt; and &lt;code&gt;DestTeam&lt;&#x2F;code&gt; to use in other traces:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BgDDValleyFiller&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QueuedRelocations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SourceTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 95819f0d3d7ea40d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DestTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 0817e6fe3135e6f6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ShardBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;398281250&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BgDDMountainChopper&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QueuedRelocations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SourceTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 95819f0d3d7ea40d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DestTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID e17dcecd86547e09&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ShardBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;308000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">foundationdb</category>
          <category domain="tag">debugging</category>
          <category domain="tag">distributed</category>
          <category domain="tag">database</category>
          <category domain="tag">storage</category>
      </item>
      <item>
          <title>Ensuring Safety in FoundationDB&#x27;s Rust Crate</title>
          <pubDate>Tue, 11 Feb 2025 00:00:00 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/providing-safety-fdb-rs/</link>
          <guid>https://pierrezemb.fr/posts/providing-safety-fdb-rs/</guid>
          <description xml:base="https://pierrezemb.fr/posts/providing-safety-fdb-rs/">&lt;p&gt;As we approach 5 million downloads of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;foundationdb&quot;&gt;FoundationDB Rust crate&lt;&#x2F;a&gt; (4,998,185 at the time of writing), I wanted to share some insights into how I ensure the safety of the crate. Being the primary maintainer of a database driver comes with responsibility, but I sleep well at night knowing that we have robust safety measures in place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crate-overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#crate-overview&quot; aria-label=&quot;Anchor link for: crate-overview&quot;&gt;üîó&lt;&#x2F;a&gt;Crate Overview&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust crate, &lt;code&gt;foundationdb-rs&lt;&#x2F;code&gt;, provides bindings to interact with FoundationDB&#x27;s C API (&lt;code&gt;libfdb&lt;&#x2F;code&gt;). It has around 13k lines of code and is used by companies (like Clever Cloud) and projects (such as Apache OpenDAL, SurrealDB). Having experienced numerous outages and issues with drivers and distributed systems, I understand the importance of safety. To ensure the safety of the crate, we need to focus on three layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The underlying client, &lt;code&gt;libfdb&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;The crate itself,&lt;&#x2F;li&gt;
&lt;li&gt;The code that uses the crate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s dig into each of these areas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;libfdb-safety&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#libfdb-safety&quot; aria-label=&quot;Anchor link for: libfdb-safety&quot;&gt;üîó&lt;&#x2F;a&gt;libfdb Safety&lt;&#x2F;h2&gt;
&lt;p&gt;This is the simplest part. &lt;code&gt;libfdb&lt;&#x2F;code&gt;&#x27;s safety is guaranteed by FoundationDB&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;simulation framework&lt;&#x2F;a&gt;. Therefore, we can consider it safe.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;classic-testing-suite&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#classic-testing-suite&quot; aria-label=&quot;Anchor link for: classic-testing-suite&quot;&gt;üîó&lt;&#x2F;a&gt;Classic testing suite&lt;&#x2F;h3&gt;
&lt;p&gt;Since we are using a C library, we need to use FFI (Foreign Function Interface) and unsafe code blocks. With around 130 unsafe blocks, we must be extra careful when calling C code, ensuring all preconditions are met. Naturally, we conduct extensive testing, but most importantly, we run tests in high-variety environments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On multiple operating systems (Ubuntu, macOS)&lt;&#x2F;li&gt;
&lt;li&gt;On multiple FoundationDB versions (from FDB 6.1 to 7.3)&lt;&#x2F;li&gt;
&lt;li&gt;On multiple Rust compiler versions (Minimum Supported Rust Version or MSRV, stable, beta, nightly)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most useful tests are run on the nightly Rust compiler, as we can catch &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;issues&#x2F;90&quot;&gt;new behaviors in the Rust compiler early&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While these testing practices provide significant coverage, the most powerful tool we utilize comes from FoundationDB‚Äôs maintainers: the &lt;code&gt;BindingTester&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bindingtester&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-bindingtester&quot; aria-label=&quot;Anchor link for: the-bindingtester&quot;&gt;üîó&lt;&#x2F;a&gt;The BindingTester&lt;&#x2F;h3&gt;
&lt;p&gt;FoundationDB is renowned for its &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;simulation and testing&lt;&#x2F;a&gt; frameworks. Bindings are no exception. They developed the BindingTester, a cross-language validation suite ensuring that all bindings behave correctly and consistently across different languages.&lt;&#x2F;p&gt;
&lt;p&gt;The BindingTester uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;main&#x2F;bindings&#x2F;bindingtester&#x2F;spec&#x2F;bindingApiTester.md&quot;&gt;a stack-based machine&lt;&#x2F;a&gt; to queue operations for FoundationDB. A program then reads the stack and performs the operations. These operations are run twice: once in the target environment and once against a reference implementation. Any differences are reported by the BindingTester.&lt;&#x2F;p&gt;
&lt;p&gt;It looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bindings&#x2F;bindingtester&#x2F;bindingtester.py --num-ops&lt;&#x2F;span&gt;&lt;span&gt; 1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --api-version&lt;&#x2F;span&gt;&lt;span&gt; 730&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --test-name&lt;&#x2F;span&gt;&lt;span&gt; api&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --compare&lt;&#x2F;span&gt;&lt;span&gt; python rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; test at API version 730
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; api test at seed 3208032894 with 1000 op(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; 1 concurrent tester(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Inserting Rust tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Inserting&lt;&#x2F;span&gt;&lt;span&gt; test into database...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running&lt;&#x2F;span&gt;&lt;span&gt; tester &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;runner&#x2F;work&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;target&#x2F;debug&#x2F;bindingtester test_spec 730&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;workspace&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;stack&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Inserting Python tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Inserting&lt;&#x2F;span&gt;&lt;span&gt; test into database...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running&lt;&#x2F;span&gt;&lt;span&gt; tester &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;python &#x2F;home&#x2F;runner&#x2F;work&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;target&#x2F;foundationdb_build&#x2F;foundationdb&#x2F;bindings&#x2F;bindingtester&#x2F;..&#x2F;python&#x2F;tests&#x2F;tester.py test_spec 730&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;workspace&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;stack&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Comparing the results
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Comparing&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;workspace&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Comparing&lt;&#x2F;span&gt;&lt;span&gt; results from &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;tester_output&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;stack&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt; with seed 3208032894 and concurrency 1 had 0 incorrect result(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; 0 error(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt; API version 730
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Completed&lt;&#x2F;span&gt;&lt;span&gt; api test with random seed 3208032894 and 1000 operations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The great advantage of this method is that the tests are seeded, meaning the operations are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;randomly selected to cover all binding usages,&lt;&#x2F;li&gt;
&lt;li&gt;deterministic, so a failing seed can be replayed locally.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Combined with code coverage, this gives us a good idea of what has been tested (though code coverage may vary).&lt;&#x2F;p&gt;
&lt;p&gt;We run the &lt;code&gt;BindingTester&lt;&#x2F;code&gt; &lt;strong&gt;every hour&lt;&#x2F;strong&gt; on our GitHub actions, amounting to &lt;strong&gt;around 219 days of continuous testing each month&lt;&#x2F;strong&gt; (316,335 minutes of correctness last month according to Github).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;user-safety&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#user-safety&quot; aria-label=&quot;Anchor link for: user-safety&quot;&gt;üîó&lt;&#x2F;a&gt;User Safety&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to &lt;code&gt;libfdb&lt;&#x2F;code&gt; and the &lt;code&gt;BindingTester&lt;&#x2F;code&gt;, we can ensure that the library is quite safe. But what about the user&#x27;s code? How can we help users ensure their code can handle all of FoundationDB&#x27;s caveats, such as &lt;a href=&quot;&#x2F;posts&#x2F;automatic-txn-fdb-730&#x2F;#transactions-with-unknown-results&quot;&gt;commit_unknown_result&lt;&#x2F;a&gt;? We added a great feature: the ability to include Rust code &lt;strong&gt;within FDB&#x27;s simulation framework&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can implement an Rust workload with the following Trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;RustWorkload {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_metrics&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;Metric&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_check_timeout&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which can be runned inside the simulation while injecting some faults:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fdbserver -r&lt;&#x2F;span&gt;&lt;span&gt; simulation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;root&#x2F;atomic.toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --trace-format&lt;&#x2F;span&gt;&lt;span&gt; json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Choosing a random seed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt; seed is 394378360...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Then, everything is derived from the seed, including:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# * cluster topology,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# * cluster configuration,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# * timing to inject faults,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# * operations to run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# * ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Datacenter&lt;&#x2F;span&gt;&lt;span&gt; 0: 3&#x2F;12 machines, 1&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Datacenter&lt;&#x2F;span&gt;&lt;span&gt; 1: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Datacenter&lt;&#x2F;span&gt;&lt;span&gt; 2: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Datacenter&lt;&#x2F;span&gt;&lt;span&gt; 3: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Starting the Atomic workload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run&lt;&#x2F;span&gt;&lt;span&gt; test:AtomicWorkload start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AtomicWorkload&lt;&#x2F;span&gt;&lt;span&gt; complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;checking&lt;&#x2F;span&gt;&lt;span&gt; test (AtomicWorkload)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt; test clients passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; test clients failed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run&lt;&#x2F;span&gt;&lt;span&gt; test:AtomicWorkload Done.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; tests passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; tests failed.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unseed:&lt;&#x2F;span&gt;&lt;span&gt; 66324
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Elapsed:&lt;&#x2F;span&gt;&lt;span&gt; 405.055622 simsec, 30.342000 real seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has been a &lt;strong&gt;major keypoint&lt;&#x2F;strong&gt; for us to develop and operate &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;materia&#x2F;&quot;&gt;Materia, Clever Cloud&#x27;s serverless database offer&lt;&#x2F;a&gt;, as we can enjoy the same Simulation framework used by FDB&#x27;s core engineers for layer engineering ü§Ø&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closing-words&quot; aria-label=&quot;Anchor link for: closing-words&quot;&gt;üîó&lt;&#x2F;a&gt;Closing words&lt;&#x2F;h2&gt;
&lt;p&gt;As with any open-source project, there is always more to accomplish, but I am quite satisfied with the current level of safety provided by the crate. I would like to express my gratitude to the FoundationDB community for developing the BindingTester, and former contributors to the crate.&lt;&#x2F;p&gt;
&lt;p&gt;I also would like to encourage everyone to explore the simulation framework. Integrating Rust code within this framework has allowed us to harness the full potential of simulation without the need to build our own, and it has forever changed my perspective on testing and software engineering.&lt;&#x2F;p&gt;
&lt;p&gt;There is a strong likelihood that future blog posts will focus on simulation, so feel free to explore the &lt;a href=&quot;&#x2F;tags&#x2F;simulation&#x2F;&quot;&gt;simulation tags&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">foundationdb</category>
          <category domain="tag">rust</category>
          <category domain="tag">testing</category>
          <category domain="tag">database</category>
          <category domain="tag">distributed</category>
      </item>
      <item>
          <title>Back in engineering!</title>
          <pubDate>Wed, 15 Jan 2025 00:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/back-engineering/</link>
          <guid>https://pierrezemb.fr/posts/back-engineering/</guid>
          <description xml:base="https://pierrezemb.fr/posts/back-engineering/">&lt;p&gt;Time flies‚Äîit‚Äôs already 2025! Looking back, 2024 was an incredibly fast-paced year for me professionally as an Engineering Manager. This year, I‚Äôve decided to take a new direction and return to a more engineering-focused role.&lt;&#x2F;p&gt;
&lt;p&gt;I moved in a management position early 2023. It was a time where my company was growing fast (from 20-ish to 60-ish), and we needed coordination to ship things out in parallel, but also to &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;blog&#x2F;company&#x2F;2023&#x2F;12&#x2F;21&#x2F;our-journey-to-a-better-clever-cloud&#x2F;&quot;&gt;migrate customers (and ourselves!) to new datacenters&lt;&#x2F;a&gt;. With my on-call experience, I helped our CTO, Steven, bootstrap two data-oriented teams and later led the Materia team, shaping its technology.&lt;&#x2F;p&gt;
&lt;p&gt;During this time, we successfully launched &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;blog&#x2F;features&#x2F;2024&#x2F;06&#x2F;11&#x2F;materia-kv-our-easy-to-use-serverless-key-value-database-is-available-to-all&#x2F;&quot;&gt;Materia KV in its Alpha version&lt;&#x2F;a&gt; and built strong internal trust in FoundationDB. Our largest cluster effortlessly handles hundreds of thousands of writes per second, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;tree&#x2F;main&#x2F;foundationdb-simulation&quot;&gt;the ability to simulate Rust code within FDB‚Äôs simulation framework&lt;&#x2F;a&gt; has significantly boosted our developers&#x27; confidence.&lt;&#x2F;p&gt;
&lt;p&gt;Management is a rewarding challenge, like unlocking a new skill tree to walk through. Resources like &lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;the-managers-path&#x2F;9781491973882&#x2F;&quot;&gt;The Manager&#x27;s Path&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.engmanagement.dev&quot;&gt;Engineering Management for the Rest of Us&lt;&#x2F;a&gt; can give you a head-start and should be read by anyone. Blogs like &lt;a href=&quot;https:&#x2F;&#x2F;charity.wtf&#x2F;tag&#x2F;management&#x2F;page&#x2F;2&#x2F;&quot;&gt;Charity Majors&lt;&#x2F;a&gt; are also useful to read, especially &lt;a href=&quot;https:&#x2F;&#x2F;charity.wtf&#x2F;2017&#x2F;05&#x2F;11&#x2F;the-engineer-manager-pendulum&#x2F;&quot;&gt;The Engineer&#x2F;Manager Pendulum&lt;&#x2F;a&gt; and its &lt;a href=&quot;https:&#x2F;&#x2F;charity.wtf&#x2F;2019&#x2F;01&#x2F;04&#x2F;engineering-management-the-pendulum-or-the-ladder&#x2F;&quot;&gt;follow-up&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After nearly two years, I feel it&#x27;s the right time to return to core engineering. I just miss it.  From the start, my manager and I had an understanding that I could transition back whenever I wanted to‚Äîand that time is now. I&#x27;ve found an excellent manager to lead the team, giving me the space to focus on the technical side of Materia. I also should have more time to work around open-source, and I&#x27;m looking forward to it.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">personal</category>
      </item>
      <item>
          <title>Redwood‚Äôs memory tuning in FoundationDB</title>
          <pubDate>Mon, 22 Apr 2024 00:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/redwood-memory-tuning/</link>
          <guid>https://pierrezemb.fr/posts/redwood-memory-tuning/</guid>
          <description xml:base="https://pierrezemb.fr/posts/redwood-memory-tuning/">&lt;p&gt;While FoundationDB allows you to obtain sub-milliseconds transactions‚Äôs latency without any knob-tuning, we had to bump a bit memory usage for Redwood under certain usage and workload. The following configuration has been tested on clusters from 7.1 to 7.3.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;btree-page-cache&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#btree-page-cache&quot; aria-label=&quot;Anchor link for: btree-page-cache&quot;&gt;üîó&lt;&#x2F;a&gt;BTree page cache&lt;&#x2F;h2&gt;
&lt;p&gt;We discovered the issue when we saw a performance decrease on our cluster storing time-series data. Our cluster was reporting some high disk-business, causing outages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;10.0.3.23:4501 ( 65% cpu; 61% machine; 0.010 Gbps; 93% disk IO; 7.5 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;span&gt;10.0.3.24:4501 ( 61% cpu; 61% machine; 0.010 Gbps; 87% disk IO; 9.7 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;span&gt;10.0.3.25:4501 ( 69% cpu; 61% machine; 0.010 Gbps; 93% disk IO; 5.4 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was our first ¬´we need to dig into this¬ª moment with FDB. We couldn‚Äôt find the root-cause and we asked the community. Turns out we had a classic page-cache issue which was spotted by &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;markus.pilman&#x2F;summary&quot;&gt;Markus Pilman&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;wmd&#x2F;summary&quot;&gt;William Dowling&lt;&#x2F;a&gt;. While the trace files are pretty verbose, they are containing a lot of information like this one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;PagerCacheHit&amp;quot;: &amp;quot;39852&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;PagerCacheMiss&amp;quot;: &amp;quot;25903&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yep, that‚Äôs a 40% cache-miss ratio over 5s üò± This is why the disk was so busy, spending his time moving pages back and forth. We need to bump the memory, but how much? The general recommandation that worked for us is to target around 1-2% of the &lt;code&gt;kvstore_used_bytes&lt;&#x2F;code&gt; metrics. As we have around 1TiB of data per StorageServer, we can add the following config key:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cache_memory = 10GiB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which fixed our cache-miss issue üéâ&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;PagerCacheHit&amp;quot;: &amp;quot;51968&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;PagerCacheMiss&amp;quot;: &amp;quot;432&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¬†&lt;&#x2F;p&gt;
&lt;h2 id=&quot;byte-sample-memory-usage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#byte-sample-memory-usage&quot; aria-label=&quot;Anchor link for: byte-sample-memory-usage&quot;&gt;üîó&lt;&#x2F;a&gt;Byte Sample memory usage&lt;&#x2F;h2&gt;
&lt;p&gt;But our problems are still unresolved, as we are still seeing some OOM üò≠ Because this cluster is storing time-series data, each StorageServers is holding around 1TiB of data. As we were holding more and more data, we saw more and more OOM errors on our &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt; logs. Something was growing linearly with our usage and needed tuning. This time, we had help from &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;SteavedHams&#x2F;summary&quot;&gt;Steve Atherton&lt;&#x2F;a&gt; which pointed us towards the direction of the &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;foundationdb-7-1-24-the-memory-usage-after-clean-startup-of-fdbserver-process-is-too-high&#x2F;3863&#x2F;8?u=pierrez&quot;&gt;Byte Sample&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a data structure that storage servers have called the Byte Sample which stores a deterministic random sample of keys. This data is persisted on disk in the storage engine and is loaded immediately upon storage server startup. Unfortunately, its size is not tracked or reported, but grows linearly with KV size and I suspect yours is somewhere around 4GB-6GB based on the memory usage I‚Äôve seen for smaller storage KV sizes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, we need to add around 4GB more in the memory, but there is no config for that parameter. It needs to be embedded in the global &lt;code&gt;memory&lt;&#x2F;code&gt; parameter. Let‚Äôs compute the right value!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-global-memory-formula&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-global-memory-formula&quot; aria-label=&quot;Anchor link for: the-global-memory-formula&quot;&gt;üîó&lt;&#x2F;a&gt;The global memory formula&lt;&#x2F;h2&gt;
&lt;p&gt;By testing things on our clusters, we ended up with this formula:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Default is 2
&lt;&#x2F;span&gt;&lt;span&gt;cache_memory = (1-2% of kvstore_used_bytes)GiB
&lt;&#x2F;span&gt;&lt;span&gt;# Default is 8
&lt;&#x2F;span&gt;&lt;span&gt;memory = (8 + cache_memory + 4-6GB per TB of kvstore_used_bytes)GiB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which fixed all our memory issues with FoundationDB üéâ And to be fair, this is the only things we needed to tune on our clusters, which is quite impressive üëÄ&lt;&#x2F;p&gt;
&lt;h2 id=&quot;special-thanks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#special-thanks&quot; aria-label=&quot;Anchor link for: special-thanks&quot;&gt;üîó&lt;&#x2F;a&gt;Special thanks&lt;&#x2F;h2&gt;
&lt;p&gt;I would like to thank Markus, William and Steve from the FoundationDB community for their help ü§ù&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">foundationdb</category>
          <category domain="tag">performance</category>
          <category domain="tag">storage</category>
          <category domain="tag">database</category>
          <category domain="tag">tuning</category>
      </item>
      <item>
          <title>True idempotent transactions with FoundationDB 7.3</title>
          <pubDate>Tue, 12 Mar 2024 00:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</link>
          <guid>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</guid>
          <description xml:base="https://pierrezemb.fr/posts/automatic-txn-fdb-730/">&lt;p&gt;I have been working around &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.org&quot;&gt;FoundationDB&lt;&#x2F;a&gt; for several years now, and the new upcoming version is fixing one of the most evil and painful caveats you can deal with when writing layers: &lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transactions-with-unknown-results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transactions-with-unknown-results&quot; aria-label=&quot;Anchor link for: transactions-with-unknown-results&quot;&gt;üîó&lt;&#x2F;a&gt;Transactions with unknown results&lt;&#x2F;h2&gt;
&lt;p&gt;When you start writing code with FDB, you may be under the assertions that given the database‚Äôs robustness, you will not experience some strange behavior under certain failure scenarios. Turns out, there is one scenario that is possible to reach, and quickly explained in the official &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;developer-guide.html#transactions-with-unknown-results&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As with other client&#x2F;server databases, in some failure scenarios a client may be unable to determine whether a transaction succeeded. In these cases, commit() will raise a &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;api-error-codes.html#developer-guide-error-codes&quot;&gt;&lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; exception. The on_error() function treats this exception as retriable, so retry loops that don‚Äôt check for &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;api-error-codes.html#developer-guide-error-codes&quot;&gt;&lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; could execute the transaction twice. In these cases, you must consider the idempotency of the transaction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While having idempotent retry loops is possible, sometimes it is not possible, for example when using atomic operations to keep track of statistics.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this problem worth fixing? Seems a really edgy case ü§î&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It truly depends whether it is acceptable for your transaction to be committed twice. For most of the case, it is not, but sometimes developers are not aware of this behavior, leading to errors. This is one of the reasons why we worked and open-sourced a way to embed rust-code within FoundationDB‚Äôs simulation framework. Using the simulation crate, your layer can be tested like FDB, and I can assure you: you &lt;strong&gt;will see&lt;&#x2F;strong&gt; those transactions in simulation üôà.&lt;&#x2F;p&gt;
&lt;p&gt;This behavior has given headache to my colleagues, as we tried to bypass correctness and validation code in simulation when transactions state are unknown, and who could blame us? Validate the correctness of your code is hard when certains transactions (for example, one that could clean everything) are ‚Äúmaybe committed‚Äù. Fortunately, the community has released a workaround for this: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;documentation&#x2F;sphinx&#x2F;source&#x2F;automatic-idempotency.rst&quot;&gt;&lt;code&gt;automatic idempotency&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automatic-idempotency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#automatic-idempotency&quot; aria-label=&quot;Anchor link for: automatic-idempotency&quot;&gt;üîó&lt;&#x2F;a&gt;Automatic idempotency&lt;&#x2F;h2&gt;
&lt;p&gt;The documentation is fairly explicit:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the automatic_idempotency transaction option to prevent commits from failing with &lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt; at a small performance cost.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The option appeared in FoundationDB 7.3, and could solve our issue. I decided to give it a try and modify the foundationdb-simulation crate example. The example is trying to use a atomic increment under simulation. Before 7.1, during validation, we had to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;blob&#x2F;98136cbea1c9b8d40ea9a599438ce0fa8d0297c0&#x2F;foundationdb-simulation&#x2F;examples&#x2F;atomic&#x2F;workload.rs#L99C1-L99C94&quot;&gt;some code&lt;&#x2F;a&gt; that looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We don&amp;#39;t know how much maybe_committed transactions has succeeded,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so we are checking the possible range
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.success_count &amp;lt;= count
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; count &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.expected_count + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.maybe_committed_count {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I was adding 7.3 support in the crate, I decided to update the example and try the new option:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Enable idempotent txn
&lt;&#x2F;span&gt;&lt;span&gt; trx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_option&lt;&#x2F;span&gt;&lt;span&gt;(TransactionOption::AutomaticIdempotency)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the behavior is correct, I can simplify my consistency checks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.success_count == count {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        Severity::Info,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Atomic count match&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        details![],
&lt;&#x2F;span&gt;&lt;span&gt;     );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I‚Äôve been running hundreds of seeds on my machine and everything works great: no more maybe-committed transactions! Now that 7.3 support is merged in the rust bindings, we will be able to expands our testing thanks to our simulation farm. I&#x27;m also looking to see the performance impact of the feature, even if I&#x27;m pretty sure that it will outperform any layer-work.&lt;&#x2F;p&gt;
&lt;p&gt;This is truly a very useful feature and I hope this option will be turned on by default on the next major release. The initial PR can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;pull&#x2F;8398&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">distributed</category>
          <category domain="tag">transactions</category>
          <category domain="tag">foundationdb</category>
          <category domain="tag">storage</category>
      </item>
      <item>
          <title>The unseen treasures of Infrastructure Engineering: Academic Papers</title>
          <pubDate>Mon, 22 Jan 2024 15:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/academic-conferences/</link>
          <guid>https://pierrezemb.fr/posts/academic-conferences/</guid>
          <description xml:base="https://pierrezemb.fr/posts/academic-conferences/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;papers.png&quot; alt=&quot;Academic paper created with AI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I really like using RSS feeds. My Feedly account has more than 190 feeds, all neatly organized by categories. They help me keep up with new ideas and interesting blog posts about engineering. But there&#x27;s another source of information I&#x27;ve been using for a long time that not many people know about: &lt;strong&gt;academic papers&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can discover details about infrastructure that you might not find in regular blog posts. Academic papers, unlike typical blog content, often &lt;strong&gt;dive deeper&lt;&#x2F;strong&gt; into specific aspects of infrastructure. They provide more in-depth information, uncovering details that are not commonly discussed. So, if you&#x27;re interested in gaining a more comprehensive understanding of infrastructure-related topics, exploring academic papers can be really worthwile.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sounds a bit too academic, doesn&#x27;t it? ü§î&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I don&#x27;t think so!  It&#x27;s true that academic research can sometimes seem distant from everyday industry needs, but following both academic and industry tracks is beneficial. R&amp;amp;D from academia often lead to new ideas and technologies that eventually find their way into practical use.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, numerous academic conferences feature a &lt;strong&gt;&quot;industry track&quot;&lt;&#x2F;strong&gt; that is essential to monitor.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aren&#x27;t they too complex to read? ü§î&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you don&#x27;t get everything right away, that&#x27;s okay. Reading these smart papers might be a bit hard, but it&#x27;s a skill that gets better with practice. And who knows, maybe you&#x27;ll be inspired to write your own paper someday! üòâ&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;m intrigued! Where should I start?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here&#x27;s a short list of my go-to academic papers and conferences that you can follow for infrastructure engineering. Please note that many conferences exists on other subjects, like security and so.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-usenix-community&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-usenix-community&quot; aria-label=&quot;Anchor link for: the-usenix-community&quot;&gt;üîó&lt;&#x2F;a&gt;The USENIX community&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;osdi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#osdi&quot; aria-label=&quot;Anchor link for: osdi&quot;&gt;üîó&lt;&#x2F;a&gt;OSDI&lt;&#x2F;h3&gt;
&lt;p&gt;As part of the USENIX Association, the &lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;conferences&quot;&gt;Operating Systems Design and Implementation&lt;&#x2F;a&gt; is an annual computer science conference that you shouldn&#x27;t miss. You can catch most of the sessions online along with some useful slides.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nsdi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nsdi&quot; aria-label=&quot;Anchor link for: nsdi&quot;&gt;üîó&lt;&#x2F;a&gt;NSDI&lt;&#x2F;h3&gt;
&lt;p&gt;In a similar fashion, the &lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;conferences&quot;&gt;Networked Systems Design and Implementation&lt;&#x2F;a&gt; focuses on the design principles, implementation, and practical evaluation of networked and distributed systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;usenix-atc&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#usenix-atc&quot; aria-label=&quot;Anchor link for: usenix-atc&quot;&gt;üîó&lt;&#x2F;a&gt;Usenix ATC&lt;&#x2F;h3&gt;
&lt;p&gt;The Usenix &lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;conferences&quot;&gt;Annual Technical Conference&lt;&#x2F;a&gt; is another classic to follow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-acm-family&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-acm-family&quot; aria-label=&quot;Anchor link for: the-acm-family&quot;&gt;üîó&lt;&#x2F;a&gt;The ACM family&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sigmod&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sigmod&quot; aria-label=&quot;Anchor link for: sigmod&quot;&gt;üîó&lt;&#x2F;a&gt;SIGMOD&lt;&#x2F;h3&gt;
&lt;p&gt;SIGMOD, or the &lt;a href=&quot;https:&#x2F;&#x2F;sigmod.org&#x2F;&quot;&gt;Special Interest Group on Management of Data&lt;&#x2F;a&gt;, is an essential conference under the ACM umbrella, focusing on the management and organization of data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;damon&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#damon&quot; aria-label=&quot;Anchor link for: damon&quot;&gt;üîó&lt;&#x2F;a&gt;DaMoN&lt;&#x2F;h3&gt;
&lt;p&gt;Held with ACM SIGMOD&#x2F;PODS, you can also find the &lt;a href=&quot;https:&#x2F;&#x2F;damon-db.org&#x2F;&quot;&gt;Data Management on New Hardware &lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;socc&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#socc&quot; aria-label=&quot;Anchor link for: socc&quot;&gt;üîó&lt;&#x2F;a&gt;SoCC&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;acmsocc.org&#x2F;2023&#x2F;&quot;&gt;Symposium on Cloud Computing&lt;&#x2F;a&gt; or SoCC for short belongs to ACM. It has a bit less content, as videos are not published, but you should keep it in your watchlist.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sosp&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sosp&quot; aria-label=&quot;Anchor link for: sosp&quot;&gt;üîó&lt;&#x2F;a&gt;SOSP&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;sosp.org&#x2F;&quot;&gt;Symposium on Operating Systems Principles&lt;&#x2F;a&gt; is another noteworthy conference in the ACM family. It&#x27;s a top-tier venue for discussing operating systems research. Stay tuned for updates on the latest breakthroughs and innovative ideas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;others&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#others&quot; aria-label=&quot;Anchor link for: others&quot;&gt;üîó&lt;&#x2F;a&gt;Others&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vldb&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#vldb&quot; aria-label=&quot;Anchor link for: vldb&quot;&gt;üîó&lt;&#x2F;a&gt;VLDB&lt;&#x2F;h3&gt;
&lt;p&gt;Not belonging to USENIX or ACM, the &lt;a href=&quot;https:&#x2F;&#x2F;vldb.org&#x2F;&quot;&gt;Very Large Data Bases&lt;&#x2F;a&gt; (VLDB) conference is a key event in the database community. It provides a platform for researchers and professionals to exchange ideas on managing and analyzing large-scale datasets.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cidr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cidr&quot; aria-label=&quot;Anchor link for: cidr&quot;&gt;üîó&lt;&#x2F;a&gt;CIDR&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.cidrdb.org&quot;&gt;Conference on Innovative Data Systems Research&lt;&#x2F;a&gt; (CIDR) is a systems-oriented conference, complementary in its mission to the mainstream database conferences like SIGMOD and VLDB, emphasizing the systems architecture perspective.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cool-papers-examples&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cool-papers-examples&quot; aria-label=&quot;Anchor link for: cool-papers-examples&quot;&gt;üîó&lt;&#x2F;a&gt;Cool papers examples&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a nice list, but how about some paper examples that &lt;strong&gt;you&lt;&#x2F;strong&gt; like?ü§î&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sure! Here&#x27;s a quick list with some infrastructure-related informations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;conference&#x2F;atc23&#x2F;presentation&#x2F;brooker&quot;&gt;On-demand Container Loading in AWS Lambda&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cidrdb.org&#x2F;cidr2024&#x2F;papers&#x2F;p63-helland.pdf&quot;&gt;Scalable OLTP in the Cloud: What&#x27;s the BIG DEAL?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;cloud-native-kafka-kora-vldb-award&#x2F;&quot;&gt;Kora: A Cloud-Native Event Streaming Platform For Kafka&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YdxvOPenjWI&quot;&gt;Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;blog&#x2F;fdb-paper&#x2F;&quot;&gt;FoundationDB: A Distributed, Unbundled, Transactional Key Value Store&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;conference&#x2F;osdi20&#x2F;presentation&#x2F;balakrishnan&quot;&gt;Virtual consensus with Delos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m also trying to organize them into my &lt;a href=&quot;https:&#x2F;&#x2F;www.zotero.org&#x2F;pierre.zemb&#x2F;library&quot;&gt;Zotero&#x27;s library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">research</category>
          <category domain="tag">learning</category>
          <category domain="tag">engineering</category>
          <category domain="tag">papers</category>
      </item>
      <item>
          <title>Best resources to learn about data and distributed systems</title>
          <pubDate>Mon, 17 Jan 2022 01:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/distsys-resources/</link>
          <guid>https://pierrezemb.fr/posts/distsys-resources/</guid>
          <description xml:base="https://pierrezemb.fr/posts/distsys-resources/">&lt;p&gt;Learning distributed systems is tough. You need to go through a lot of academic papers, concepts, code review, before being able to have a global pictures. Thankfully, there is a lot of resources out there that can help you to get started.  Here&#x27;s a list of resources I used to learn distributed systems. I will keep this blogpost up-to-date with books, conferences, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;distsys-resources&#x2F;books.jpeg&quot; alt=&quot;&#x2F;posts&#x2F;distsys-resources&#x2F;books.jpeg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A distributed system is one in which the failure of a computer you didn&#x27;t even know existed can render your own computer unusable.&lt;&#x2F;p&gt;
&lt;p&gt;-Lamport, 1987&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;reading-books&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reading-books&quot; aria-label=&quot;Anchor link for: reading-books&quot;&gt;üîó&lt;&#x2F;a&gt;Reading üìö&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;designing-data-intensive-applications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-data-intensive-applications&quot; aria-label=&quot;Anchor link for: designing-data-intensive-applications&quot;&gt;üîó&lt;&#x2F;a&gt;Designing Data-Intensive Applications&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start by one of my favorite book, &lt;a href=&quot;https:&#x2F;&#x2F;dataintensive.net&#x2F;&quot;&gt;Designing Data-Intensive Applications&lt;&#x2F;a&gt;, written by &lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;. This is by far the most practical book you will ever find about distributed systems. It covers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data models, query languages and encoding,&lt;&#x2F;li&gt;
&lt;li&gt;Replication, partitioning, the associated troubles, consistency, consensus,&lt;&#x2F;li&gt;
&lt;li&gt;batch and stream processing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NoSQL‚Ä¶ Big Data‚Ä¶ Scalability‚Ä¶ CAP Theorem‚Ä¶ Eventual Consistency‚Ä¶ Sharding‚Ä¶&lt;&#x2F;p&gt;
&lt;p&gt;Nice buzzwords, but how does the stuff actually work?&lt;&#x2F;p&gt;
&lt;p&gt;As software engineers, we need to build applications that are reliable, scalable and maintainable in the long run. We need to understand the range of available tools and their trade-offs. For that, we have to dig deeper than buzzwords.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you navigate the diverse and fast-changing landscape of technologies for storing and processing data. We compare a broad variety of tools and approaches, so that you can see the strengths and weaknesses of each, and decide what‚Äôs best for your application.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;database-internals&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-internals&quot; aria-label=&quot;Anchor link for: database-internals&quot;&gt;üîó&lt;&#x2F;a&gt;Database Internals&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.databass.dev&#x2F;&quot;&gt;Database Internals&lt;&#x2F;a&gt;, written by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ifesdjeen&quot;&gt;Alex Petrov&lt;&#x2F;a&gt;, is a fantastic book for anyone wondering how a database works. I recommend reading it after &lt;code&gt;Designing Data-Intensive Applications&lt;&#x2F;code&gt;, as the author dives in more details compared to Martin&#x27;s book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you ever wanted to learn more about Databases but did not know where to start? This is a book just for you.&lt;&#x2F;p&gt;
&lt;p&gt;We can treat databases and other infrastructure components as black boxes, but it doesn‚Äôt have to be that way. Sometimes we have to take a closer look at what‚Äôs going on because of performance issues. Sometimes databases misbehave, and we need to find out what exactly is going on. Some of us want to work in infrastructure and develop databases. This book‚Äôs main intention is to introduce you to the cornerstone concepts and help you understand how databases work.&lt;&#x2F;p&gt;
&lt;p&gt;The book consists of two parts: Storage Engines and Distributed Systems since that‚Äôs where most of the differences between the vast majority of databases is coming from.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems&quot; aria-label=&quot;Anchor link for: distributed-systems&quot;&gt;üîó&lt;&#x2F;a&gt;Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.distributed-systems.net&#x2F;index.php&#x2F;me&#x2F;&quot;&gt;Maarten van Steen&lt;&#x2F;a&gt; wrote a book called &lt;a href=&quot;https:&#x2F;&#x2F;www.distributed-systems.net&#x2F;&quot;&gt;Distributed Systems 3rd edition&lt;&#x2F;a&gt;. It is a nice book which you can get a digital copy of this book for free.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed systems are like 3D brain teasers: easy to disassemble; hard to put together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;understanding-distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-distributed-systems&quot; aria-label=&quot;Anchor link for: understanding-distributed-systems&quot;&gt;üîó&lt;&#x2F;a&gt;Understanding Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;If you are not a backend engineer but still curious about distributed systems, I highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;understandingdistributed.systems&#x2F;&quot;&gt;Understanding Distributed Systems&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;robertovitillo.com&#x2F;&quot;&gt;Roberto Vitillo&lt;&#x2F;a&gt; is doing an insane job to vulgarize the subject.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Want to learn how to build scalable and fault-tolerant cloud applications?&lt;&#x2F;p&gt;
&lt;p&gt;This book will teach you the core principles of distributed systems so that you don‚Äôt have to spend countless hours trying to understand how everything fits together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-internals-of-postgresql&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-internals-of-postgresql&quot; aria-label=&quot;Anchor link for: the-internals-of-postgresql&quot;&gt;üîó&lt;&#x2F;a&gt;The Internals of PostgreSQL&lt;&#x2F;h3&gt;
&lt;p&gt;PostgreSQL is getting a lot of love and traction these years, and &lt;a href=&quot;https:&#x2F;&#x2F;www.interdb.jp&#x2F;&quot;&gt;Hironobu Suzuki&lt;&#x2F;a&gt; wrote a terrific book the about the &lt;a href=&quot;https:&#x2F;&#x2F;www.interdb.jp&#x2F;pg&#x2F;index.html&quot;&gt;The Internals of PostgreSQL&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL is a well-designed open-source multi-purpose relational database system which is widely used throughout the world. It is one huge system with the integrated subsystems, each of which has a particular complex feature and works with each other cooperatively. Although understanding of the internal mechanism is crucial for both administration and integration using PostgreSQL, its hugeness and complexity prevent it. The main purposes of this document are to explain how each subsystem works, and to provide the whole picture of PostgreSQL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jepsen-blog&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jepsen-blog&quot; aria-label=&quot;Anchor link for: jepsen-blog&quot;&gt;üîó&lt;&#x2F;a&gt;Jepsen blog&lt;&#x2F;h3&gt;
&lt;p&gt;We are often using databases as a source of truth, but they are also pieces of software with bugs in it. Kyle Kingsbury is the most famous database-breaker with &lt;a href=&quot;http:&#x2F;&#x2F;jepsen.io&#x2F;&quot;&gt;Jepsen&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jepsen is an effort to improve the safety of distributed databases, queues, consensus systems, etc. We maintain an open source software library for systems testing, as well as blog posts and conference talks exploring particular systems‚Äô failure modes. In each analysis we explore whether the system lives up to its documentation‚Äôs claims, file new bugs, and suggest recommendations for operators.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You will find analysis on many databases, such as CockroachDB, etcd, Kafka, MongoDB, and so on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aphyr-distsys-class-notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#aphyr-distsys-class-notes&quot; aria-label=&quot;Anchor link for: aphyr-distsys-class-notes&quot;&gt;üîó&lt;&#x2F;a&gt;Aphyr distsys class notes&lt;&#x2F;h3&gt;
&lt;p&gt;Following Jepsen, here&#x27;s a great bonus: Kyle is also teaching distributed systems, and his notes are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aphyr&#x2F;distsys-class#an-introduction-to-distributed-systems&quot;&gt;available&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;distributed-systems-for-fun-and-profit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems-for-fun-and-profit&quot; aria-label=&quot;Anchor link for: distributed-systems-for-fun-and-profit&quot;&gt;üîó&lt;&#x2F;a&gt;Distributed systems for fun and profit&lt;&#x2F;h3&gt;
&lt;p&gt;Despite being free, &lt;a href=&quot;http:&#x2F;&#x2F;book.mixu.net&#x2F;distsys&#x2F;&quot;&gt;Distributed systems for fun and profit&lt;&#x2F;a&gt; is an awesome book. The author, &lt;a href=&quot;http:&#x2F;&#x2F;mixu.net&#x2F;&quot;&gt;Mikito Takada&lt;&#x2F;a&gt; has done a terrific work to vulgarize distributed systems.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted a text that would bring together the ideas behind many of the more recent distributed systems - systems such as Amazon&#x27;s Dynamo, Google&#x27;s BigTable and MapReduce, Apache&#x27;s Hadoop and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In this text I&#x27;ve tried to provide a more accessible introduction to distributed systems. To me, that means two things: introducing the key concepts that you will need in order to have a good time reading more serious texts, and providing a narrative that covers things in enough detail that you get a gist of what&#x27;s going on without getting stuck on details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;translucent-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#translucent-databases&quot; aria-label=&quot;Anchor link for: translucent-databases&quot;&gt;üîó&lt;&#x2F;a&gt;Translucent Databases&lt;&#x2F;h3&gt;
&lt;p&gt;I really like the pitch of the book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you have personal information in your database?&lt;&#x2F;p&gt;
&lt;p&gt;Do you keep files on your customers, your employees, or anyone else?&lt;&#x2F;p&gt;
&lt;p&gt;Do you need to worry about European laws restricting the information you keep?&lt;&#x2F;p&gt;
&lt;p&gt;Do you keep copies of credit card numbers, social security numbers, or other information that might be useful to identity thieves or insurance fraudsters?&lt;&#x2F;p&gt;
&lt;p&gt;Do you deal with medical records or personal secrets?&lt;&#x2F;p&gt;
&lt;p&gt;Most database administrators have some of these worries. Some have all of them. That&#x27;s why database security is so important.&lt;&#x2F;p&gt;
&lt;p&gt;This new book, Translucent Databases, describes a different attitude toward protecting the information.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wayner.org&#x2F;node&#x2F;46&quot;&gt;Translucent Databases&lt;&#x2F;a&gt; is a short book, focus on how to store sensitive data. You will find several dozen examples of interesting case studies on how to efficiently and privately store sensitive data. A must-have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-art-of-postgresql&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-art-of-postgresql&quot; aria-label=&quot;Anchor link for: the-art-of-postgresql&quot;&gt;üîó&lt;&#x2F;a&gt;The Art of PostgreSQL&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theartofpostgresql.com&#x2F;&quot;&gt;The Art of PostgreSQL&lt;&#x2F;a&gt; is all about showing the power of both SQL and PostgreSQL. It explains the how&#x27;s and why&#x27;s of using Postgres&#x27;s many feature, and how you, as a developers, can take advantages of it. A brilliant book that should be read by every developer.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This book is for developers, covering advanced SQL techniques for data processing. Learn how to get exactly the result set you need in your application‚Äôs code!&lt;&#x2F;p&gt;
&lt;p&gt;Learn advanced SQL with practical examples and datasets that help you get the most of the book! Every query solves a practical use case and is given in context.&lt;&#x2F;p&gt;
&lt;p&gt;The book covers (de-)normalisation with simple practical examples to dive into this seemingly complex topic, including Caching and Indexing Strategy.&lt;&#x2F;p&gt;
&lt;p&gt;Writing efficient SQL is easier than it looks, and begins with database modeling and writing clear code. The book teaches you how to write fast queries!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;readings-in-database-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#readings-in-database-systems&quot; aria-label=&quot;Anchor link for: readings-in-database-systems&quot;&gt;üîó&lt;&#x2F;a&gt;Readings in Database Systems&lt;&#x2F;h3&gt;
&lt;p&gt;Another free book, &lt;a href=&quot;http:&#x2F;&#x2F;www.redbook.io&#x2F;&quot;&gt;Readings in Database Systems&lt;&#x2F;a&gt; is a great read if you are looking for an opinionated and short review on subject like architecture, engines, analytics and so on.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readings in Database Systems (commonly known as the &quot;Red Book&quot;) has offered readers an opinionated take on both classic and cutting-edge research in the field of data management since 1988. Here, we present the Fifth Edition of the Red Book ‚Äî the first in over ten years.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;watching-tv&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#watching-tv&quot; aria-label=&quot;Anchor link for: watching-tv&quot;&gt;üîó&lt;&#x2F;a&gt;Watching üì∫&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cmu-database-group&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cmu-database-group&quot; aria-label=&quot;Anchor link for: cmu-database-group&quot;&gt;üîó&lt;&#x2F;a&gt;CMU Database Group&lt;&#x2F;h3&gt;
&lt;p&gt;The Database Group at Carnegie Mellon University have been publishing a lot of contents, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjZaHA6QcxDfJ0SIWBzQFKEG&quot;&gt;Intro to Database Systems lecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjasmrEd2_Yi1deeE360zv5O&quot;&gt;Advanced Database Systems lecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;which are the best lectures about database in my opinion.&lt;&#x2F;p&gt;
&lt;p&gt;I also recommend their Quarantine database talks playlists:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the &quot;Quarantine Database Tech Talks&quot; is a on-line seminar series at Carnegie Mellon University with leading developers and researchers of database systems. Each speaker will present the implementation details of their respective systems and examples of the technical challenges that they faced when working with real-world customers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjbeqnfuvp30VrI7VXiFuOXS&quot;&gt;Vaccination Database Tech Talks First Dose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjbDOFN4U4-Uv95-N8sgzs5D&quot;&gt;Vaccination Database Tech Talks Second Dose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distributed-systems-lecture-series&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems-lecture-series&quot; aria-label=&quot;Anchor link for: distributed-systems-lecture-series&quot;&gt;üîó&lt;&#x2F;a&gt;Distributed Systems lecture series&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;(&lt;code&gt;Designing Data Intensive applications&lt;&#x2F;code&gt;&#x27;s author) published an &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB&quot;&gt;8-lecture series on distributed systems&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This video is part of an 8-lecture series on distributed systems, given as part of the undergraduate computer science course at the University of Cambridge.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;academic-conferences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#academic-conferences&quot; aria-label=&quot;Anchor link for: academic-conferences&quot;&gt;üîó&lt;&#x2F;a&gt;Academic conferences&lt;&#x2F;h3&gt;
&lt;p&gt;Keeping track of the academic world is not easy, but thankfully, we can keep track of several academic conferences which are data-related, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cidrdb.org&quot;&gt;CIDR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sigmod.org&#x2F;&quot;&gt;SIGMOD&#x2F;PODS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vldb.org&quot;&gt;VLDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;papoc-workshop.github.io&#x2F;2022&#x2F;&quot;&gt;PaPoC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;industrial-conference&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#industrial-conference&quot; aria-label=&quot;Anchor link for: industrial-conference&quot;&gt;üîó&lt;&#x2F;a&gt;Industrial conference&lt;&#x2F;h3&gt;
&lt;p&gt;There is not much database-focused conferences, but you will be interested to see talks from:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hydraconf.com&#x2F;&quot;&gt;HydraConf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;&quot;&gt;HYTRADBOI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distsys-reading-group-sessions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distsys-reading-group-sessions&quot; aria-label=&quot;Anchor link for: distsys-reading-group-sessions&quot;&gt;üîó&lt;&#x2F;a&gt;DistSys Reading Group sessions&lt;&#x2F;h3&gt;
&lt;p&gt;If you are looking for explanations about a distributed systems paper, you may be interested in the &lt;a href=&quot;http:&#x2F;&#x2F;charap.co&#x2F;category&#x2F;reading-group&#x2F;&quot;&gt;DistSys Reading Group&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every week we present and discuss one distributed systems paper. We try to focus on relatively new papers, although we occasionally break this rule for some important older publications. The main objective of this group is to share knowledge through the discussion. Our participants come from academia and industry and often carry a unique perspective and expertise on the subject matter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Every session can be found on their &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCMKIroHVXvMQRIBhENE6RhQ&quot;&gt;YouTube channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-adult-computer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#coding-adult-computer&quot; aria-label=&quot;Anchor link for: coding-adult-computer&quot;&gt;üîó&lt;&#x2F;a&gt;Coding üßë‚Äçüíª&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;maelstrom&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maelstrom&quot; aria-label=&quot;Anchor link for: maelstrom&quot;&gt;üîó&lt;&#x2F;a&gt;Maelstrom&lt;&#x2F;h3&gt;
&lt;p&gt;Ever wonder to develop your own toy distributed systems? Fear no more, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jepsen-io&#x2F;maelstrom&quot;&gt;Maelstrom&lt;&#x2F;a&gt; for that!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maelstrom is a workbench for learning distributed systems by writing your own. It uses the Jepsen testing library to test toy implementations of distributed systems. Maelstrom provides standardized tests for things like &quot;a commutative set&quot; or &quot;a transactional key-value store&quot;, and lets you learn by writing implementations which those test suites can exercise. It&#x27;s used as a part of a distributed systems workshop by Jepsen.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Maelstrom provides a range of tests for different kinds of distributed systems, built on top of a simple JSON protocol via STDIN and STDOUT. Users write servers in any language. Maelstrom runs those servers, sends them requests, routes messages via a simulated network, and checks that clients observe expected behavior. You want to write Plumtree in Bash? Byzantine Paxos in Intercal? Maelstrom is for you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;pingcap-s-talent-plan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pingcap-s-talent-plan&quot; aria-label=&quot;Anchor link for: pingcap-s-talent-plan&quot;&gt;üîó&lt;&#x2F;a&gt;PingCAP&#x27;s Talent Plan&lt;&#x2F;h3&gt;
&lt;p&gt;PingCAP is the company behind the tidb&#x2F;tikv stack, a new distributed systems. They developed their own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;talent-plan&quot;&gt;open source training program&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talent Plan is an open source training program initiated by PingCAP. It aims to create or combine some open source learning materials for people interested in open source, distributed systems, Rust, Golang, and other infrastructure knowledge. As such, it provides a series of courses focused on open source collaboration, rust programming, distributed database and systems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I went through the Raft project in Rust and I learned a lot!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;patterns-of-distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#patterns-of-distributed-systems&quot; aria-label=&quot;Anchor link for: patterns-of-distributed-systems&quot;&gt;üîó&lt;&#x2F;a&gt;Patterns of Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;unmeshjoshi&quot;&gt;Unmesh Joshi&lt;&#x2F;a&gt; is writing an on-going serie called &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;patterns-of-distributed-systems&#x2F;&quot;&gt;Patterns of Distributed Systems&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed systems provide a particular challenge to program. They often require us to have multiple copies of data, which need to keep synchronized. Yet we cannot rely on processing nodes working reliably, and network delays can easily lead to inconsistencies. Despite this, many organizations rely on a range of core distributed software handling data storage, messaging, system management, and compute capability. These systems face common problems which they solve with similar solutions. This article recognizes and develops these solutions as patterns, with which we can build up an understanding of how to better understand, communicate and teach distributed system design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;reading-lists-eyes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reading-lists-eyes&quot; aria-label=&quot;Anchor link for: reading-lists-eyes&quot;&gt;üîó&lt;&#x2F;a&gt;Reading lists üëÄ&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dan-creswell-s-reading-list&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dan-creswell-s-reading-list&quot; aria-label=&quot;Anchor link for: dan-creswell-s-reading-list&quot;&gt;üîó&lt;&#x2F;a&gt;Dan Creswell&#x27;s reading List&lt;&#x2F;h3&gt;
&lt;p&gt;If you want more contents, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dancres&quot;&gt;Dan Creswell&lt;&#x2F;a&gt; has a nice &lt;a href=&quot;https:&#x2F;&#x2F;dancres.github.io&#x2F;Pages&#x2F;&quot;&gt;Distributed Systems Reading List&lt;&#x2F;a&gt; üöÄ&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, you can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">learning</category>
          <category domain="tag">distributed</category>
          <category domain="tag">education</category>
          <category domain="tag">database</category>
      </item>
      <item>
          <title>Crafting row keys in FoundationDB</title>
          <pubDate>Sun, 21 Feb 2021 00:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</link>
          <guid>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</guid>
          <description xml:base="https://pierrezemb.fr/posts/crafting-keys-in-fdb/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;fdb-white.jpg&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;m working &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Clikengo&#x2F;foundationdb-rs&#x2F;issues&#x2F;27&quot;&gt;on my latest contribution around FoundationDB and Rust&lt;&#x2F;a&gt;, I had the chance to dig a bit into how FoundationDB&#x27;s bindings are offering helpers to generate keys. Their approach is interesting enough to deserve a blogpost üòé&lt;&#x2F;p&gt;
&lt;h2 id=&quot;row-key&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#row-key&quot; aria-label=&quot;Anchor link for: row-key&quot;&gt;üîó&lt;&#x2F;a&gt;Row key?&lt;&#x2F;h2&gt;
&lt;p&gt;When you are using a key&#x2F;value store, the design of the &lt;code&gt;row key&lt;&#x2F;code&gt; is extremely important, as this will define how well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;your scans will be optimized,&lt;&#x2F;li&gt;
&lt;li&gt;your puts will be spread,&lt;&#x2F;li&gt;
&lt;li&gt;you will avoid &lt;code&gt;hot-spotting&lt;&#x2F;code&gt; a shard&#x2F;region.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you need more information on &lt;code&gt;row keys&lt;&#x2F;code&gt;, I recommend going through these links before moving on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;bigtable&#x2F;docs&#x2F;schema-design&quot;&gt;&quot;Designing your schema&quot; BigTable documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#rowkey.design&quot;&gt;&quot;Rowkey Design&quot; HBase documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hand-crafting-row-keys&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hand-crafting-row-keys&quot; aria-label=&quot;Anchor link for: hand-crafting-row-keys&quot;&gt;üîó&lt;&#x2F;a&gt;Hand-crafting row keys&lt;&#x2F;h2&gt;
&lt;p&gt;Most of the time, you will need to craft the &lt;code&gt;row key&lt;&#x2F;code&gt; &quot;by hand&quot;, like this for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;senx&#x2F;warp10-platform&#x2F;blob&#x2F;879734d7f63791b487f3e535cd79ac4c23e99377&#x2F;warp10&#x2F;src&#x2F;main&#x2F;java&#x2F;io&#x2F;warp10&#x2F;continuum&#x2F;store&#x2F;Store.java#L1215-L1222&quot;&gt;an HBase&#x27;s app&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Prefix + classId + labelsId + timestamp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 128 bits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte[]&lt;&#x2F;span&gt;&lt;span&gt; rowkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new byte&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Copy classId&#x2F;labelsId
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Longs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toByteArray&lt;&#x2F;span&gt;&lt;span&gt;(msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getClassId&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Longs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toByteArray&lt;&#x2F;span&gt;&lt;span&gt;(msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLabelsId&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or maybe you will wrap things in a function &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;tidb&#x2F;blob&#x2F;ef57bdbbb04f60a8be744060a99207e08a37514a&#x2F;tablecodec&#x2F;tablecodec.go#L80-L86&quot;&gt;like this in Go&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; EncodeRowKey encodes the table id and record handle into a kv.Key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;EncodeRowKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tableID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kv&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prefixLen&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appendTableRecordPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tableID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle&lt;&#x2F;span&gt;&lt;span&gt;...)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each time, you need to wrap the complexity of converting your objects to a row-key, by creating a buffer and write stuff in it.&lt;&#x2F;p&gt;
&lt;p&gt;In our Java example, there is an interesting comment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Prefix + classId + labelsId + timestamp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we are replacing some characters, we are not really far from:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (Prefix, classId, labelsId, timestamp)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which looks like a &lt;code&gt;Tuple&lt;&#x2F;code&gt;(a collection of values of different types) and this is what FoundationDB is using as an abstraction to create keys üòç&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fdb-s-abstractions-and-helpers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fdb-s-abstractions-and-helpers&quot; aria-label=&quot;Anchor link for: fdb-s-abstractions-and-helpers&quot;&gt;üîó&lt;&#x2F;a&gt;FDB&#x27;s abstractions and helpers&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tuple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tuple&quot; aria-label=&quot;Anchor link for: tuple&quot;&gt;üîó&lt;&#x2F;a&gt;Tuple&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of crafting bytes by hand, we are &lt;code&gt;packing&lt;&#x2F;code&gt; a Tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a Tuple&amp;lt;String, i64&amp;gt; with (&amp;quot;tenant-42&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tuple = (String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and compute a row-key from the Tuple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row_key = foundationdb::tuple::pack::&amp;lt;(String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;(&amp;amp;tuple);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The generated row-key will be readable from any bindings, as it&#x27;s construction is standardized. Let&#x27;s print it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and print-it in hexa
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:#04X?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, row_key);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;&#x2F; can be verified with https:&#x2F;&#x2F;www.utf8-chartable.de&#x2F;unicode-utf8-table.pl
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, &lt;code&gt;pack&lt;&#x2F;code&gt; added some extra-characters. There are used to recognized the next type, a bit like when you are encoding&#x2F;decoding some wire protocols. You can find the relevant documentation &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;design&#x2F;tuple.md&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Having this kind of standard means that we can easily decompose&#x2F;&lt;code&gt;unpack&lt;&#x2F;code&gt; it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; retrieve the user and the magic number In a Tuple (String, i64)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; from_row_key = foundationdb::tuple::unpack::&amp;lt;(String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;(&amp;amp;row_key)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;, magic_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, from_row_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, from_row_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; user=&amp;#39;tenant-42&amp;#39;, magic_number=42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we saw &lt;code&gt;Tuples&lt;&#x2F;code&gt;, let&#x27;s dig in the next abstraction: &lt;code&gt;subspaces&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;subspace&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#subspace&quot; aria-label=&quot;Anchor link for: subspace&quot;&gt;üîó&lt;&#x2F;a&gt;Subspace&lt;&#x2F;h3&gt;
&lt;p&gt;When you are working with key-values store, we are often playing with what we call &lt;code&gt;keyspaces&lt;&#x2F;code&gt;, by dedicating a portion of the key to an usage, like this for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-1&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-2&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-3&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;&#x2F;users&#x2F;tenant-1&#x2F;&lt;&#x2F;code&gt; can be view like a prefix where we will put all the relevant keys. Instead of passing a simple prefix, FoundationDB is offering a dedicated structure called a &lt;code&gt;Subspace&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Subspace represents a well-defined region of keyspace in a FoundationDB database&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It provides a convenient way to use FoundationDB tuples to define namespaces for different categories of data. The namespace is specified by a prefix tuple which is prepended to all tuples packed by the subspace. When unpacking a key with the subspace, the prefix tuple will be removed from the result.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Subspace&lt;&#x2F;code&gt; is heavily relying on FoundationDB&#x27;s tuples, as we can &lt;code&gt;pack&lt;&#x2F;code&gt; and &lt;code&gt;unpack&lt;&#x2F;code&gt; it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a best practice, API clients should use at least one subspace for application data.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, as we have now the tools to handle keyspaces easily, it is now futile to craft keys by hand üôÉ Let&#x27;s create a subspace!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a subspace from the Tuple (&amp;quot;tenant-1&amp;quot;, 42)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subspace = Subspace::from((String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let&amp;#39;s print the range
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start: {:#04X?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; end: {:#04X?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, subspace.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, subspace.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see observe this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;&#x2F; can be verified with https:&#x2F;&#x2F;www.utf8-chartable.de&#x2F;unicode-utf8-table.pl
&lt;&#x2F;span&gt;&lt;span&gt;start: [
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;    0x00,
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, &#x2F;&#x2F; smallest possible byte
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;end: [
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;    0x00,
&lt;&#x2F;span&gt;&lt;span&gt;    0xFF, &#x2F;&#x2F; biggest possible byte
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which make sens, if we take &lt;code&gt;(&quot;tenant-1&quot;, 42)&lt;&#x2F;code&gt; as a prefix, then the range for this subspace will be between &lt;code&gt;(&quot;tenant-1&quot;, 42, 0x00)&lt;&#x2F;code&gt; and &lt;code&gt;(&quot;tenant-1&quot;, 42, 0xFF)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;directory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#directory&quot; aria-label=&quot;Anchor link for: directory&quot;&gt;üîó&lt;&#x2F;a&gt;Directory&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we know our way around &lt;code&gt;Tuples&lt;&#x2F;code&gt; and &lt;code&gt;Subspaces&lt;&#x2F;code&gt;, we can now talk about what I&#x27;m working on, which is the &lt;code&gt;Directory&lt;&#x2F;code&gt;. Let&#x27;s have a look at the relevant &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;developer-guide.html#directories&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB provides directories (available in each language binding) as a tool for managing related subspaces.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Directories are a recommended approach for administering applications. Each application should create or open at least one directory to manage its subspaces.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, let&#x27;s see the API(in Go, as I&#x27;m working on the Rust API):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subspace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CreateOrOpen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subspace&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bytes&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; [21 18]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that we have a shorter subspace! The &lt;code&gt;directory&lt;&#x2F;code&gt; allows you to generate some integer that will be bind to a path, like here &lt;code&gt;&quot;application&quot;, &quot;my-app&quot;, &quot;tenant&quot;, &quot;tenant-42&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are two advantages to this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shorter keys,&lt;&#x2F;li&gt;
&lt;li&gt;cheap metadata operations like &lt;code&gt;List&lt;&#x2F;code&gt; or &lt;code&gt;Move&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; list all tenant in &amp;quot;application&amp;quot;, &amp;quot;my-app&amp;quot;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tenants&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tenants&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; [tenant-42]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; renaming &amp;#39;tenant-42&amp;#39; in &amp;#39;tenant-142&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will NOT move the data, only the metadata is modified
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directorySubspace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Move&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; old path
&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; new path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directorySubspace&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bytes&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; still [21 18]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The returned object is actually a &lt;code&gt;DirectorySubspace&lt;&#x2F;code&gt;, which implements both &lt;code&gt;Directory&lt;&#x2F;code&gt; and &lt;code&gt;Subspace&lt;&#x2F;code&gt;, which means that you can use it to recreate many directories and subspaces at will üëå&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are wondering about how this integer is generated, I recommend going through this awesome blogpost on &lt;a href=&quot;https:&#x2F;&#x2F;activesphere.com&#x2F;blog&#x2F;2018&#x2F;08&#x2F;05&#x2F;high-contention-allocator&quot;&gt;how high contention allocator works in FoundationDB.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">storage</category>
          <category domain="tag">foundationdb</category>
          <category domain="tag">distributed</category>
      </item>
      <item>
          <title>Notes about ETCD</title>
          <pubDate>Mon, 11 Jan 2021 00:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/notes-about-etcd/</link>
          <guid>https://pierrezemb.fr/posts/notes-about-etcd/</guid>
          <description xml:base="https://pierrezemb.fr/posts/notes-about-etcd/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-etcd&#x2F;images&#x2F;etcd.png&quot; alt=&quot;etcd image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;notes&#x2F;&quot;&gt;Notes About&lt;&#x2F;a&gt; is a blogpost serie  you will find a lot of &lt;strong&gt;links, videos, quotes, podcasts to click on&lt;&#x2F;strong&gt; about a specific topic. Today we will discover ETCD.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview-of-etcd&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview-of-etcd&quot; aria-label=&quot;Anchor link for: overview-of-etcd&quot;&gt;üîó&lt;&#x2F;a&gt;Overview of ETCD&lt;&#x2F;h2&gt;
&lt;p&gt;As stated in the &lt;a href=&quot;https:&#x2F;&#x2F;etcd.io&#x2F;&quot;&gt;official documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;history&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#history&quot; aria-label=&quot;Anchor link for: history&quot;&gt;üîó&lt;&#x2F;a&gt;History&lt;&#x2F;h2&gt;
&lt;p&gt;ETCD was initially developed by CoreOS:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;CoreOS built etcd to solve the problem of shared configuration and service discovery.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;July 23, 2013 - announcement&lt;&#x2F;li&gt;
&lt;li&gt;December 27, 2013 - etcd 0.2.0 - new API, new modules and tons of improvements&lt;&#x2F;li&gt;
&lt;li&gt;February 07, 2014 - etcd 0.3.0 - Improved Cluster Discovery, API Enhancements and Windows Support&lt;&#x2F;li&gt;
&lt;li&gt;January 28, 2015 - etcd 2.0 - First Major Stable Release&lt;&#x2F;li&gt;
&lt;li&gt;June 30, 2016 - etcd3 - A New Version of etcd from CoreOS&lt;&#x2F;li&gt;
&lt;li&gt;June 09, 2017 - etcd 3.2 - etcd 3.2 now with massive watch scaling and easy locks&lt;&#x2F;li&gt;
&lt;li&gt;February 01, 2018 - etcd 3.3 - Announcing etcd 3.3, with improvements to stability, performance, and more&lt;&#x2F;li&gt;
&lt;li&gt;August 30, 2019 - etcd 3.4 - Better Storage Backend, concurrent Read, Improved Raft Voting Process, Raft Learner Member&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;overall-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overall-architecture&quot; aria-label=&quot;Anchor link for: overall-architecture&quot;&gt;üîó&lt;&#x2F;a&gt;Overall architecture&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The etcd key-value store is a distributed system intended for use as a coordination primitive. Like Zookeeper and Consul, etcd stores a small volume of infrequently-updated state (by default, up to 8 GB) in a key-value map, and offers strict-serializable reads, writes and micro-transactions across the entire datastore, plus coordination primitives like locks, watches, and leader election. Many distributed systems, such as Kubernetes and OpenStack, use etcd to store cluster metadata, to coordinate consistent views over data, to choose leaders, and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ETCD is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;a href=&quot;&#x2F;posts&#x2F;notes-about-raft&#x2F;&quot;&gt;the raft consensus algorithm&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;a single group raft,&lt;&#x2F;li&gt;
&lt;li&gt;using &lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt; for communication,&lt;&#x2F;li&gt;
&lt;li&gt;using a self-made WAL implementation,&lt;&#x2F;li&gt;
&lt;li&gt;storing key-values into bbolt,&lt;&#x2F;li&gt;
&lt;li&gt;optimized for consistency over latency in normal situations and consistency over availability in the case of a partition (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PACELC_theorem&quot;&gt;in terms of the PACELC theorem&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;consensus-raft&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consensus-raft&quot; aria-label=&quot;Anchor link for: consensus-raft&quot;&gt;üîó&lt;&#x2F;a&gt;Consensus? Raft?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Raft is a consensus algorithm for managing a replicated log.&lt;&#x2F;li&gt;
&lt;li&gt;consensus involves multiple servers agreeing on values.&lt;&#x2F;li&gt;
&lt;li&gt;two common consensus algorithm are Paxos and Raft&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Paxos is quite difficult to understand, inspite of numerous attempts to make it more approachable. Furthermore, its architecture requires complex changes to support practical systems. As a result, both system builders and students struggle with Paxos.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A common alternative to Paxos&#x2F;Raft is a non-consensus (aka peer-to-peer) replication protocol.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft separates the key elements of consensus, such as leader election, log replication, and safety&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ETCD contains several raft optimizations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Read Index,&lt;&#x2F;li&gt;
&lt;li&gt;Follower reads,&lt;&#x2F;li&gt;
&lt;li&gt;Transfer leader,&lt;&#x2F;li&gt;
&lt;li&gt;Learner role,&lt;&#x2F;li&gt;
&lt;li&gt;Client-side load-balancing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;exposed-api&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#exposed-api&quot; aria-label=&quot;Anchor link for: exposed-api&quot;&gt;üîó&lt;&#x2F;a&gt;Exposed API&lt;&#x2F;h3&gt;
&lt;p&gt;ETCD is exposing several APIs through different gRPC services:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Put(key, value),&lt;&#x2F;li&gt;
&lt;li&gt;Delete(key, Optional(keyRangeEnd)),&lt;&#x2F;li&gt;
&lt;li&gt;Get(key, Optional(keyRangeEnd)),&lt;&#x2F;li&gt;
&lt;li&gt;Watch(key, Optional(keyRangeEnd)),&lt;&#x2F;li&gt;
&lt;li&gt;Transaction(if&#x2F;then&#x2F;else ops),&lt;&#x2F;li&gt;
&lt;li&gt;Compact(revision),&lt;&#x2F;li&gt;
&lt;li&gt;Lease:
&lt;ul&gt;
&lt;li&gt;Grant,&lt;&#x2F;li&gt;
&lt;li&gt;Revoke,&lt;&#x2F;li&gt;
&lt;li&gt;KeepAlive&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Key and values are bytes-oriented but ordered.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transactions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transactions&quot; aria-label=&quot;Anchor link for: transactions&quot;&gt;üîó&lt;&#x2F;a&gt;Transactions&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;proto&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-proto &quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; From google paxosdb paper:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Our implementation hinges around a powerful primitive which we call MultiOp. All other database
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and consists of three components:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for the absence or presence of a value, or compare with a given value. Two different tests in the guard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; may apply to the same or different entries in the database. All tests in the guard are applied and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; it executes f op (see item 3 below).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; lookup operation, and applies to a single database entry. Two different operations in the list may apply
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to the same or different entries in the database. These operations are executed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; if guard evaluates to
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TxnRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; compare is a list of predicates representing a conjunction of terms.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the comparisons succeed, then the success requests will be processed in order,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and the response will contain their respective responses in order.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the comparisons fail, then the failure requests will be processed in order,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and the response will contain their respective responses in order.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;repeated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Compare compare &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; success is a list of requests which will be applied when compare evaluates to true.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;repeated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestOp success &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; failure is a list of requests which will be applied when compare evaluates to false.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;repeated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestOp failure &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;versioned-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#versioned-data&quot; aria-label=&quot;Anchor link for: versioned-data&quot;&gt;üîó&lt;&#x2F;a&gt;Versioned data&lt;&#x2F;h3&gt;
&lt;p&gt;Each Key&#x2F;Value has a revision. When creating a new key, revision starts at 1, and then will be incremented each time the key is updated.&lt;&#x2F;p&gt;
&lt;p&gt;In order to avoid having a growing keySpace, one can issue the &lt;code&gt;Compact&lt;&#x2F;code&gt; gRPC service:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compacting the keyspace history drops all information about keys superseded prior to a given keyspace revision&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;lease&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lease&quot; aria-label=&quot;Anchor link for: lease&quot;&gt;üîó&lt;&#x2F;a&gt;Lease&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;proto&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-proto &quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this message represent a Lease
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lease &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TTL is the advisory time-to-live in seconds. Expired lease will return -1.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  int64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TTL &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  int64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  int64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert_timestamp &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;watches&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#watches&quot; aria-label=&quot;Anchor link for: watches&quot;&gt;üîó&lt;&#x2F;a&gt;Watches&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;proto&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-proto &quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Watch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; key is the key to register for watching.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; range_end is the end of the range [key, range_end) to watch. If range_end is not given,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; only the key argument is watched. If range_end is equal to &amp;#39;\0&amp;#39;, all keys greater than
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or equal to the key argument are watched.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the range_end is one bit larger than the given key,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; then all keys with the prefix (the given key) will be watched.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;range_end &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If watch_id is provided and non-zero, it will be assigned to this watcher.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Since creating a watcher in etcd is not a synchronous operation,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this can be used ensure that ordering is correct when creating multiple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; watchers on the same stream. Creating a watcher with an ID already in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; use on the stream will cause an error to be returned.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  int64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;watch_id &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;linearizable-reads&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#linearizable-reads&quot; aria-label=&quot;Anchor link for: linearizable-reads&quot;&gt;üîó&lt;&#x2F;a&gt;Linearizable reads&lt;&#x2F;h3&gt;
&lt;p&gt;Section 8 of the raft paper explains the issue:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read-only operations can be handled without writing anything into the log. However, with no additional measures, this would run the risk of returning stale data, since the leader responding to the request might have been superseded by a newer leader of which it is unaware. Linearizable reads must not return stale data, and Raft needs two extra precautions to guarantee this without using the log. First, a leader must have the latest information on which entries are committed. The Leader Completeness Property guarantees that a leader has all committed entries, but at the start of its term, it may not know which those are. To find out, it needs to commit an entry from its term. Raft handles this by having each leader commit a blank no-op entry into the log at the start of its term. Second,a leader must check whether it has been deposed before processing a read-only request (its information may be stale if a more recent leader has been elected). Raft handles this by having the leader exchange heartbeat messages with a majority of the cluster before responding to read-only requests.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ETCD implements &lt;code&gt;ReadIndex&lt;&#x2F;code&gt; read(more info on &lt;a href=&quot;&#x2F;posts&#x2F;diving-into-etcd-linearizable&#x2F;&quot;&gt;Diving into ETCD‚Äôs linearizable reads&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-etcd-is-using-bbolt&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-etcd-is-using-bbolt&quot; aria-label=&quot;Anchor link for: how-etcd-is-using-bbolt&quot;&gt;üîó&lt;&#x2F;a&gt;How ETCD is using bbolt&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;bbolt&quot;&gt;bbolt&lt;&#x2F;a&gt; is the underlying kv used in etcd. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.14&#x2F;mvcc&#x2F;kvstore_txn.go#L214&quot;&gt;A bucket called &lt;code&gt;key&lt;&#x2F;code&gt; is used to store data, and the key is the revision&lt;&#x2F;a&gt;. Then, to find keys, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.14&#x2F;mvcc&#x2F;index.go#L68&quot;&gt;a B-Tree is used&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Bolt allows only one read-write transaction at a time but allows as many read-only transactions as you want at a time.&lt;&#x2F;li&gt;
&lt;li&gt;Each transaction has a consistent view of the data as it existed when the transaction started.&lt;&#x2F;li&gt;
&lt;li&gt;Bolt uses a B+tree internally and only a single file. Both approaches have trade-offs.&lt;&#x2F;li&gt;
&lt;li&gt;If you require a high random write throughput (&amp;gt;10,000 w&#x2F;sec) or you need to use spinning disks then LevelDB could be a good choice. If your application is read-heavy or does a lot of range scans then Bolt could be a good choice.&lt;&#x2F;li&gt;
&lt;li&gt;Try to avoid long running read transactions. Bolt uses copy-on-write so old pages cannot be reclaimed while an old transaction is using them.&lt;&#x2F;li&gt;
&lt;li&gt;Bolt uses a memory-mapped file so the underlying operating system handles the caching of the data. Typically, the OS will cache as much of the file as it can in memory and will release memory as needed to other processes. This means that Bolt can show very high memory usage when working with large databases.&lt;&#x2F;li&gt;
&lt;li&gt;Etcd implements multi-version-concurrency-control (MVCC) on top of Boltdb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;issues&#x2F;12169#issuecomment-673292122&quot;&gt;From an Github issue&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the underlying &lt;code&gt;bbolt&lt;&#x2F;code&gt; mmap its file in memory. For better performance, usually it is a good idea to ensure the physical memory available to etcd is larger than its data size.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;etcd-in-k8s&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#etcd-in-k8s&quot; aria-label=&quot;Anchor link for: etcd-in-k8s&quot;&gt;üîó&lt;&#x2F;a&gt;ETCD in K8S&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;blob&#x2F;master&#x2F;staging&#x2F;src&#x2F;k8s.io&#x2F;apiserver&#x2F;pkg&#x2F;storage&#x2F;interfaces.go#L159&quot;&gt;The interface can be found here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create use TTL and Txn&lt;&#x2F;li&gt;
&lt;li&gt;Get use KV.Get&lt;&#x2F;li&gt;
&lt;li&gt;Delete use Get and then for with a Txn&lt;&#x2F;li&gt;
&lt;li&gt;GuaranteedUpdate uses Txn&lt;&#x2F;li&gt;
&lt;li&gt;List uses Get&lt;&#x2F;li&gt;
&lt;li&gt;Watch uses Watch with a channel&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jepsen&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jepsen&quot; aria-label=&quot;Anchor link for: jepsen&quot;&gt;üîó&lt;&#x2F;a&gt;Jepsen&lt;&#x2F;h2&gt;
&lt;p&gt;The Jepsen team tested &lt;a href=&quot;https:&#x2F;&#x2F;jepsen.io&#x2F;analyses&#x2F;etcd-3.4.3&quot;&gt;etcd-3.4.3&lt;&#x2F;a&gt;, here&#x27;s some quotes:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In our tests, etcd 3.4.3 lived up to its claims for key-value operations: we observed nothing but strict-serializable consistency for reads, writes, and even multi-key transactions, during process pauses, crashes, clock skew, network partitions, and membership changes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Watches appear correct, at least over single keys. So long as compaction does not destroy historical data while a watch isn‚Äôt running, watches appear to deliver every update to a key in order.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;However, etcd locks (like all distributed locks) do not provide mutual exclusion. Multiple processes can hold an etcd lock concurrently, even in healthy clusters with perfectly synchronized clocks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you use etcd locks, consider whether those locks are used to ensure safety, or simply to improve performance by probabilistically limiting concurrency. It‚Äôs fine to use etcd locks for performance, but using them for safety might be risky.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;operation-notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#operation-notes&quot; aria-label=&quot;Anchor link for: operation-notes&quot;&gt;üîó&lt;&#x2F;a&gt;Operation notes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;deployements-tips&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#deployements-tips&quot; aria-label=&quot;Anchor link for: deployements-tips&quot;&gt;üîó&lt;&#x2F;a&gt;Deployements tips&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;etcd.io&#x2F;docs&#x2F;v3.4.0&#x2F;faq&#x2F;&quot;&gt;From the official documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since etcd writes data to disk, SSD is highly recommended.
To prevent performance degradation or unintentionally overloading the key-value store, etcd enforces a configurable storage size quota set to 2GB by default.
To avoid swapping or running out of memory, the machine should have at least as much RAM to cover the quota.
8GB is a suggested maximum size for normal environments and etcd warns at startup if the configured value exceeds it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;defrag&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#defrag&quot; aria-label=&quot;Anchor link for: defrag&quot;&gt;üîó&lt;&#x2F;a&gt;Defrag&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;After compacting the keyspace, the backend database may exhibit internal fragmentation.
Defragmentation is issued on a per-member so that cluster-wide latency spikes may be avoided.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Defrag is basically &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;2b79442d8e9fc54b1ac27e7e230ac0e4c132a054&#x2F;mvcc&#x2F;backend&#x2F;backend.go#L349&quot;&gt;dumping the bbolt tree on disk and reopening it&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snapshot&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snapshot&quot; aria-label=&quot;Anchor link for: snapshot&quot;&gt;üîó&lt;&#x2F;a&gt;Snapshot&lt;&#x2F;h3&gt;
&lt;p&gt;An ETCD snapshot is related to Raft&#x27;s snapshot:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snapshotting is the simplest approach to compaction. In snapshotting, the entire current system state is written to a snapshot on stable storage, then the entire log up to that point is discarded&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Snapshot can be saved using &lt;code&gt;etcdctl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;etcdctl&lt;&#x2F;span&gt;&lt;span&gt; snapshot save backup.db
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lease-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lease-1&quot; aria-label=&quot;Anchor link for: lease-1&quot;&gt;üîó&lt;&#x2F;a&gt;Lease&lt;&#x2F;h3&gt;
&lt;p&gt;Be careful on Leader&#x27;s change and lease, this can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues&#x2F;65497&quot;&gt;create some issues&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new leader extends timeouts automatically for all leases. This mechanism ensures no lease expires due to server side unavailability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;war-stories&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#war-stories&quot; aria-label=&quot;Anchor link for: war-stories&quot;&gt;üîó&lt;&#x2F;a&gt;War stories&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;a-byzantine-failure-in-the-real-world&#x2F;&quot;&gt;An analysis of the Cloudflare API availability incident on 2020-11-02&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;blog&#x2F;2020&#x2F;04&#x2F;07&#x2F;how-a-production-outage-in-grafana-clouds-hosted-prometheus-service-was-caused-by-a-bad-etcd-client-setup&#x2F;&quot;&gt;How a production outage in Grafana Cloud&#x27;s Hosted Prometheus service was caused by a bad etcd client setup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;issues&#x2F;11884&quot;&gt;Random performance issue on etcd 3.4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2004.00372.pdf&quot;&gt;Impact of etcd deployment on Kubernetes, Istio, and application performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">etcd</category>
          <category domain="tag">storage</category>
          <category domain="tag">consensus</category>
          <category domain="tag">notes</category>
      </item>
      <item>
          <title>10 years of programming and counting üöÄ</title>
          <pubDate>Wed, 30 Sep 2020 00:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/ten-years-programming/</link>
          <guid>https://pierrezemb.fr/posts/ten-years-programming/</guid>
          <description xml:base="https://pierrezemb.fr/posts/ten-years-programming/">&lt;p&gt;I‚Äôve just realized that I‚Äôve spent the last decade programming ü§Ø While 2020 feels like a strange year, I thought it would be nice to write down a retrospective of the last 10 years üóì&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-to-program-man-computer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-to-program-man-computer&quot; aria-label=&quot;Anchor link for: learning-to-program-man-computer&quot;&gt;üîó&lt;&#x2F;a&gt;Learning to program üë®üèª‚Äçüíª&lt;&#x2F;h2&gt;
&lt;p&gt;I wrote my first &lt;em&gt;Hello, world&lt;&#x2F;em&gt; program somewhere around September 2010, when I started my engineering school to do some electronics, but that C language got me. I spent 6 months struggling to understand pointers and memory. I remember spending nights trying to find a memory leak with valgrind. Of course there were multiples mistakes, but it felt good to dig that far.&lt;&#x2F;p&gt;
&lt;p&gt;I also discovered Linux around that time, and spent many nights playing with Linux commands. I started my journey to Linux with Centos and then Ubuntu 11.04. I think this started the loop I‚Äôm (still!) stuck in:
&lt;code&gt;for {tryNewDistro()}&lt;&#x2F;code&gt;
I‚Äôm pretty sure that if I wanted to go away from distributed systems, I would try to land a job around operating systems. So many things to learn ü§©&lt;&#x2F;p&gt;
&lt;p&gt;After learning C, we started to learn web-based technologies like HTML&#x2F;CSS&#x2F;JS&#x2F;PHP. I remember struggling to generate a calendar with PHP üêò I learned about APIs the week after the project üòÖ I remember digging into cookies, and network calls from popular websites to see how they were using it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;java-and-hadoop-elephant&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#java-and-hadoop-elephant&quot; aria-label=&quot;Anchor link for: java-and-hadoop-elephant&quot;&gt;üîó&lt;&#x2F;a&gt;Java and Hadoop üêò&lt;&#x2F;h2&gt;
&lt;p&gt;I had the chance to land a part-time internship during the third year (out of five) of my engineering school. I joined the Systems team @ Arkea, a french bank.
I remember spending a lot of time with my coworkers, learning things from them, from Hadoop to mainframes and Linux. It was my first time grasping the work around ‚Äúsystem programming‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;My first task was around writing an installer for a java app on windows, but my tutor tried to push me further. He saw my interest around some specific layers of their perimeter, such as Hadoop and Kafka. He gave to me a chance to work directly on those. A small API that was could load old monitoring data stored in HDFS and expose them back into the ‚Äúreal-time‚Äù visualization tool. I also used Kafka and even deployed a small HBase cluster for testing.&lt;&#x2F;p&gt;
&lt;p&gt;I can&#x27;t thank my tutor enough for giving me this chance, and for allowing me to discover what will become my focus: distributed systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-meet-other-people-wave&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-meet-other-people-wave&quot; aria-label=&quot;Anchor link for: let-s-meet-other-people-wave&quot;&gt;üîó&lt;&#x2F;a&gt;Let‚Äôs meet other people üëã&lt;&#x2F;h2&gt;
&lt;p&gt;Around the same time, I discovered tech meetups and conferences. At that time, Google I&#x2F;O was a major event with people jumping from a plane and streaming it through Google Glass. I found out there was a group of people watching the live together. And this is how I discovered my local GDG&#x2F;JUG ü•≥ I learned so many things by watching local talks, even if it was difficult to grasp everything at first. I remember taking üìù about what I didn‚Äôt understand, to learn about it later.&lt;&#x2F;p&gt;
&lt;p&gt;I also met amazing persons, that are now friends and&#x2F;or mentors. I remember feeling humble to be able to learn from them.&lt;&#x2F;p&gt;
&lt;p&gt;I also discovered more global tech conferences. I asked as a birthday üéÅ to go to Devoxx France and DotScale, in 2014. It was awesome üòé&lt;&#x2F;p&gt;
&lt;p&gt;By dint of watching talks, I wanted to give some. I started small, giving talks at my engineering school, then moved to the JUG itself. I learned &lt;strong&gt;a lot&lt;&#x2F;strong&gt; by making a lot of mistakes, but I‚Äôm pretty happy how things turned out, as I‚Äôm now speaking at tech conferences as part of my current work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ten-years-programming&#x2F;first-talk.jpg&quot; alt=&quot;etcd image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also started to be involved in events and organizations such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The JUG&#x2F;GDG&lt;&#x2F;li&gt;
&lt;li&gt;A coworking place&lt;&#x2F;li&gt;
&lt;li&gt;Startup Weekend&lt;&#x2F;li&gt;
&lt;li&gt;Devoxx4kids&lt;&#x2F;li&gt;
&lt;li&gt;DevFest du bout du monde&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learning-big-data-floppy-disk&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-big-data-floppy-disk&quot; aria-label=&quot;Anchor link for: learning-big-data-floppy-disk&quot;&gt;üîó&lt;&#x2F;a&gt;Learning big data üíæ&lt;&#x2F;h2&gt;
&lt;p&gt;After my graduation and a(nother) part-time internship at OVH, I started working on something called Metrics Data Platform. It is the platform massively used internally to store, query and alert on timeseries data. We avoid the Borgmon approach (deploying Prometheus‚Äôs like database for every team), instead we created a unique platform to ingest all OVHcloud‚Äôs datapoints using a big-data approach. Here‚Äôs the key point of Metrics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;multi-tenant&lt;&#x2F;strong&gt;: as we said before, a single metrics cluster is handling all telemetry, from servers to applications and smart data centers from OVHcloud.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;scalable&lt;&#x2F;strong&gt;: today we are receiving around 1.8 million datapoints per second&#x2F;s üôà for about 450 million timeseries üôâ. During European daytime, we are reading around 4.5 millions datapoints per seconds thank to Grafana‚Äôs auto-refresh mode üôä&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;multi-protocol support&lt;&#x2F;strong&gt;: we didn&#x27;t want to reflect our infrastructure choice to our users, so we wrote some proxies that can translate known protocols to our query language, so users can query and push data using OpenTSDB, Prometheus, InfluxDB and so on.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;based on open source&lt;&#x2F;strong&gt; we are using Warp10 as the core of our infrastructure with Kafka and HBase. Alerting was built with Apache flink. We open sourced many software, from agent to our proxies. We also gave many talks about what we learnt.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I had the chance to built Metrics from the ground. I started working on the management layer and proxies. Then I wanted to learn operations, so I learned it by deploying Hadoop clusters ü§Ø it took me a while to be able to start doing on-calls. I cannot count how many nights I was up, trying to fix some buggy softwares, or yelling at HBase for an inconsistent &lt;code&gt;hbck&lt;&#x2F;code&gt;, or trying to find a way to handle a side effect of a loosing multiple racks.&lt;&#x2F;p&gt;
&lt;p&gt;Our work was highly technical, and I loved it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We optimized a lot of things, from HBase to our Go‚Äôs based proxies. &lt;code&gt;optimize HBase&#x27;s data balancer&lt;&#x2F;code&gt; or &lt;code&gt;fix issues with Go‚Äôs gc&lt;&#x2F;code&gt;  was almost a normal task to do&lt;&#x2F;li&gt;
&lt;li&gt;We saw Metrics‚Äôs growth, from hundred to millions of datapoints üòé we saw systems breaking at scale, causing us to rewrite software or change architecture. Production became the final test.&lt;&#x2F;li&gt;
&lt;li&gt;Every software we developed had a &lt;code&gt;keep it simple, yet scalable&lt;&#x2F;code&gt; policy, and doing on-calls was a good way to ensure software quality. We all learned it the hard way I guess ü§£&lt;&#x2F;li&gt;
&lt;li&gt;We were only 4 to 6 to handle ~800 servers, 3 Hadoop clusters, and thousands of lines of Java&#x2F;Go&#x2F;Rust&#x2F;Ansible codes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As always, things were not always magical, and i struggled more time than I can count. I learned that personal struggle is more difficult than technical, as you can always drill-down your tech problems by reading the code. The team was amazing üöÄ, and we were helping each other a lot ü§ù&lt;&#x2F;p&gt;
&lt;h2 id=&quot;searching-for-planets-telescope-ringed-planet&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#searching-for-planets-telescope-ringed-planet&quot; aria-label=&quot;Anchor link for: searching-for-planets-telescope-ringed-planet&quot;&gt;üîó&lt;&#x2F;a&gt;Searching for planets üî≠ ü™ê&lt;&#x2F;h2&gt;
&lt;p&gt;When I started working on Metrics, we did a lot of internal on boarding. At his core, metrics is usine Warp10, which is coming with his own language to analyze timeseries. This provides heavy query-capabilities, but as it is stack-based, getting started was difficult. I needed a project to dive into timeseries analysis.&lt;&#x2F;p&gt;
&lt;p&gt;I love astronomy üî≠, but there‚Äôs too much ‚òÅÔ∏è (not the servers) in my city. I decided to look for astronomical timeseries. Turns out there is a lot, but one use case triggered my interest: exoplanet‚Äôs search. Almost everything from NASA is Opendata, so we decided to create &lt;a href=&quot;https:&#x2F;&#x2F;helloexo.world&#x2F;&quot;&gt;HelloExoWorld&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We imported the &lt;strong&gt;25TB dataset into a Warp10 instance&lt;&#x2F;strong&gt; and start writing some WarpScript to search for transits. We wrote a &lt;a href=&quot;https:&#x2F;&#x2F;helloexoworld.github.io&#x2F;hew-hands-on&#x2F;&quot;&gt;hands-on about it&lt;&#x2F;a&gt;. We also did several labs in french conferences like Devoxx and many others.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;io-timeout-construction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#io-timeout-construction&quot; aria-label=&quot;Anchor link for: io-timeout-construction&quot;&gt;üîó&lt;&#x2F;a&gt;IO timeout üöß&lt;&#x2F;h2&gt;
&lt;p&gt;Around 2018, OVHcloud started Managed Kubernetes, a free K8S control-plane. With this product we saw more developers coming to OVHcloud. We started thinking about how we could help them. Running stateful systems is &lt;strong&gt;hard&lt;&#x2F;strong&gt;, so maybe we could offer them some databases or queues in a As-a-Service fashion. We started to design such products from our Metrics experience. We started the IO Vision to offer &lt;code&gt;popular Storage APIs in front of a scalable storage&lt;&#x2F;code&gt;. Does it sound familiar? üòá I had a lot of fun working on that vision as a Technical Leader.&lt;&#x2F;p&gt;
&lt;p&gt;We started with queuing with ioStream. We wanted something that was:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-tenant&lt;&#x2F;li&gt;
&lt;li&gt;Multi-protocol&lt;&#x2F;li&gt;
&lt;li&gt;Geo-replicated natively&lt;&#x2F;li&gt;
&lt;li&gt;Less operation burden at scale than Kafka&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We built ioStream around Apache Pulsar, and opened the beta around September 2019. As the same time we were working on Kafka‚Äôs support as a proxy in Rust. Writing such a software capable of translating Kafka‚Äôs TCP frames to Pulsar with a state-machine was a &lt;strong&gt;fun and challenging work&lt;&#x2F;strong&gt;. Rust is really a nice language to write such software.&lt;&#x2F;p&gt;
&lt;p&gt;Then we worked with Apache Pulsar‚Äôs PMC to introduce a Kafka protocol handler on Pulsar brokers. I had the chance to work closely to two PMCs, it was an amazing experience for me üöÄ You can read about our collaboration &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;blog&#x2F;announcing-kafka-on-pulsar-bring-native-kafka-protocol-support-to-apache-pulsar&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately as stated by the official communication, the project has been shut down:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;However, the limited success of the beta service and other strategic focuses,
&lt;&#x2F;span&gt;&lt;span&gt;have resulted in us taking the very difficult decision to close it.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I learned a lot of things, both technically and on the product-side, especially considering the fact that it was shutdown.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#today&quot; aria-label=&quot;Anchor link for: today&quot;&gt;üîó&lt;&#x2F;a&gt;Today&lt;&#x2F;h2&gt;
&lt;p&gt;After ioStream‚Äôs shutdown, most of the team moved to create a new LBaaS. I helped them wrote an operator to schedule HAProxy‚Äôs containers on a Kubernetes cluster. It was a nice introduction to operators.&lt;&#x2F;p&gt;
&lt;p&gt;Then I decided to join the Managed Kubernetes ‚ò∏Ô∏è team. This is my current team now, where I‚Äôm having a lot of fun working around ETCD.&lt;&#x2F;p&gt;
&lt;p&gt;I really hope the next 10 years will be as fun as the last 10 years üòá&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">personal</category>
      </item>
      <item>
          <title>Announcing Record-Store, a new (experimental) place for your data</title>
          <pubDate>Wed, 23 Sep 2020 10:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/announcing-record-store/</link>
          <guid>https://pierrezemb.fr/posts/announcing-record-store/</guid>
          <description xml:base="https://pierrezemb.fr/posts/announcing-record-store/">&lt;p&gt;TL;DR: I&#x27;m really happy to announce my latest open-source project called Record-Store üöÄ Please check it out on &lt;a href=&quot;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what&quot; aria-label=&quot;Anchor link for: what&quot;&gt;üîó&lt;&#x2F;a&gt;What?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Record-Store&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;layer-concept.html&quot;&gt;layer&lt;&#x2F;a&gt; running on top of &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.org&quot;&gt;FoundationDB&lt;&#x2F;a&gt;. It provides abstractions to create, load and deletes customer-defined data called &lt;code&gt;records&lt;&#x2F;code&gt;, which are hold into a &lt;code&gt;RecordSpace&lt;&#x2F;code&gt;. We would like to have this kind of flow for developers:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Opening RecordSpace, for example &lt;code&gt;prod&#x2F;users&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Create a protobuf definition which will be used as schema&lt;&#x2F;li&gt;
&lt;li&gt;Upsert schema&lt;&#x2F;li&gt;
&lt;li&gt;Push records&lt;&#x2F;li&gt;
&lt;li&gt;Query records&lt;&#x2F;li&gt;
&lt;li&gt;delete records&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You need another &lt;code&gt;KeySpace&lt;&#x2F;code&gt; to store another type of data, or maybe a &lt;code&gt;KeySpace&lt;&#x2F;code&gt; dedicated to production env? Juste create it and you are good to go!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#features&quot; aria-label=&quot;Anchor link for: features&quot;&gt;üîó&lt;&#x2F;a&gt;Features&lt;&#x2F;h2&gt;
&lt;p&gt;It is currently an experiment, but it already has some strong features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-tenant&lt;&#x2F;strong&gt; A &lt;code&gt;tenant&lt;&#x2F;code&gt; can create as many &lt;code&gt;RecordSpace&lt;&#x2F;code&gt; as we want, and we can have many &lt;code&gt;tenants&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standard API&lt;&#x2F;strong&gt; We are exposing the record-store with standard technologies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&quot;&gt;gRPC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;very experimental&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;graphql.org&quot;&gt;GraphQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scalable&lt;&#x2F;strong&gt; We are based on the same tech behind &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;files&#x2F;record-layer-paper.pdf&quot;&gt;CloudKit&lt;&#x2F;a&gt; called the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb&#x2F;fdb-record-layer&#x2F;&quot;&gt;Record Layer&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transactional&lt;&#x2F;strong&gt; We are running on top of &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;&quot;&gt;FoundationDB&lt;&#x2F;a&gt;. FoundationDB gives you the power of ACID transactions in a distributed database.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypted&lt;&#x2F;strong&gt; Data are encrypted by default.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-model&lt;&#x2F;strong&gt; For each &lt;code&gt;RecordSpace&lt;&#x2F;code&gt;, you can define a &lt;code&gt;schema&lt;&#x2F;code&gt;, which is in-fact only a &lt;code&gt;Protobuf&lt;&#x2F;code&gt; definition. You need to store some &lt;code&gt;users&lt;&#x2F;code&gt;, or a more complicated structure? If you can represent it as &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&quot;&gt;Protobuf&lt;&#x2F;a&gt;, you are good to go!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Index-defined queries&lt;&#x2F;strong&gt; Your queries&#x27;s capabilities are defined by the indexes you put on your schema.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Secured&lt;&#x2F;strong&gt; We are using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CleverCloud&#x2F;biscuit&quot;&gt;Biscuit&lt;&#x2F;a&gt;, a mix of &lt;code&gt;JWT&lt;&#x2F;code&gt; and &lt;code&gt;Macaroons&lt;&#x2F;code&gt; to ensure auth{entication, orization}.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;üîó&lt;&#x2F;a&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;Lately, I have been playing a lot with my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-etcd&quot;&gt;ETCD-Layer&lt;&#x2F;a&gt; that is using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb&#x2F;fdb-record-layer&#x2F;&quot;&gt;Record-Layer&lt;&#x2F;a&gt;. Thanks to it, I was able to bootstrap my ETCD-layer very quickly, but I was not using a tenth of the capacities of this library. So I decided to go deeper. &lt;strong&gt;What would a gRPC abstraction of the Record-Layer look like?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The name of this project itself is a tribute to the Record Layer as we are exposing the layer within a gRPC interface.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#try-it-out&quot; aria-label=&quot;Anchor link for: try-it-out&quot;&gt;üîó&lt;&#x2F;a&gt;Try it out&lt;&#x2F;h2&gt;
&lt;p&gt;Record-Store is open sourced under Apache License V2 in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;record-store&lt;&#x2F;a&gt; and the documentation can be found &lt;a href=&quot;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">storage</category>
          <category domain="tag">distributed</category>
          <category domain="tag">opensource</category>
          <category domain="tag">foundationdb</category>
      </item>
      <item>
          <title>Diving into ETCD&#x27;s linearizable reads</title>
          <pubDate>Fri, 18 Sep 2020 05:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</link>
          <guid>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</guid>
          <description xml:base="https://pierrezemb.fr/posts/diving-into-etcd-linearizable/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;diving-into-etcd-linearizable&#x2F;etcd.png&quot; alt=&quot;etcd image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;diving&#x2F;&quot;&gt;Diving Into&lt;&#x2F;a&gt; is a blogpost serie where we are digging a specific part of the project&#x27;s basecode. In this episode, we will digg into the implementation behind ETCD&#x27;s Linearizable reads.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-is-etcd&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-etcd&quot; aria-label=&quot;Anchor link for: what-is-etcd&quot;&gt;üîó&lt;&#x2F;a&gt;What is ETCD?&lt;&#x2F;h2&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;etcd.io&#x2F;&quot;&gt;the official website&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ETCD is well-known to be Kubernetes&#x27;s datastore, and a CNCF incubating project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linea-what&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#linea-what&quot; aria-label=&quot;Anchor link for: linea-what&quot;&gt;üîó&lt;&#x2F;a&gt;Linea-what?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jepsen.io&#x2F;consistency&#x2F;models&#x2F;linearizable&quot;&gt;Let&#x27;s quote Kyle Kingsbury, a.k.a &quot;Aphyr&quot;&lt;&#x2F;a&gt;, for this one:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linearizability is one of the strongest single-object consistency models, and implies that every operation appears to take place atomically, in some order, consistent with the real-time ordering of those operations: e.g., if operation A completes before operation B begins, then B should logically take effect after A.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;üîó&lt;&#x2F;a&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;ETCD is using &lt;a href=&quot;https:&#x2F;&#x2F;raft.github.io&#x2F;&quot;&gt;Raft&lt;&#x2F;a&gt;, a consensus algorithm at his core. As always, the devil is hidden in the details, or when things are going wrong. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;node1&lt;&#x2F;code&gt; is &lt;code&gt;leader&lt;&#x2F;code&gt; and heartbeating properly to &lt;code&gt;node2&lt;&#x2F;code&gt; and &lt;code&gt;node3&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;network partition is happening, and &lt;code&gt;node1&lt;&#x2F;code&gt; is isolated from the others.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;At this moment, all the actions are depending on timeouts and settings. In a (close) future, all nodes will go into &lt;strong&gt;election mode&lt;&#x2F;strong&gt; and node 2 and 3 will be able to create a quorum. This can lead to this situation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node1&lt;&#x2F;code&gt; thinks he is a leader as heartbeat timeouts and retry are not yet reached, so he can serve reads üò±&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;node2&lt;&#x2F;code&gt; and &lt;code&gt;node3&lt;&#x2F;code&gt; have elected a new leader and are working again, accepting writes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This situation is violating Linearizable reads, as reads going through &lt;code&gt;node1&lt;&#x2F;code&gt; will not see the last updates from the current leader.&lt;&#x2F;p&gt;
&lt;p&gt;How can we solve this? One way is to use &lt;code&gt;ReadIndex&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;readindex&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#readindex&quot; aria-label=&quot;Anchor link for: readindex&quot;&gt;üîó&lt;&#x2F;a&gt;ReadIndex&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea behind this is to confirm that the &lt;strong&gt;leader is true leader or not&lt;&#x2F;strong&gt; by sending a message to the followers. If a majority of responses are healthy, then the leader can safely serve the reads. Let&#x27;s dive into the implementation!&lt;&#x2F;p&gt;
&lt;p&gt;All codes are from the current latest release &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases&#x2F;tag&#x2F;v3.4.13&quot;&gt;v3.4.13&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;v3_server.go#L114-L120&quot;&gt;Let&#x27;s take a Range operation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serializable &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linearizableReadNotify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Step&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;agreement among raft nodes before linearized reading&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EtcdServer&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;linearizableReadNotify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RLock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readNotifier
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RUnlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; signal linearizable loop for current notify if it hasn&amp;#39;t been already
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readwaitc &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;{}{}:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wait for read state notification
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrStopped
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;v3_server.go#L773-L793&quot;&gt;linearizableReadNotify&lt;&#x2F;a&gt;, we are waiting for a signal. &lt;code&gt;readwaitc&lt;&#x2F;code&gt; is used in another goroutine called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;v3_server.go#L672-L771&quot;&gt;linearizableReadLoop&lt;&#x2F;a&gt;. This goroutines will call this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ReadIndex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rctx &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgReadIndex&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rctx&lt;&#x2F;span&gt;&lt;span&gt;}}})
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that will create a &lt;code&gt;MsgReadIndex&lt;&#x2F;code&gt; message that will be handled in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;raft&#x2F;raft.go#L994&quot;&gt;stepLeader&lt;&#x2F;a&gt;, who will send the message to the followers, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgReadIndex&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If more than the local vote is needed, go through a full broadcast,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; otherwise optimize.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsSingleton&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PZ: omitting some code here
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadOnlySafe&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addRequest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;raftLog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The local node automatically acks the request.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvAck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bcastHeartbeatWithCtx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadOnlyLeaseBased&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ri &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;raftLog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; from local member
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStates &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStates&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadState&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestCtx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgReadIndexResp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, the &lt;code&gt;leader&lt;&#x2F;code&gt; is sending a heartbeat in &lt;code&gt;ReadOnlySafe&lt;&#x2F;code&gt; mode. Turns out there is two modes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ReadOnlySafe guarantees the linearizability of the read only request by
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; communicating with the quorum. It is the default and suggested option.
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadOnlySafe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ReadOnlyOption &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iota
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ReadOnlyLeaseBased ensures linearizability of the read only request by
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; relying on the leader lease. It can be affected by clock drift.
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the clock drift is unbounded, leader might keep the lease longer than it
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; should (clock can move backward&#x2F;pause without any bound). ReadIndex is not safe
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in that case.
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadOnlyLeaseBased
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Responses from the followers will be handled here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgHeartbeatResp&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PZ: omitting some code here
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rss &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;advance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rss &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; from local member
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStates &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStates&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadState&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestCtx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;   } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgReadIndexResp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entries&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are storing things into a &lt;code&gt;ReadState&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ReadState provides state for read only query.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It&amp;#39;s caller&amp;#39;s responsibility to call ReadIndex first before getting
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this state from ready, it&amp;#39;s also caller&amp;#39;s duty to differentiate if this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; state is what it requests through RequestCtx, eg. given a unique id as
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; RequestCtx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ReadState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;uint64
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestCtx &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that the state has been updated, we need to unblock our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;v3_server.go#L672-L771&quot;&gt;linearizableReadLoop&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStateC&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool, another channel! Turns out, &lt;code&gt;readStateC&lt;&#x2F;code&gt; is updated in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;raft.go#L162&quot;&gt;one of the main goroutine&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start prepares and starts raftNode in a new goroutine. It is no longer safe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to modify the fields after it has been started.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raftNode&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rh &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raftReadyHandler&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internalTimeout &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Second
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onStop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;islead &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ticker&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rd &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ready&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PZ: omitting some code here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadStates&lt;&#x2F;span&gt;&lt;span&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readStateC &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadStates&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadStates&lt;&#x2F;span&gt;&lt;span&gt;)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perfect, now &lt;code&gt;readStateC&lt;&#x2F;code&gt; is notified, and we can continue on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v3.4.13&#x2F;etcdserver&#x2F;v3_server.go#L672-L771&quot;&gt;linearizableReadLoop&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ai &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAppliedIndex&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ai &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;applyWait&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stopping&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unblock all l-reads requested at indices before rs.Index
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first part is a safety measure to makes sure the applied index is lower that the index stored in &lt;code&gt;ReadState&lt;&#x2F;code&gt;. And then finally we are unlocking all pending reads ü§©&lt;&#x2F;p&gt;
&lt;h2 id=&quot;one-more-thing-follower-read&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#one-more-thing-follower-read&quot; aria-label=&quot;Anchor link for: one-more-thing-follower-read&quot;&gt;üîó&lt;&#x2F;a&gt;One more thing: Follower read&lt;&#x2F;h2&gt;
&lt;p&gt;We went through &lt;code&gt;stepLeader&lt;&#x2F;code&gt; a lot, be there is something interesting in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;blob&#x2F;v4.3.13&#x2F;raft&#x2F;raft.go#L1320&quot;&gt;&lt;code&gt;stepFollower&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MsgReadIndex&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lead &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; no leader at term &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;; dropping index reading msg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Term&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lead
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that a follower can send a &lt;code&gt;MsgReadIndex&lt;&#x2F;code&gt; message to perform the same kind of checks than a leader. This small features is in fact enabling &lt;strong&gt;follower-reads&lt;&#x2F;strong&gt; on ETCD ü§© That is why you can see &lt;code&gt;Range&lt;&#x2F;code&gt; requests from a &lt;code&gt;follower&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;operational-tips&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#operational-tips&quot; aria-label=&quot;Anchor link for: operational-tips&quot;&gt;üîó&lt;&#x2F;a&gt;operational tips&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If you are running etcd &amp;lt;= 3.4, make sure &lt;strong&gt;logger=zap&lt;&#x2F;strong&gt; is set. Like this, you will be able to see some tracing logs, and I trully hope you will not witness this one:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2020-08-12T08:24:56.181Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;caller&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;traceutil&#x2F;trace.go:145&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trace[677217921] range&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{range_begin:&#x2F;...redacted...; range_end:; response_count:1; response_revision:2725080604; }&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.553047811s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2020-08-12T08:24:54.628Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2020-08-12T08:24:56.181Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trace[677217921] &amp;#39;agreement among raft nodes before linearized reading&amp;#39;  (duration: 1.534322015s)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;there is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;issues&#x2F;11884&quot;&gt;a random performance issue on etcd 3.4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;there is some metrics than you can watch for ReadIndex issues:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;etcd_server_read_indexes_failed_total&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;etcd_server_slow_read_indexes_total&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! feel free to react to this article, I&#x27;m also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">etcd</category>
          <category domain="tag">raft</category>
          <category domain="tag">consensus</category>
          <category domain="tag">storage</category>
          <category domain="tag">diving</category>
      </item>
      <item>
          <title>Notes about Raft&#x27;s paper</title>
          <pubDate>Thu, 30 Jul 2020 07:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/notes-about-raft/</link>
          <guid>https://pierrezemb.fr/posts/notes-about-raft/</guid>
          <description xml:base="https://pierrezemb.fr/posts/notes-about-raft/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-raft&#x2F;raft.png&quot; alt=&quot;raft_image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;notes&#x2F;&quot;&gt;Notes About&lt;&#x2F;a&gt; is a blogpost serie  you will find a lot of &lt;strong&gt;links, videos, quotes, podcasts to click on&lt;&#x2F;strong&gt; about a specific topic. Today we will discover Raft&#x27;s paper called &#x27;In Search of an Understandable Consensus Algorithm&#x27;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As I&#x27;m digging into ETCD, I needed to refresh my memory about Raft. I started by reading the paper located &lt;a href=&quot;https:&#x2F;&#x2F;raft.github.io&#x2F;raft.pdf&quot;&gt;here&lt;&#x2F;a&gt; and I&#x27;m also playing with the amazing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;talent-plan&#x2F;tree&#x2F;master&#x2F;courses&#x2F;dss&#x2F;raft&quot;&gt;Raft labs made by PingCAP&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;These labs are derived from the &lt;a href=&quot;http:&#x2F;&#x2F;nil.csail.mit.edu&#x2F;6.824&#x2F;2018&#x2F;labs&#x2F;lab-raft.html&quot;&gt;lab2:raft&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;nil.csail.mit.edu&#x2F;6.824&#x2F;2018&#x2F;labs&#x2F;lab-kvraft.html&quot;&gt;lab3:kvraft&lt;&#x2F;a&gt; from the famous &lt;a href=&quot;http:&#x2F;&#x2F;nil.csail.mit.edu&#x2F;6.824&#x2F;2018&#x2F;index.html&quot;&gt;MIT 6.824&lt;&#x2F;a&gt; course but rewritten in Rust.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;abstract&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#abstract&quot; aria-label=&quot;Anchor link for: abstract&quot;&gt;üîó&lt;&#x2F;a&gt;Abstract&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, andit is as efficient as Paxos, but its structure is differentfrom Paxos; this makes Raft more understandable thanPaxos and also provides a better foundation for build-ing practical systems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft separates the key elements of consensus, such asleader election, log replication, and safety, and it enforcesa stronger degree of coherency to reduce the number ofstates that must be considered.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot;&gt;üîó&lt;&#x2F;a&gt;Introduction&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Consensus algorithms allow a collection of machines to work as a coherent group that can survive the failures of some of its members.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Paxos has dominated the discussion of consensus algorithms over the last decade.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately, Paxos is quite difficult to understand, inspite of numerous attempts to make it more approachable.Furthermore, its architecture requires complex changes to support practical systems. As a result, both systembuilders and students struggle with Paxos.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Our approach was unusual in that our primary goal was &lt;strong&gt;understandability&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We believe that Raft is superior to Paxos and other consensus algorithms, both for educational purposes and as a foundation for implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;replicated-state-machines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#replicated-state-machines&quot; aria-label=&quot;Anchor link for: replicated-state-machines&quot;&gt;üîó&lt;&#x2F;a&gt;Replicated state machines&lt;&#x2F;h2&gt;
&lt;p&gt;The main idea is to compute identical copies of the same state (i.e &lt;code&gt;x:3, y:9&lt;&#x2F;code&gt;) in case of machines&#x27;s failure. Most of the time, an ordered &lt;code&gt;wal&lt;&#x2F;code&gt; (write-ahead log) is used in the implementation, to hold the mutation (&lt;code&gt;x:4&lt;&#x2F;code&gt;). Keeping the replicated log consistent is the job of the consensus algorithm, here Raft.&lt;&#x2F;p&gt;
&lt;p&gt;Raft creates a true split between:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the consensus module,&lt;&#x2F;li&gt;
&lt;li&gt;the wal,&lt;&#x2F;li&gt;
&lt;li&gt;the state machine.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;img src=&quot;&#x2F;images&#x2F;notes-about-raft&#x2F;fig_1.png&quot; alt=&quot;fig1&quot; class=&quot;center&quot;&gt;
&lt;h2 id=&quot;what-s-wrong-with-paxos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-wrong-with-paxos&quot; aria-label=&quot;Anchor link for: what-s-wrong-with-paxos&quot;&gt;üîó&lt;&#x2F;a&gt;What‚Äôs wrong with Paxos?&lt;&#x2F;h2&gt;
&lt;p&gt;The paper is listing the drawbacks of Paxos:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;difficult to understand, and &lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;uploads&#x2F;prod&#x2F;2016&#x2F;12&#x2F;The-Part-Time-Parliament.pdf&quot;&gt;I can&#x27;t blame them&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;many details are missing from the paper to implement &lt;code&gt;Multi-Paxos&lt;&#x2F;code&gt; as the paper is mainly describing &lt;code&gt;single-decree Paxos&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;It is simpler and more efficient to design a system around a log, where new entries are appended sequentially in a constrained order.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As a result, practical systems bear little resemblance to Paxos. Each implementation begins with Paxos, discovers the difficulties in implementing it, and then develops a significantly different architecture. This is time-consuming and error-prone, and the difficulties of understanding Paxos exacerbate the problem. The following com-ment from the &lt;a href=&quot;https:&#x2F;&#x2F;static.googleusercontent.com&#x2F;media&#x2F;research.google.com&#x2F;en&#x2F;&#x2F;archive&#x2F;chubby-osdi06.pdf&quot;&gt;Chubby&lt;&#x2F;a&gt; implementers is typical:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;There are significant gaps between the description of the Paxos algorithm and the needs of a real-world system
the final system will be based on an un-proven protocol [4].&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;designing-for-understandability&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-for-understandability&quot; aria-label=&quot;Anchor link for: designing-for-understandability&quot;&gt;üîó&lt;&#x2F;a&gt;Designing for understandability&lt;&#x2F;h2&gt;
&lt;p&gt;Beside all the others goals of Raft:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a complete and practical foundation for system building,&lt;&#x2F;li&gt;
&lt;li&gt;must be safe under all conditions and available under typical operating conditions,&lt;&#x2F;li&gt;
&lt;li&gt;must be efficient for common operations,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;understandability&lt;&#x2F;strong&gt; was the most difficult challenge:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It must be possible for a large audience to understand the algorithm comfortably. In addition, it must be possible to develop intuitions about the algorithm, so that system builders can make the extensions that are inevitable in real-world implementations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;we divided problems into separate pieces that could be solved, explained, and understood relatively independently. For example, in Raft we separated leader election, log replication, safety, and membership changes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Our second approach was to simplify the state spaceby reducing the number of states to consider, making thesystem more coherent and eliminating nondeterminism where possible.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-raft-consensus-algorithm&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-raft-consensus-algorithm&quot; aria-label=&quot;Anchor link for: the-raft-consensus-algorithm&quot;&gt;üîó&lt;&#x2F;a&gt;The Raft consensus algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;Raft is heavily relying on the &lt;code&gt;leader&lt;&#x2F;code&gt; pattern:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft implements consensus by first electing a distinguished leader, then giving the leader complete responsibility for managing the replicated log.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The leader accepts log entries from clients, replicates them on other servers, and tells servers when it is safe to apply log entries to their state machines.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Thanks to this pattern, Raft is splitting the consensus problem into 3:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Leader election&lt;&#x2F;li&gt;
&lt;li&gt;Log replication&lt;&#x2F;li&gt;
&lt;li&gt;Safety&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raft-basics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raft-basics&quot; aria-label=&quot;Anchor link for: raft-basics&quot;&gt;üîó&lt;&#x2F;a&gt;Raft basics&lt;&#x2F;h3&gt;
&lt;p&gt;Each server can be in one of the three states:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leader&lt;&#x2F;strong&gt; handle all requests,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Follower&lt;&#x2F;strong&gt; passive member, they issue no requests on their own but simply respond to requests from leaders and candidates,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Candidate&lt;&#x2F;strong&gt; is used to elect a new leader.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Leader is elected through &lt;code&gt;election&lt;&#x2F;code&gt;: Each term (interval of time of arbitrary length packed with an number) begins with an election, in which one or more candidates attempt to become leader. If a candidate wins the election, then it serves as leader for the rest of the term. In the case of a split vote, the term will end with no leader; a new term (with a new election) will begin.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Terms act as a logical clock [14] in Raft.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Each server stores a current term number, which increases monotonically over time. Current terms are exchanged whenever servers communicate; if one server‚Äôs current term is smaller than the other‚Äôs, then it updates its current term to the larger value. If a candidate or leader discovers that its term is out of date, it immediately reverts to fol-lower state. If a server receives a request with a stale term number, it rejects the request.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;RPC&lt;&#x2F;code&gt; is used for communications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RequestVote RPCs&lt;&#x2F;strong&gt; are initiated by candidates during elections,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Append-Entries RPCs&lt;&#x2F;strong&gt; are initiated by leaders to replicate log en-tries and to provide a form of heartbeat.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;leader-election&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#leader-election&quot; aria-label=&quot;Anchor link for: leader-election&quot;&gt;üîó&lt;&#x2F;a&gt;Leader election&lt;&#x2F;h3&gt;
&lt;p&gt;A good vizualization is available &lt;a href=&quot;http:&#x2F;&#x2F;thesecretlivesofdata.com&#x2F;raft&#x2F;#election&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The key-point of the election are the fact that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nodes vote for themselves,&lt;&#x2F;li&gt;
&lt;li&gt;the term number is used to recover from failure,&lt;&#x2F;li&gt;
&lt;li&gt;election timeouts are randomized.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To begin an election, a follower increments its current term and transitions to candidate state. It then votes for itself and issues RequestVote RPCs in parallel to each of the other servers in the cluster. A candidate continues in this state until one of three things happens:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(a) it wins the election,&lt;&#x2F;li&gt;
&lt;li&gt;(b) another server establishes itself as leader,&lt;&#x2F;li&gt;
&lt;li&gt;(c) a period of time goes by with no winner.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft uses randomized election timeouts to ensure that split votes are rare and that they are resolved quickly. To prevent split votes in the first place, election timeouts are chosen randomly from a fixed interval (e.g., 150‚Äì300ms).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;log-replication&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#log-replication&quot; aria-label=&quot;Anchor link for: log-replication&quot;&gt;üîó&lt;&#x2F;a&gt;Log replication&lt;&#x2F;h3&gt;
&lt;p&gt;A good vizualization is available &lt;a href=&quot;http:&#x2F;&#x2F;thesecretlivesofdata.com&#x2F;raft&#x2F;#replication&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once a leader has been elected, it begins servicing client requests. Each client request contains a command to be executed by the replicated state machines. The leader appends the command to its log as a new entry, then issues AppendEntries RPCs in parallel to each of the other servers to replicate the entry. When the entry has been safely replicated (as described below), the leader applies the entry to its state machine and returns the result of that execution to the client.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The term numbers in log entries are used to detect inconsistencies between logs&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The leader decides when it is safe to apply a log entry to the state machines; such an entry is called committed. Raft guarantees that committed entries are durable and will eventually be executed by all of the available state machines.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Raft is implementing a lot of safety inside the log:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When sending an AppendEntries RPC, the leader includes the index and term of the entry in its log that immediately precedes the new entries. If the follower does not find an entry in its log with the same index and term, then it refuses the new entries&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is really interesting to be leader-failure proof. And for follower&#x27;s failure:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Raft, the leader handles inconsistencies by forcing the followers‚Äô logs to duplicate its own.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To bring a follower‚Äôs log into consistency with its own,the leader must find the latest log entry where the two logs agree, delete any entries in the follower‚Äôs log after that point, and send the follower all of the leader‚Äôs entries after that point.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;safety&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#safety&quot; aria-label=&quot;Anchor link for: safety&quot;&gt;üîó&lt;&#x2F;a&gt;Safety&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;leader-election-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#leader-election-1&quot; aria-label=&quot;Anchor link for: leader-election-1&quot;&gt;üîó&lt;&#x2F;a&gt;Leader election&lt;&#x2F;h3&gt;
&lt;p&gt;As Raft guarantees that all the committed entries are available on all followers, log entries only flow in one di-rection, from leaders to followers, and leaders never over-write existing entries in their logs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft uses the voting process to prevent a candidate from winning an election unless its log contains all committed entries. A candidate must contact a majority of the cluster in order to be elected, which means that every committed entry must be present in at least one of those servers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft determines which of two logs is more up-to-date by comparing the index and term of the last entries in the logs. If the logs have last entries with different terms, then the log with the later term is more up-to-date. If the log send with the same term, then whichever log is longer is more up-to-date.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;committing-entries-from-previous-terms&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#committing-entries-from-previous-terms&quot; aria-label=&quot;Anchor link for: committing-entries-from-previous-terms&quot;&gt;üîó&lt;&#x2F;a&gt;Committing entries from previous terms&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft never commits log entries from previous terms by counting replicas. Only log entries from the leader‚Äôs current term are committed by counting replicas.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This behavior avoids future leaders to attempt to finish replicating an entry where the leader crashes before committing an entry.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;follower-and-candidate-crashes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#follower-and-candidate-crashes&quot; aria-label=&quot;Anchor link for: follower-and-candidate-crashes&quot;&gt;üîó&lt;&#x2F;a&gt;Follower and candidate crashes&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If a follower or candidate crashes, then future RequestVote and AppendEntries RPCs sent to it will fail. Raft handles these failures by retrying indefinitely.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;cluster-membership-changes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cluster-membership-changes&quot; aria-label=&quot;Anchor link for: cluster-membership-changes&quot;&gt;üîó&lt;&#x2F;a&gt;Cluster membership changes&lt;&#x2F;h2&gt;
&lt;p&gt;This section presents how to do cluster configuration(the set of servers participating in the consensus algorithm). Raft implements a two-phase approach:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Raft the cluster first switches to a transitional configuration we call joint consensus; once the joint consensus has been committed,the system then transitions to the new configuration. The joint consensus combines both the old and new configurations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Log entries are replicated to all servers in both con-figurations,&lt;&#x2F;li&gt;
&lt;li&gt;Any server from either configuration may serve asleader,&lt;&#x2F;li&gt;
&lt;li&gt;Agreement (for elections and entry commitment) requires separate majorities from both the old and new configurations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;log-compaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#log-compaction&quot; aria-label=&quot;Anchor link for: log-compaction&quot;&gt;üîó&lt;&#x2F;a&gt;Log compaction&lt;&#x2F;h2&gt;
&lt;p&gt;As the WAL holds the commands, we need to compact it. Raft is using snapshots as describe here:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;notes-about-raft&#x2F;fig_3.png&quot; alt=&quot;fig3&quot; class=&quot;center&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;the leader must occasionally send snapshots to followers that lag behind.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is useful for slow follower or a new server joining the cluster.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The leader uses a new RPC called InstallSnapshot to send snapshots to followers that are too far behind.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;client-interaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-interaction&quot; aria-label=&quot;Anchor link for: client-interaction&quot;&gt;üîó&lt;&#x2F;a&gt;Client interaction&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Clients of Raft send all of their requests to the leader. When a client first starts up, it connects to a randomly-chosen server. If the client‚Äôs first choice is not the leader,that server will reject the client‚Äôs request and supply information about the most recent leader it has heard from.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">consensus</category>
          <category domain="tag">raft</category>
          <category domain="tag">algorithms</category>
          <category domain="tag">notes</category>
      </item>
      <item>
          <title>Announcing Kafka-on-Pulsar: bring native Kafka protocol support to Apache Pulsar</title>
          <pubDate>Tue, 24 Mar 2020 10:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/announcing-kop/</link>
          <guid>https://pierrezemb.fr/posts/announcing-kop/</guid>
          <description xml:base="https://pierrezemb.fr/posts/announcing-kop/">&lt;blockquote&gt;
&lt;p&gt;This is a repost from &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;blog&#x2F;announcing-kafka-on-pulsar-bring-native-kafka-protocol-support-to-apache-pulsar&#x2F;&quot; title=&quot;Permalink to announcing KoP&quot;&gt;OVHcloud&#x27;s official blogpost.&lt;&#x2F;a&gt;, please read it there to support my company. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LostInBrittany&#x2F;&quot;&gt;Horacio Gonzalez&lt;&#x2F;a&gt; for the awesome drawings!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This post has been published on both the StreamNative and OVHcloud blogs and was co-authored by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sijieg&quot;&gt;Sijie Guo&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Jia_Zhai&quot;&gt;Jia Zhai&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Pierre Zemb&lt;&#x2F;a&gt;. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LostInBrittany&quot;&gt;Horacio Gonzalez&lt;&#x2F;a&gt; for the illustrations!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;announcing-kop&#x2F;kop-1.png&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We are excited to announce that StreamNative and OVHcloud are open-sourcing &quot;Kafka on Pulsar&quot; (KoP). KoP brings the native Apache Kafka protocol support to Apache Pulsar by introducing a Kafka protocol handler on Pulsar brokers. By adding the KoP protocol handler to your existing Pulsar cluster, you can now migrate your existing Kafka applications and services to Pulsar without modifying the code. This enables Kafka applications to leverage Pulsar&#x27;s powerful features, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Streamlined operations with enterprise-grade multi-tenancy&lt;&#x2F;li&gt;
&lt;li&gt;Simplified operations with a rebalance-free architecture&lt;&#x2F;li&gt;
&lt;li&gt;Infinite event stream retention with Apache BookKeeper and tiered storage&lt;&#x2F;li&gt;
&lt;li&gt;Serverless event processing with Pulsar Functions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-is-apache-pulsar&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-apache-pulsar&quot; aria-label=&quot;Anchor link for: what-is-apache-pulsar&quot;&gt;üîó&lt;&#x2F;a&gt;What is Apache Pulsar?&lt;&#x2F;h2&gt;
&lt;p&gt;Apache Pulsar is an event streaming platform designed from the ground up to be cloud-native- deploying a multi-layer and segment-centric architecture. The architecture separates serving and storage into different layers, making the system container-friendly. The cloud-native architecture provides scalability, availability and resiliency and enables companies to expand their offerings with real-time data-enabled solutions. Pulsar has gained wide adoption since it was open-sourced in 2016 and was designated an Apache Top-Level project in 2018.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-need-behind-kop&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-need-behind-kop&quot; aria-label=&quot;Anchor link for: the-need-behind-kop&quot;&gt;üîó&lt;&#x2F;a&gt;The need behind KoP&lt;&#x2F;h2&gt;
&lt;p&gt;Pulsar provides a unified messaging model for both queueing and streaming workloads. Pulsar implemented its own protobuf-based binary protocol to provide high performance and low latency. This choice of protobuf makes it convenient to implement Pulsar &lt;a href=&quot;https:&#x2F;&#x2F;pulsar.apache.org&#x2F;docs&#x2F;en&#x2F;client-libraries&#x2F;&quot;&gt;clients&lt;&#x2F;a&gt; and the project already supports Java, Go, Python and C++ languages alongside &lt;a href=&quot;https:&#x2F;&#x2F;pulsar.apache.org&#x2F;docs&#x2F;en&#x2F;client-libraries&#x2F;#thirdparty-clients&quot;&gt;thirdparty clients&lt;&#x2F;a&gt; provided by the community. However, existing applications written using other messaging protocols had to be rewritten to adopt Pulsar&#x27;s new unified messaging protocol.&lt;&#x2F;p&gt;
&lt;p&gt;To address this, the Pulsar community developed applications to facilitate the migration to Pulsar from other messaging systems. For example, Pulsar provides a &lt;a href=&quot;http:&#x2F;&#x2F;(https:&#x2F;&#x2F;pulsar.apache.org&#x2F;docs&#x2F;en&#x2F;adaptors-kafka&quot;&gt;Kafka wrapper&lt;&#x2F;a&gt; on Kafka Java API, which allows existing applications that already use Kafka Java client switching from Kafka to Pulsar &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Cy9ev9nAZpI&quot;&gt;without code change&lt;&#x2F;a&gt;. Pulsar also has a rich connector ecosystem, connecting Pulsar with other data systems. Yet, there was still a strong demand from those looking to switch from other Kafka applications to Pulsar.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;streamnative-and-ovhcloud-s-collaboration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#streamnative-and-ovhcloud-s-collaboration&quot; aria-label=&quot;Anchor link for: streamnative-and-ovhcloud-s-collaboration&quot;&gt;üîó&lt;&#x2F;a&gt;StreamNative and OVHcloud&#x27;s collaboration&lt;&#x2F;h2&gt;
&lt;p&gt;StreamNative was receiving a lot of inbound requests for help migrating from other messaging systems to Pulsar and recognized the need to support other messaging protocols (such as AMQP and Kafka) natively on Pulsar. StreamNative began working on introducing a general protocol handler framework in Pulsar that would allow developers using other messaging protocols to use Pulsar.&lt;&#x2F;p&gt;
&lt;p&gt;Internally, OVHcloud had been running Apache Kafka for years, but despite their experience operating multiple clusters with millions of messages per second on Kafka, there were painful operational challenges. For example, putting thousands of topics from thousands of users into a single cluster was difficult without multi-tenancy.&lt;&#x2F;p&gt;
&lt;p&gt;As a result, OVHcloud decided to shift and build the foundation of their topic-as-a-service product, called ioStream, on Pulsar instead of Kafka. Pulsar&#x27;s multi-tenancy and the overall architecture with Apache Bookkeeper simplified operations compared to Kafka.&lt;&#x2F;p&gt;
&lt;p&gt;After spawning the first region, OVHcloud decided to implement it as a proof-of-concept proxy capable of transforming the Kafka protocol to Pulsar on the fly. During this process, OVHcloud discovered that StreamNative was working on bringing the Kafka protocol natively to Pulsar, and they joined forces to develop KoP.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;announcing-kop&#x2F;kop-2.png&quot; alt=&quot;kop image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;KoP was developed to provide a streamlined and comprehensive solution leveraging Pulsar and BookKeeper&#x27;s event stream storage infrastructure and Pulsar&#x27;s pluggable protocol handler framework. KoP is implemented as a protocol handler plugin with protocol name &quot;kafka&quot;. It can be installed and configured to run as part of Pulsar brokers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-distributed-log&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-distributed-log&quot; aria-label=&quot;Anchor link for: the-distributed-log&quot;&gt;üîó&lt;&#x2F;a&gt;The distributed log&lt;&#x2F;h2&gt;
&lt;p&gt;Both Pulsar and Kafka share a very similar data model around &lt;strong&gt;log&lt;&#x2F;strong&gt; for both pub&#x2F;sub messaging and event streaming. For example, both are built on top of a distributed log. Kafka implements the distributed log in a partition-basis architecture, where a distributed log (a partition in Kafka) is designated to store in a set of brokers, while Pulsar deploys a &lt;strong&gt;segment&lt;&#x2F;strong&gt;-based architecture to implement its distributed log by leveraging Apache BookKeeper as its scale-out segment storage layer. Pulsar&#x27;s &lt;em&gt;segment&lt;&#x2F;em&gt; based architecture provides benefits such as rebalance-free, instant scalability, and infinite event stream storage. You can learn more about the key differences between Pulsar and Kafka in &lt;a href=&quot;https:&#x2F;&#x2F;www.splunk.com&#x2F;en_us&#x2F;blog&#x2F;it&#x2F;comparing-pulsar-and-kafka-how-a-segment-based-architecture-delivers-better-performance-scalability-and-resilience.html&quot;&gt;this Splunk blog&lt;&#x2F;a&gt; and in &lt;a href=&quot;http:&#x2F;&#x2F;bookkeeper.apache.org&#x2F;distributedlog&#x2F;technical-review&#x2F;2016&#x2F;09&#x2F;19&#x2F;kafka-vs-distributedlog.html&quot;&gt;this blog from the Bookkeeper project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Since both of the systems are built on a similar data model, a distributed log, it is very simple to implement a Kafka-compatible protocol handler by leveraging Pulsar&#x27;s distributed log storage and its pluggable protocol handler framework (introduced in the 2.5.0 release).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementations&quot; aria-label=&quot;Anchor link for: implementations&quot;&gt;üîó&lt;&#x2F;a&gt;Implementations&lt;&#x2F;h2&gt;
&lt;p&gt;The implementation is done by comparing the protocols between Pulsar and Kafka. We found that there are a lot of similarities between these two protocols. Both protocols are comprised of the following operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topic Lookup&lt;&#x2F;strong&gt;: All the clients connect to any broker to lookup the metadata (i.e. the owner broker) of the topics. After fetching the metadata, the clients establish persistent TCP connections to the owner brokers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Produce&lt;&#x2F;strong&gt;: The clients talk to the &lt;strong&gt;owner&lt;&#x2F;strong&gt; broker of a topic partition to append the messages to a distributed log.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consume&lt;&#x2F;strong&gt;: The clients talk to the &lt;strong&gt;owner&lt;&#x2F;strong&gt; broker of a topic partition to read the messages from a distributed log.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Offset&lt;&#x2F;strong&gt;: The messages produced to a topic partition are assigned with an offset. The offset in Pulsar is called MessageId. Consumers can use &lt;strong&gt;offsets&lt;&#x2F;strong&gt; to seek to a given position within the log to read messages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consumption State&lt;&#x2F;strong&gt;: Both systems maintain the consumption state for consumers within a subscription (or a consumer group in Kafka). The consumption state is stored in __offsets topic in Kafka, while the consumption state is stored as cursors in Pulsar.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As you can see, these are all the primitive operations provided by a scale-out distributed log storage such as Apache BookKeeper. The core capabilities of Pulsar are implemented on top of Apache BookKeeper. Thus it is pretty easy and straightforward to implement the Kafka concepts by using the existing components that Pulsar has developed on BookKeeper.&lt;br&gt;
The following figure illustrates how we add the Kafka protocol support within Pulsar. We are introducing a new &lt;strong&gt;Protocol Handler&lt;&#x2F;strong&gt;which implements the Kafka wire protocol by leveraging the existing components (such as topic discovery, the distributed log library ‚Äì ManagedLedger, cursors and etc) that Pulsar already has.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;announcing-kop&#x2F;kop-3.png&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;topics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topics&quot; aria-label=&quot;Anchor link for: topics&quot;&gt;üîó&lt;&#x2F;a&gt;Topics&lt;&#x2F;h3&gt;
&lt;p&gt;In Kafka, all the topics are stored in one flat namespace. But in Pulsar, topics are organized in hierarchical multi-tenant namespaces. We introduce a setting &lt;em&gt;kafkaNamespace&lt;&#x2F;em&gt; in broker configuration to allow the administrator configuring to map Kafka topics to Pulsar topics.&lt;&#x2F;p&gt;
&lt;p&gt;In order to let Kafka users leverage the multi-tenancy feature of Apache Pulsar, a Kafka user can specify a Pulsar tenant and namespace as its SASL username when it uses SASL authentication mechanism to authenticate a Kafka client.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;message-id-and-offset&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#message-id-and-offset&quot; aria-label=&quot;Anchor link for: message-id-and-offset&quot;&gt;üîó&lt;&#x2F;a&gt;Message ID and offset&lt;&#x2F;h3&gt;
&lt;p&gt;In Kafka, each message is assigned with an offset once it is successfully produced to a topic partition. In Pulsar, each message is assigned with a &lt;code&gt;MessageID&lt;&#x2F;code&gt;. The message id consists of 3 components, &lt;em&gt;ledger-id&lt;&#x2F;em&gt;, &lt;em&gt;entry-id&lt;&#x2F;em&gt;, and &lt;em&gt;batch-index&lt;&#x2F;em&gt;. We are using the same approach in Pulsar-Kafka wrapper to convert a Pulsar MessageID to an offset and vice versa.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;messages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#messages&quot; aria-label=&quot;Anchor link for: messages&quot;&gt;üîó&lt;&#x2F;a&gt;Messages&lt;&#x2F;h3&gt;
&lt;p&gt;Both a Kafka message and a Pulsar message have key, value, timestamp, and headers (note: this is called &#x27;properties&#x27; in Pulsar). We convert these fields automatically between Kafka messages and Pulsar messages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;topic-lookup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topic-lookup&quot; aria-label=&quot;Anchor link for: topic-lookup&quot;&gt;üîó&lt;&#x2F;a&gt;Topic lookup&lt;&#x2F;h3&gt;
&lt;p&gt;We use the same topic lookup approach for the Kafka request handler as the Pulsar request handler. The request handler does topic discovery to lookup all the ownerships for the requested topic partitions and responds with the ownership information as part of Kafka TopicMetadata back to Kafka clients.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;produce-messages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#produce-messages&quot; aria-label=&quot;Anchor link for: produce-messages&quot;&gt;üîó&lt;&#x2F;a&gt;Produce Messages&lt;&#x2F;h3&gt;
&lt;p&gt;When the Kafka request handler receives produced messages from a Kafka client, it converts Kafka messages to Pulsar messages by mapping the fields (i.e. key, value, timestamp and headers) one by one, and uses the ManagedLedger append API to append those converted Pulsar messages to BookKeeper. Converting Kafka messages to Pulsar messages allows existing Pulsar applications to consume messages produced by Kafka clients.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;consume-messages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consume-messages&quot; aria-label=&quot;Anchor link for: consume-messages&quot;&gt;üîó&lt;&#x2F;a&gt;Consume Messages&lt;&#x2F;h3&gt;
&lt;p&gt;When the Kafka request handler receives a consumer request from a Kafka client, it opens a non-durable cursor to read the entries starting from the requested offset. The Kafka request handler converts the Pulsar messages back to Kafka messages to allow existing Kafka applications to consume the messages produced by Pulsar clients.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;group-coordinator-offsets-management&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#group-coordinator-offsets-management&quot; aria-label=&quot;Anchor link for: group-coordinator-offsets-management&quot;&gt;üîó&lt;&#x2F;a&gt;Group coordinator &amp;amp; offsets management&lt;&#x2F;h3&gt;
&lt;p&gt;The most challenging part is to implement the group coordinator and offsets management. Because Pulsar doesn&#x27;t have a centralized group coordinator for assigning partitions to consumers of a consumer group and managing offsets for each consumer group. In Pulsar, the partition assignment is managed by broker on a per-partition basis, and the offset management is done by storing the acknowledgements in cursors by the owner broker of that partition.&lt;&#x2F;p&gt;
&lt;p&gt;It is difficult to align the Pulsar model with the Kafka model. Hence, for the sake of providing full compatibility with Kafka clients, we implemented the Kafka group coordinator by storing the coordinator group changes and offsets in a system topic called *public&#x2F;kafka&#x2F;*&lt;em&gt;offsets&lt;&#x2F;em&gt; in Pulsar.&lt;&#x2F;p&gt;
&lt;p&gt;This allows us to bridge the gap between Pulsar and Kafka and allows people to use existing Pulsar tools and policies to manage subscriptions and monitor Kafka consumers. We add a background thread in the implemented group coordinator to periodically sync offset updates from the system topic to Pulsar cursors. Hence a Kafka consumer group is effectively treated as a Pulsar subscription. All the existing Pulsar toolings can be used for managing Kafka consumer groups as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bridge-two-popular-messaging-ecosystems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bridge-two-popular-messaging-ecosystems&quot; aria-label=&quot;Anchor link for: bridge-two-popular-messaging-ecosystems&quot;&gt;üîó&lt;&#x2F;a&gt;Bridge two popular messaging ecosystems&lt;&#x2F;h2&gt;
&lt;p&gt;At both companies, we value customer success. We believe that providing a native Kafka protocol on Apache Pulsar will reduce the barriers for people adopting Pulsar to achieve their business success. By integrating two popular event streaming ecosystems, KoP unlocks new use cases. Customers can leverage advantages from each ecosystem and build a truly unified event streaming platform with Apache Pulsar to accelerate the development of real-time applications and services.&lt;&#x2F;p&gt;
&lt;p&gt;With KoP, a log collector can continue collecting log data from its sources and producing messages to Apache Pulsar using existing Kafka integrations. The downstream applications can use Pulsar Functions to process the events arriving in the system to do serverless event streaming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#try-it-out&quot; aria-label=&quot;Anchor link for: try-it-out&quot;&gt;üîó&lt;&#x2F;a&gt;Try it out&lt;&#x2F;h2&gt;
&lt;p&gt;KoP is open sourced under Apache License V2 in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;streamnative&#x2F;kop&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;streamnative&#x2F;kop&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are looking forward to your issues, and PRs. You can also &lt;a href=&quot;https:&#x2F;&#x2F;apache-pulsar.herokuapp.com&#x2F;&quot;&gt;join #kop channel in Pulsar Slack&lt;&#x2F;a&gt; to discuss all things about Kafka-on-Pulsar.&lt;&#x2F;p&gt;
&lt;p&gt;StreamNative and OVHcloud are also hosting a webinar about KoP on March 31. If you are interested in learning more details about KoP,&lt;a href=&quot;https:&#x2F;&#x2F;zoom.us&#x2F;webinar&#x2F;register&#x2F;6515842602644&#x2F;WN_l_i-3ekDSg6PwPFn7tqRvA&quot;&gt;please sign up&lt;&#x2F;a&gt;. Looking forward to meeting you online.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;announcing-kop&#x2F;kop-4.png&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#thanks&quot; aria-label=&quot;Anchor link for: thanks&quot;&gt;üîó&lt;&#x2F;a&gt;Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;The KoP project was originally initiated by StreamNative. The OVHcloud team joined the project to collaborate on the development of the KoP project. Many thanks to Pierre Zemb and Steven Le Roux from OVHcloud for their contributions to this project!&lt;&#x2F;p&gt;
</description>
          <category domain="tag">messaging</category>
          <category domain="tag">distributed</category>
          <category domain="tag">kafka</category>
          <category domain="tag">pulsar</category>
          <category domain="tag">opensource</category>
      </item>
      <item>
          <title>Contributing to Apache HBase: custom data balancing</title>
          <pubDate>Fri, 14 Feb 2020 10:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/hbase-custom-data-balancing/</link>
          <guid>https://pierrezemb.fr/posts/hbase-custom-data-balancing/</guid>
          <description xml:base="https://pierrezemb.fr/posts/hbase-custom-data-balancing/">&lt;blockquote&gt;
&lt;p&gt;This is a repost from &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;blog&#x2F;contributing-to-apache-hbase-custom-data-balancing&#x2F;&quot; title=&quot;Permalink to Contributing to Apache HBase: custom data balancing&quot;&gt;OVHcloud&#x27;s official blogpost.&lt;&#x2F;a&gt;, please read it there to support my company. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LostInBrittany&#x2F;&quot;&gt;Horacio Gonzalez&lt;&#x2F;a&gt; for the awesome drawings!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In today&#x27;s blogpost, we&#x27;re going to take a look at our upstream
contribution to Apache HBase&#x27;s stochastic load balancer, based on our
experience of running HBase clusters to support OVHcloud&#x27;s monitoring.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-1.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-context&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-context&quot; aria-label=&quot;Anchor link for: the-context&quot;&gt;üîó&lt;&#x2F;a&gt;The context&lt;&#x2F;h2&gt;
&lt;p&gt;Have you ever wondered how:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we generate the graphs for your OVHcloud server or web hosting package?&lt;&#x2F;li&gt;
&lt;li&gt;our internal teams monitor their own servers and applications?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;All internal teams are constantly gathering telemetry and monitoring data&lt;&#x2F;strong&gt; and sending them to a &lt;strong&gt;dedicated team,&lt;&#x2F;strong&gt; who are responsible for &lt;strong&gt;handling all the metrics and logs generated by OVHcloud&#x27;s infrastructure&lt;&#x2F;strong&gt;: the Observability team.&lt;&#x2F;p&gt;
&lt;p&gt;We tried a lot of different &lt;strong&gt;Time Series databases&lt;&#x2F;strong&gt;, and eventually chose &lt;a href=&quot;https:&#x2F;&#x2F;warp10.io&#x2F;&quot;&gt;Warp10&lt;&#x2F;a&gt; to handle our workloads. &lt;strong&gt;Warp10&lt;&#x2F;strong&gt; can be integrated with the various &lt;strong&gt;big-data solutions&lt;&#x2F;strong&gt; provided by the &lt;a href=&quot;https:&#x2F;&#x2F;www.apache.org&#x2F;&quot;&gt;Apache Foundation.&lt;&#x2F;a&gt; In our case, we use &lt;a href=&quot;http:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase&lt;&#x2F;a&gt; as the long-term storage datastore for our metrics.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase&lt;&#x2F;a&gt;, a datastore built on top of &lt;a href=&quot;http:&#x2F;&#x2F;hadoop.apache.org&#x2F;&quot;&gt;Apache Hadoop&lt;&#x2F;a&gt;, provides &lt;strong&gt;an elastic, distributed, key-ordered map.&lt;&#x2F;strong&gt; As such, one of the key features of Apache HBase for us is the ability to &lt;strong&gt;scan&lt;&#x2F;strong&gt;, i.e. retrieve a range of keys. Thanks to this feature, we can fetch &lt;strong&gt;thousands of datapoints in an optimised way&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have our own dedicated clusters, the biggest of which has more than 270 nodes to spread our workloads:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;between 1.6 and 2 million writes per second, 24&#x2F;7&lt;&#x2F;li&gt;
&lt;li&gt;between 4 and 6 million reads per second&lt;&#x2F;li&gt;
&lt;li&gt;around 300TB of telemetry, stored within Apache HBase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As you can probably imagine, storing 300TB of data in 270 nodes comes with some challenges regarding repartition, as &lt;strong&gt;every&lt;&#x2F;strong&gt; &lt;strong&gt;bit is hot data, and should be accessible at any time&lt;&#x2F;strong&gt;. Let&#x27;s dive in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-balancing-work-in-apache-hbase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-balancing-work-in-apache-hbase&quot; aria-label=&quot;Anchor link for: how-does-balancing-work-in-apache-hbase&quot;&gt;üîó&lt;&#x2F;a&gt;How does balancing work in Apache HBase?&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into the balancer, let&#x27;s take a look at how it works. In Apache HBase, data is split into shards called &lt;code&gt;Regions&lt;&#x2F;code&gt;, and distributed through &lt;code&gt;RegionServers&lt;&#x2F;code&gt;. The number of regions will increase as the data is coming in, and regions will be split as a result. This is where the &lt;code&gt;Balancer&lt;&#x2F;code&gt; comes in. It will &lt;strong&gt;move regions&lt;&#x2F;strong&gt; to avoid hotspotting a single &lt;code&gt;RegionServer&lt;&#x2F;code&gt; and effectively distribute the load.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-2.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The actual implementation, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;master&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java&quot;&gt;StochasticBalancer&lt;&#x2F;a&gt;, uses &lt;strong&gt;a cost-based approach:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It first computes the &lt;strong&gt;overall cost&lt;&#x2F;strong&gt; of the cluster, by looping through &lt;code&gt;cost functions&lt;&#x2F;code&gt;. Every cost function &lt;strong&gt;returns a number between 0 and 1 inclusive&lt;&#x2F;strong&gt;, where 0 is the lowest cost-best solution, and 1 is the highest possible cost and worst solution. Apache Hbase is coming with several cost functions, which are measuring things like region load, table load, data locality, number of regions per RegionServers... The computed costs are &lt;strong&gt;scaled by their respective coefficients, defined in the configuration&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Now that the initial cost is computed, we can try to &lt;code&gt;Mutate&lt;&#x2F;code&gt; our cluster. For this, the Balancer creates a random &lt;code&gt;nextAction&lt;&#x2F;code&gt;, which could be something like &lt;strong&gt;swapping two regions&lt;&#x2F;strong&gt;, or &lt;strong&gt;moving one region to another RegionServer&lt;&#x2F;strong&gt;. The action is &lt;strong&gt;applied&lt;&#x2F;strong&gt; &lt;strong&gt;virtually&lt;&#x2F;strong&gt; , and then the &lt;strong&gt;new cost is calculated&lt;&#x2F;strong&gt;. If the new cost is lower than our previous one, the action is stored. If not, it is skipped. This operation is repeated &lt;code&gt;thousands of times&lt;&#x2F;code&gt;, hence the &lt;code&gt;Stochastic&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;At the end, &lt;strong&gt;the list of valid actions is applied to the actual cluster.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;what-was-not-working-for-us&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-not-working-for-us&quot; aria-label=&quot;Anchor link for: what-was-not-working-for-us&quot;&gt;üîó&lt;&#x2F;a&gt;What was not working for us?&lt;&#x2F;h2&gt;
&lt;p&gt;We found out that &lt;strong&gt;for our specific use case&lt;&#x2F;strong&gt;, which involved:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single table&lt;&#x2F;li&gt;
&lt;li&gt;Dedicated Apache HBase and Apache Hadoop, &lt;strong&gt;tailored for our requirements&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Good key distribution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;the number of regions per RegionServer was the real limit for us&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Even if the balancing strategy seems simple, &lt;strong&gt;we do think that being able to run an Apache HBase cluster on heterogeneous hardware is vital&lt;&#x2F;strong&gt;, especially in cloud environments, because you &lt;strong&gt;may not be able to buy the same server specs again in the future.&lt;&#x2F;strong&gt;
In our earlier example, our cluster grew from 80 to ~250 machines in
four years. Throughout that time, we bought new dedicated server
references, and even tested some special internal references.&lt;&#x2F;p&gt;
&lt;p&gt;We ended-up with differents groups of hardware: &lt;strong&gt;some servers can handle only 180 regions, whereas the biggest can handle more than 900&lt;&#x2F;strong&gt;. Because of this disparity, we had to disable the Load Balancer to avoid the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;master&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java#L1194&quot;&gt;RegionCountSkewCostFunction&lt;&#x2F;a&gt;, which would try to bring all RegionServers to the same number of regions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-3.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two years ago we developed some internal tools, which are responsible
for load balancing regions across RegionServers. The tooling worked
really good for our use case, simplifying the day-to-day operation of
our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Open source is at the DNA of OVHcloud&lt;&#x2F;strong&gt;, and that means that we build our tools on open source software, but also that we &lt;strong&gt;contribute&lt;&#x2F;strong&gt;
and give it back to the community. When we talked around, we saw that
we weren&#x27;t the only one concerned by the heterogenous cluster problem.
We decided to rewrite our tooling to make it more general, and to &lt;strong&gt;contribute&lt;&#x2F;strong&gt; it &lt;strong&gt;directly upstream&lt;&#x2F;strong&gt; to the HBase project &lt;strong&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-contributions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#our-contributions&quot; aria-label=&quot;Anchor link for: our-contributions&quot;&gt;üîó&lt;&#x2F;a&gt;Our contributions&lt;&#x2F;h2&gt;
&lt;p&gt;The first contribution was pretty simple, the cost function list was a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;8cb531f207b9f9f51ab1509655ae59701b66ac37&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java#L199-L213&quot;&gt;constant&lt;&#x2F;a&gt;. We &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;commit&#x2F;836f26976e1ad8b35d778c563067ed0614c026e9&quot;&gt;added the possibility to load custom cost functions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The second contribution was about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;commit&#x2F;42d535a57a75b58f585b48df9af9c966e6c7e46a&quot;&gt;adding an optional costFunction to balance regions according to a capacity rule&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-it-works&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-works&quot; aria-label=&quot;Anchor link for: how-does-it-works&quot;&gt;üîó&lt;&#x2F;a&gt;How does it works?&lt;&#x2F;h2&gt;
&lt;p&gt;The balancer will load a file containing lines of rules. &lt;strong&gt;A rule is composed of a regexp for hostname, and a limit.&lt;&#x2F;strong&gt; For example, we could have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rs[0-9] 200
&lt;&#x2F;span&gt;&lt;span&gt;rs1[0-9] 50
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;RegionServers with &lt;strong&gt;hostnames matching the first rules will have a limit of 200&lt;&#x2F;strong&gt;, and &lt;strong&gt;the others 50&lt;&#x2F;strong&gt;. If there&#x27;s no match, a default is set.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to these rule, we have two key pieces of information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;max number of regions for this cluster&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the *&lt;em&gt;rules for each servers&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;HeterogeneousRegionCountCostFunction&lt;&#x2F;code&gt; will try to &lt;strong&gt;balance regions, according to their capacity.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take an example... Imagine that we have 20 RS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;10 RS, named &lt;code&gt;rs0&lt;&#x2F;code&gt; to &lt;code&gt;rs9&lt;&#x2F;code&gt;, loaded with 60 regions each, which can each handle 200 regions.&lt;&#x2F;li&gt;
&lt;li&gt;10 RS, named &lt;code&gt;rs10&lt;&#x2F;code&gt; to &lt;code&gt;rs19&lt;&#x2F;code&gt;, loaded with 60 regions each, which can each handle 50 regions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, based on the following rules:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rs[0-9] 200
&lt;&#x2F;span&gt;&lt;span&gt;rs1[0-9] 50
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;... we can see that the &lt;strong&gt;second group is overloaded&lt;&#x2F;strong&gt;, whereas the first group has plenty of space.&lt;&#x2F;p&gt;
&lt;p&gt;We know that we can handle a maximum of &lt;strong&gt;2,500 regions&lt;&#x2F;strong&gt; (200√ó10 + 50√ó10), and we have currently &lt;strong&gt;1,200 regions&lt;&#x2F;strong&gt; (60√ó20). As such, the &lt;code&gt;HeterogeneousRegionCountCostFunction&lt;&#x2F;code&gt; will understand that the cluster is &lt;strong&gt;full at 48.0%&lt;&#x2F;strong&gt; (1200&#x2F;2500). Based on this information, we will then &lt;strong&gt;try to put all the RegionServers at ~48% of the load, according to the rules.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-4.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-to-next&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-to-next&quot; aria-label=&quot;Anchor link for: where-to-next&quot;&gt;üîó&lt;&#x2F;a&gt;Where to next?&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to Apache HBase&#x27;s contributors, our patches are now &lt;strong&gt;merged&lt;&#x2F;strong&gt; into the master branch. As soon as Apache HBase maintainers publish a new release, we will deploy and use it at scale. This &lt;strong&gt;will allow more automation on our side, and ease operations for the Observability Team.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Contributing was an awesome journey. What I love most about open
source is the opportunity ability to contribute back, and build stronger
software. We &lt;strong&gt;had an opinion&lt;&#x2F;strong&gt; about how a particular issue should addressed, but &lt;strong&gt;the discussions with the community helped us to refine it&lt;&#x2F;strong&gt;. We spoke with e &lt;strong&gt;ngineers from other companies, who were struggling with Apache HBase&#x27;s cloud deployments, just as we were&lt;&#x2F;strong&gt;, and thanks to those exchanges, &lt;strong&gt;our contribution became more and more relevant.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">distributed</category>
          <category domain="tag">hbase</category>
          <category domain="tag">performance</category>
          <category domain="tag">opensource</category>
      </item>
      <item>
          <title>Notes about FoundationDB</title>
          <pubDate>Thu, 30 Jan 2020 10:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/notes-about-foundationdb/</link>
          <guid>https://pierrezemb.fr/posts/notes-about-foundationdb/</guid>
          <description xml:base="https://pierrezemb.fr/posts/notes-about-foundationdb/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;fdb-white.jpg&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;notes&#x2F;&quot;&gt;Notes About&lt;&#x2F;a&gt; is a blogpost serie  you will find a lot of &lt;strong&gt;links, videos, quotes, podcasts to click on&lt;&#x2F;strong&gt; about a specific topic. Today we will discover FoundationDB.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;overview-of-foundationdb&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview-of-foundationdb&quot; aria-label=&quot;Anchor link for: overview-of-foundationdb&quot;&gt;üîó&lt;&#x2F;a&gt;Overview of FoundationDB&lt;&#x2F;h2&gt;
&lt;p&gt;As stated in the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;index.html&quot;&gt;official documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB is a distributed database designed to handle large volumes of structured data across clusters of commodity servers. It organizes data as an ordered key-value store and employs ACID transactions for all operations. It is especially well-suited for read&#x2F;write workloads but also has excellent performance for write-intensive workloads.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It has strong key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-model data store&lt;&#x2F;li&gt;
&lt;li&gt;Easily scalable and fault tolerant&lt;&#x2F;li&gt;
&lt;li&gt;Industry-leading performance&lt;&#x2F;li&gt;
&lt;li&gt;Open source.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From a database dialect, it provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jepsen.io&#x2F;consistency&#x2F;models&#x2F;strict-serializable&quot;&gt;strict serializability&lt;&#x2F;a&gt;(operations appear to have occurred in some order),&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;spanner&#x2F;docs&#x2F;true-time-external-consistency&quot;&gt;external consistency&lt;&#x2F;a&gt;(For any two transactions, T1 and T2, if T2 starts to commit after T1 finishes committing, then the timestamp for T2 is greater than the timestamp for T1).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-story&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-story&quot; aria-label=&quot;Anchor link for: the-story&quot;&gt;üîó&lt;&#x2F;a&gt;The story&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB started as a company in 2009, and then &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2015&#x2F;03&#x2F;24&#x2F;apple-acquires-durable-database-company-foundationdb&#x2F;&quot;&gt;has been acquired in 2015 by Apple&lt;&#x2F;a&gt;. It &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9259986&quot;&gt;was a bad public publicity for the database as the download were removed.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On April 19, 2018, Apple &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;blog&#x2F;foundationdb-is-open-source&#x2F;&quot;&gt;open sourced the software, releasing it under the Apache 2.0 license&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tooling-before-coding&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tooling-before-coding&quot; aria-label=&quot;Anchor link for: tooling-before-coding&quot;&gt;üîó&lt;&#x2F;a&gt;Tooling before coding&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flow&quot; aria-label=&quot;Anchor link for: flow&quot;&gt;üîó&lt;&#x2F;a&gt;Flow&lt;&#x2F;h3&gt;
&lt;p&gt;From the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;engineering.html&quot;&gt;Engineering page&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB began with ambitious goals for both high performance per node and scalability. We knew that to achieve these goals we would face serious engineering challenges that would require tool breakthroughs. We‚Äôd need efficient asynchronous communicating processes like in Erlang or the Async in .NET, but we‚Äôd also need the raw speed, I&#x2F;O efficiency, and control of C++. To meet these challenges, we developed several new tools, the most important of which is &lt;strong&gt;Flow&lt;&#x2F;strong&gt;, a new programming language that brings actor-based concurrency to C++11.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Flow is more of a &lt;strong&gt;stateful distributed system framework&lt;&#x2F;strong&gt; than an asynchronous library. It takes a number of highly opinionated stances on how the overall distributed system should be written, and isn‚Äôt trying to be a widely reusable building block.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flow adds about 10 keywords to C++11 and is technically a trans-compiler: the Flow compiler reads Flow code and compiles it down to raw C++11, which is then compiled to a native binary with a traditional toolchain.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Flow was developed before FDB, as stated in this &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=5319163&quot;&gt;2013&#x27;s post&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB founder here. Flow sounds crazy. What hubris to think that you need a new programming language for your project? Three years later: Best decision we ever made.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We knew this was going to be a long project so we invested heavily in tools at the beginning. The first two weeks of FoundationDB were building this new programming language to give us the speed of C++ with high level tools for actor-model concurrency. But, the real magic is how Flow enables us to use our real code to do deterministic simulations of a cluster in a single thread. We have a white paper upcoming on this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We&#x27;ve had quite a bit of interest in Flow over the years and I&#x27;ve given several talks on it at meetups&#x2F;conferences. We&#x27;ve always thought about open-sourcing it... It&#x27;s not as elegant as some other actor-model languages like Scala or Erlang (see: C++) but it&#x27;s nice and fast at run-time and really helps productivity vs. writing callbacks, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(Fun fact: We&#x27;ve only ever found two bugs in Flow. After the first, we decided that we never wanted a bug again in our programming language. So, we built a program in Python that generates random Flow code and independently-executes it to validate Flow&#x27;s behavior. This fuzz tester found one more bug, and we&#x27;ve never found another.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A very good overview of Flow is available &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;flow.html&quot;&gt;here&lt;&#x2F;a&gt; and some details &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;why-was-flow-developed&#x2F;1711&#x2F;3&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simulation-driven-development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simulation-driven-development&quot; aria-label=&quot;Anchor link for: simulation-driven-development&quot;&gt;üîó&lt;&#x2F;a&gt;Simulation-Driven development&lt;&#x2F;h3&gt;
&lt;p&gt;One of Flow‚Äôs most important job is enabling &lt;strong&gt;Simulation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We wanted FoundationDB to survive failures of machines, networks, disks, clocks, racks, data centers, file systems, etc., so we created a simulation framework closely tied to Flow. By replacing physical interfaces with shims, replacing the main epoll-based run loop with a time-based simulation, and running multiple logical processes as concurrent Flow Actors, Simulation is able to conduct a deterministic simulation of an entire FoundationDB cluster within a single-thread! Even better, we are able to execute this simulation in a deterministic way, enabling us to reproduce problems and add instrumentation ex post facto. This incredible capability enabled us to build FoundationDB exclusively in simulation for the first 18 months and ensure exceptional fault tolerance long before it sent its first real network packet. For a database with as strong a contract as the FoundationDB, testing is crucial, and over the years we have run the equivalent of a trillion CPU-hours of simulated stress testing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A good overview of the simulation can be found &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;here&lt;&#x2F;a&gt;. You can also have a look at this awesome talk!&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4fFDFbi3toc&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Simulation has been made possible by combining:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single-threaded pseudo-concurrency,&lt;&#x2F;li&gt;
&lt;li&gt;Simulated implementation of all external communication,&lt;&#x2F;li&gt;
&lt;li&gt;determinism.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s an example of a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;tests&#x2F;slow&#x2F;SwizzledCycleTest.txt&quot;&gt;testfile&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;testTitle=SwizzledCycleTest
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Cycle
&lt;&#x2F;span&gt;&lt;span&gt;    transactionsPerSecond=5000.0
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    expectedRate=0.01
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=RandomClogging
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    swizzle = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Attrition
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToKill=10
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToLeave=3
&lt;&#x2F;span&gt;&lt;span&gt;    reboot=true
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Attrition
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToKill=10
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToLeave=3
&lt;&#x2F;span&gt;&lt;span&gt;    reboot=true
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=ChangeConfig
&lt;&#x2F;span&gt;&lt;span&gt;    maxDelayBeforeChange=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    coordinators=auto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The test is splitted into two parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The goal&lt;&#x2F;strong&gt;, for example doing transaction pointing to another with thousands of transactions per sec and there should be only 0.01% of success.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What will be done to try to prevent the test to succeed&lt;&#x2F;strong&gt;. In this example it will &lt;strong&gt;at the same time&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;do random clogging. Which means that &lt;strong&gt;network connections will be stopped&lt;&#x2F;strong&gt; (preventing actors to send and receive packets). Swizzle flag means that a subset of network connections will be stopped and bring back in reverse order, üò≥&lt;&#x2F;li&gt;
&lt;li&gt;will &lt;strong&gt;poweroff&#x2F;reboot machines&lt;&#x2F;strong&gt; (attritions) pseudo-randomly while keeping a minimal of three machines, ü§Ø&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;change configuration&lt;&#x2F;strong&gt;, which means a coordination changes through multi-paxos for the whole cluster. üò±&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Keep in mind that all these failures will appears &lt;strong&gt;at the same time!&lt;&#x2F;strong&gt; Do you think that your current &lt;strong&gt;datastore has gone through the same test on a daily basis?&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;pull&#x2F;11308&quot;&gt;I think not&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Applications written using the FoundationDB simulator have hierarchy: &lt;code&gt;DataCenter -&amp;gt; Machine -&amp;gt; Process -&amp;gt; Interface&lt;&#x2F;code&gt;. &lt;strong&gt;Each of these can be killed&#x2F;freezed&#x2F;nuked&lt;&#x2F;strong&gt;. Even faulty admin commands fired by some DevOps are tested!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;known-limitations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#known-limitations&quot; aria-label=&quot;Anchor link for: known-limitations&quot;&gt;üîó&lt;&#x2F;a&gt;Known limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Limitations are well described in the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;known-limitations.html&quot;&gt;official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recap&quot; aria-label=&quot;Anchor link for: recap&quot;&gt;üîó&lt;&#x2F;a&gt;Recap&lt;&#x2F;h3&gt;
&lt;p&gt;An awesome recap is available on the &lt;a href=&quot;https:&#x2F;&#x2F;softwareengineeringdaily.com&#x2F;2019&#x2F;07&#x2F;01&#x2F;foundationdb-with-ryan-worl&#x2F;&quot;&gt;Software Engineering Daily podcast&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB is tested in a very rigorous way using what&#x27;s called &lt;strong&gt;a deterministic simulation&lt;&#x2F;strong&gt;. The reason they needed a new programming language to do this, is that to get a deterministic simulation, you have to make something that is deterministic. It&#x27;s kind of obvious, but it&#x27;s hard to do.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, if your process interacts with the network, or disks, or clocks, it&#x27;s not deterministic. If you have multiple threads, not deterministic. So, they needed a way to write a concurrent program that could talk with networks and disks and that type of thing. They needed a way to write a concurrent program that does all of those things that you would think are non-deterministic in a deterministic way.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, all FoundationDB processes, and FoundationDB, it&#x27;s basically all written in Flow except a very small amount of it from the SQLite B-tree. The reason why that was useful is that when you use Flow, you get all of these higher level abstraction that let what you do what feels to you like asynchronous stuff, but under the hood, it&#x27;s all implemented using callbacks in C++, which you can make deterministic by running it in a single thread. So, there&#x27;s a scheduler that just calls these callbacks one after another and it&#x27;s very crazy looking C++ code, like you wouldn&#x27;t want to read it, but it&#x27;s because of Flow they were able to implement that deterministic simulation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-architecture&quot; aria-label=&quot;Anchor link for: the-architecture&quot;&gt;üîó&lt;&#x2F;a&gt;The Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;According to the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;administration.html#fdbmonitor-and-fdbserver&quot;&gt;fdbmonitor and fdbserver&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core FoundationDB server process is &lt;code&gt;fdbserver&lt;&#x2F;code&gt;. Each &lt;code&gt;fdbserver&lt;&#x2F;code&gt; process uses up to one full CPU core, so a production FoundationDB cluster will usually run N such processes on an N-core system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To make configuring, starting, stopping, and restarting fdbserver processes easy, FoundationDB also comes with a singleton daemon process, &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt;, which is started automatically on boot. &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt; reads the &lt;code&gt;foundationdb.conf&lt;&#x2F;code&gt; file and starts the configured set of fdbserver processes. It is also responsible for starting backup-agent.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The whole architecture is designed to automatically:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;load-balanced data and traffic,&lt;&#x2F;li&gt;
&lt;li&gt;self-healing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;microservices&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#microservices&quot; aria-label=&quot;Anchor link for: microservices&quot;&gt;üîó&lt;&#x2F;a&gt;Microservices&lt;&#x2F;h3&gt;
&lt;p&gt;A typical FDB cluster is composed of different actors which are describe &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;documentation&#x2F;sphinx&#x2F;source&#x2F;kv-architecture.rst&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The most important role in FDB is the &lt;code&gt;Coordinator&lt;&#x2F;code&gt;, it uses &lt;code&gt;Paxos&lt;&#x2F;code&gt; to manage membership on a quorum to do writes. The &lt;code&gt;Coordinator&lt;&#x2F;code&gt; is mostly only used to elect some peers and during recovery. You can view it as a Zookeeper-like stack.&lt;&#x2F;p&gt;
&lt;p&gt;The Coordinator starts by electing a &lt;code&gt;Cluster Controller&lt;&#x2F;code&gt;. It provides administratives informations about the cluster(I have 4 storage processes). Every process needs to register to the &lt;code&gt;Cluster Controller&lt;&#x2F;code&gt; and then it will assign roles to them. It is the one that will heart-beat all the processes.&lt;&#x2F;p&gt;
&lt;p&gt;Then a &lt;code&gt;Master&lt;&#x2F;code&gt; is elected. The &lt;code&gt;Master&lt;&#x2F;code&gt; process is reponsible for the &lt;code&gt;data distribution&lt;&#x2F;code&gt; algorithms. Fun fact, the mapping between keys and storage servers is stored within FDB, which is you can actually move data by running transactions like any other application. He is also the one providing &lt;code&gt;read versions&lt;&#x2F;code&gt; and &lt;code&gt;version number&lt;&#x2F;code&gt; internally. He is also acting as the &lt;code&gt;RateKeeper&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;The Proxies&lt;&#x2F;code&gt; are responsible for providing read versions, committing transactions, and tracking the storage servers responsible for each range of keys.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;The Transaction Resolvers&lt;&#x2F;code&gt; are responsible determining conflicts between transactions. A transaction conflicts if it reads a key that has been written between the transaction‚Äôs read version and commit version. The resolver does this by holding the last 5 seconds of committed writes in memory, and comparing a new transaction‚Äôs reads against this set of commits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;architecture.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;read-and-write-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-and-write-path&quot; aria-label=&quot;Anchor link for: read-and-write-path&quot;&gt;üîó&lt;&#x2F;a&gt;Read and Write Path&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;EMwhsGsxfPU&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h4 id=&quot;read-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-path&quot; aria-label=&quot;Anchor link for: read-path&quot;&gt;üîó&lt;&#x2F;a&gt;Read Path&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Retrieve a consistend read version for the transaction&lt;&#x2F;li&gt;
&lt;li&gt;Do reads from a consistent MVCC snapshot at that read version on the storage node&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;write-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-path&quot; aria-label=&quot;Anchor link for: write-path&quot;&gt;üîó&lt;&#x2F;a&gt;Write Path&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;client is sending a bundle to the &lt;code&gt;proxy&lt;&#x2F;code&gt; containing:
&lt;ul&gt;
&lt;li&gt;read version for the transaction&lt;&#x2F;li&gt;
&lt;li&gt;every readen key&lt;&#x2F;li&gt;
&lt;li&gt;every mutation that you want to do&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The proxy will assign a &lt;code&gt;Commit version&lt;&#x2F;code&gt; to a batch of transactions. &lt;code&gt;Commit version&lt;&#x2F;code&gt; is generated by the &lt;code&gt;Master&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Proxy is sending to the resolver. This will check if the data that you want to mutate has been changed between your &lt;code&gt;read Version&lt;&#x2F;code&gt; and your &lt;code&gt;Commit version&lt;&#x2F;code&gt;. They are sharded by key-range.&lt;&#x2F;li&gt;
&lt;li&gt;Transaction is made durable within the &lt;code&gt;Transaction Logs&lt;&#x2F;code&gt; by &lt;code&gt;fsync&lt;&#x2F;code&gt;ing the data. Before the data is even written to disk it is forwarded to the &lt;code&gt;storage servers&lt;&#x2F;code&gt; responsible for that mutation. Internally, &lt;code&gt;Transactions Logs&lt;&#x2F;code&gt; are creating &lt;strong&gt;a stream per &lt;code&gt;Storage Server&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;. Once the &lt;code&gt;storage servers&lt;&#x2F;code&gt; have made the mutation durable, they pop it from the log. This generally happens roughly 6 seconds after the mutation was originally committed to the log.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Storage servers&lt;&#x2F;code&gt; are lazily updating data on disk from the &lt;code&gt;Transaction logs&lt;&#x2F;code&gt;. They are keeping new write in-memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Transaction Logs&lt;&#x2F;code&gt; is responding OK to the Proxy and then the proxy is replying OK to the client.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can find more diagrams about transactions &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;technical-overview-of-the-database&#x2F;135&#x2F;3&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recovery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recovery&quot; aria-label=&quot;Anchor link for: recovery&quot;&gt;üîó&lt;&#x2F;a&gt;Recovery&lt;&#x2F;h3&gt;
&lt;p&gt;Recovery processes are detailled at around 25min.&lt;&#x2F;p&gt;
&lt;p&gt;During failure of a process (Except storage servers), the systems will try to create a new &lt;code&gt;generation&lt;&#x2F;code&gt;, so new &lt;code&gt;Master&lt;&#x2F;code&gt;, &lt;code&gt;proxies&lt;&#x2F;code&gt;, &lt;code&gt;resolvers&lt;&#x2F;code&gt; and &lt;code&gt;transactions logs&lt;&#x2F;code&gt;. New master will get a read version from transactions logs, and commit with &lt;code&gt;Paxos&lt;&#x2F;code&gt; the fact that starting from &lt;code&gt;Read version&lt;&#x2F;code&gt;, the new generation is the one in charge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Storage servers&lt;&#x2F;code&gt; are replicating data on failures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-5-second-transaction-limit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-5-second-transaction-limit&quot; aria-label=&quot;Anchor link for: the-5-second-transaction-limit&quot;&gt;üîó&lt;&#x2F;a&gt;The 5-second transaction limit&lt;&#x2F;h3&gt;
&lt;p&gt;FoundationDB currently does not support transactions running for over five seconds. More details around 16min but the &lt;code&gt;tl;dr&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Storage servers are caching latest read in-memory,&lt;&#x2F;li&gt;
&lt;li&gt;Resolvers are caching the last 5 seconds transactions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ratekeeper&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ratekeeper&quot; aria-label=&quot;Anchor link for: ratekeeper&quot;&gt;üîó&lt;&#x2F;a&gt;Ratekeeper&lt;&#x2F;h3&gt;
&lt;p&gt;More details around 31min but the &lt;code&gt;tl;dr&lt;&#x2F;code&gt; is that when system is saturated, retrieving the &lt;code&gt;Read version&lt;&#x2F;code&gt; is slowed down.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;storage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storage&quot; aria-label=&quot;Anchor link for: storage&quot;&gt;üîó&lt;&#x2F;a&gt;Storage&lt;&#x2F;h3&gt;
&lt;p&gt;A lot of information are available in this talk:&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nlus1Z7TVTI&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memory&lt;&#x2F;code&gt; is optimized for small databases. Data is stored in memory and logged to disk. In this storage engine, all data must be resident in memory at all times, and all reads are satisfied from memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SSD&lt;&#x2F;code&gt; Storage Engine is based on SQLite B-Tree&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redwood&lt;&#x2F;code&gt; will be a new storage engine based on Versioned B+Tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;developer-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#developer-experience&quot; aria-label=&quot;Anchor link for: developer-experience&quot;&gt;üîó&lt;&#x2F;a&gt;Developer experience&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB‚Äôs keys are ordered, making &lt;code&gt;tuples&lt;&#x2F;code&gt; a particularly useful tool for data modeling. FoundationDB provides a &lt;strong&gt;tuple layer&lt;&#x2F;strong&gt; (available in each language binding) that encodes tuples into keys. This layer lets you store data using a tuple like &lt;code&gt;(state, county)&lt;&#x2F;code&gt; as a key. Later, you can perform reads using a prefix like &lt;code&gt;(state,)&lt;&#x2F;code&gt;. The layer works by preserving the natural ordering of the tuples.&lt;&#x2F;p&gt;
&lt;p&gt;Everything is wrapped into a transaction in FDB.&lt;&#x2F;p&gt;
&lt;p&gt;You can have a nice overview by reading the README of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;richardartoul&#x2F;tsdb-layer&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;tsdb-layer&lt;&#x2F;a&gt;, an experiment combining Time Series and FoundationDB: Millions of writes&#x2F;s and 10x compression in under 2,000 lines of Go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fdb-one-more-things-layers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fdb-one-more-things-layers&quot; aria-label=&quot;Anchor link for: fdb-one-more-things-layers&quot;&gt;üîó&lt;&#x2F;a&gt;FDB One more things: Layers&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;concept-of-layers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept-of-layers&quot; aria-label=&quot;Anchor link for: concept-of-layers&quot;&gt;üîó&lt;&#x2F;a&gt;Concept of layers&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HLE8chgw6LI&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;FDB is resolving many distributed problems, but you still need things like &lt;strong&gt;security, multi-tenancy, query optimizations, schema, indexing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Layers are designed to develop features &lt;strong&gt;above FDB.&lt;&#x2F;strong&gt; The record-layer provided by Apple is a good starting point to build things above it, as it provides &lt;strong&gt;structured schema, indexes, and (async) query planner.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The record-layer provided by Apple is a good starting point to build things above it, as it provides &lt;strong&gt;structured schema, indexes, and (async) query planner.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apple-s-record-layer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#apple-s-record-layer&quot; aria-label=&quot;Anchor link for: apple-s-record-layer&quot;&gt;üîó&lt;&#x2F;a&gt;Apple&#x27;s Record Layer&lt;&#x2F;h3&gt;
&lt;p&gt;The paper is located &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1901.04452.pdf&quot;&gt;FoundationDB Record Layer:A Multi-Tenant Structured Datastore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;SvoUHHM9IKU&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Record Layer was designed to solve CloudKit problem.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Record allow multi-tenancy with schema above FDB&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Record Layers is providing stateless compute&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-4.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And streaming queries!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-5.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;kubernetes-operators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kubernetes-operators&quot; aria-label=&quot;Anchor link for: kubernetes-operators&quot;&gt;üîó&lt;&#x2F;a&gt;Kubernetes Operators&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;overview-of-the-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview-of-the-operator&quot; aria-label=&quot;Anchor link for: overview-of-the-operator&quot;&gt;üîó&lt;&#x2F;a&gt;Overview of the operator&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;A3U8M8pt3Ks&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Upgrade is done by &lt;strong&gt;bumping all processes at once&lt;&#x2F;strong&gt; üò±&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-4.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;combining-chaos-mesh-and-the-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#combining-chaos-mesh-and-the-operator&quot; aria-label=&quot;Anchor link for: combining-chaos-mesh-and-the-operator&quot;&gt;üîó&lt;&#x2F;a&gt;Combining chaos-mesh and the operator&lt;&#x2F;h3&gt;
&lt;p&gt;I played a bit with the operator by combining:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FoundationDB&#x2F;fdb-kubernetes-operator&quot;&gt;FoundationDB&#x2F;fdb-kubernetes-operator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;go-ycsb&quot;&gt;pingcap&#x2F;go-ycsb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;chaos-mesh&quot;&gt;pingcap&#x2F;chaos-mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-prometheus-exporter&#x2F;&quot;&gt;PierreZ&#x2F;fdb-prometheus-exporter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The experiment is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-k8s-chaos&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;roadmap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#roadmap&quot; aria-label=&quot;Anchor link for: roadmap&quot;&gt;üîó&lt;&#x2F;a&gt;Roadmap&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;wiki&#x2F;FoundationDB-Release-7.0-Planning&quot;&gt;FoundationDB Release 7.0 Planning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">distributed</category>
          <category domain="tag">foundationdb</category>
          <category domain="tag">storage</category>
          <category domain="tag">database</category>
          <category domain="tag">notes</category>
      </item>
      <item>
          <title>Diving into Kafka&#x27;s Protocol</title>
          <pubDate>Sun, 08 Dec 2019 15:00:00 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/diving-into-kafka-protocol/</link>
          <guid>https://pierrezemb.fr/posts/diving-into-kafka-protocol/</guid>
          <description xml:base="https://pierrezemb.fr/posts/diving-into-kafka-protocol/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;diving-into-kafka-protocol&#x2F;apache-kafka.png&quot; alt=&quot;kafka image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;diving&#x2F;&quot;&gt;Diving Into&lt;&#x2F;a&gt; is a blogpost serie where we are digging a specific part of of the project&#x27;s basecode. In this episode, we will digg into Kafka&#x27;s protocol.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;the-protocol-reference&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-protocol-reference&quot; aria-label=&quot;Anchor link for: the-protocol-reference&quot;&gt;üîó&lt;&#x2F;a&gt;The protocol reference&lt;&#x2F;h2&gt;
&lt;p&gt;For the last few months, I worked a lot around Kafka&#x27;s protocols, first by creating a fully async Kafka to Pulsar Proxy in Rust, and now by contributing directly to &lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;streamnative&#x2F;2-kafkaonpulsarjia&quot;&gt;KoP (Kafka On Pulsar)&lt;&#x2F;a&gt;. The full Kafka Protocol documentation is available &lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html&quot;&gt;here&lt;&#x2F;a&gt;, but it does not offer a global view of what is happening for a classic Producer and Consumer exchange. Let&#x27;s dive in!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;common-handshake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-handshake&quot; aria-label=&quot;Anchor link for: common-handshake&quot;&gt;üîó&lt;&#x2F;a&gt;Common handshake&lt;&#x2F;h3&gt;
&lt;p&gt;After a client established the TCP connection, there is a few common requests and responses that are almost always here.&lt;&#x2F;p&gt;
&lt;p&gt;The common handhake can be divided in three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to understand each other. For this, we are using &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_ApiVersions&quot;&gt;API_VERSIONS&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; to know which versions of which TCP frames can be uses,&lt;&#x2F;li&gt;
&lt;li&gt;Establish Auth using &lt;strong&gt;SASL&lt;&#x2F;strong&gt; if needed, thanks to &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_SaslHandshake&quot;&gt;SASL_HANDSHAKE&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; and &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_SaslAuthenticate&quot;&gt;SASL_AUTHENTICATE&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;Retrieve the topology of the cluster using &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_Metadata&quot;&gt;METADATA&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;All exchange are based between a Kafka 2.0 cluster and client.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;All the following diagrams are generated with &lt;a href=&quot;https:&#x2F;&#x2F;mermaidjs.github.io&#x2F;#&#x2F;&quot;&gt;MermaidJS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;pre class=&quot;mermaid&quot;&gt;
        sequenceDiagram

    Note left of KafkaClient: I&amp;#x27;m speaking Kafka &amp;lt;br&amp;#x2F;&amp;gt; 2.3,but can the &amp;lt;br&amp;#x2F;&amp;gt; broker understand &amp;lt;br&amp;#x2F;&amp;gt; me?

    KafkaClient -&amp;gt;&amp;gt;+ Broker0: API_VERSIONS request

    Note right of Broker0: I can handle theses &amp;lt;br&amp;#x2F;&amp;gt; structures in theses &amp;lt;br&amp;#x2F;&amp;gt;versions: ...
    Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Thanks!&amp;lt;br&amp;#x2F;&amp;gt; I see you can handle &amp;lt;br&amp;#x2F;&amp;gt; SASL, let&amp;#x27;s auth! &amp;lt;br&amp;#x2F;&amp;gt; can you handle &amp;lt;br&amp;#x2F;&amp;gt; SASL_PLAIN?
    KafkaClient -&amp;gt;&amp;gt;+ Broker0: SASL_HANDSHAKE request

    Note right of Broker0: Yes I can handle &amp;lt;br&amp;#x2F;&amp;gt; SASL_PLAIN &amp;lt;br&amp;#x2F;&amp;gt; among others
    Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Awesome, here&amp;#x27;s &amp;lt;br&amp;#x2F;&amp;gt; my credentials!
    KafkaClient -&amp;gt;&amp;gt;+ Broker0: SASL_AUTHENTICATE request

    Note right of Broker0: Checking...
    Note right of Broker0: You are &amp;lt;br&amp;#x2F;&amp;gt;authenticated!
    Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Cool! &amp;lt;br&amp;#x2F;&amp;gt; Can you give &amp;lt;br&amp;#x2F;&amp;gt; the cluster topology?&amp;lt;br&amp;#x2F;&amp;gt; I want to &amp;lt;br&amp;#x2F;&amp;gt; use &amp;#x27;my-topic&amp;#x27;
    KafkaClient -&amp;gt;&amp;gt;+ Broker0: METADATA request

    Note right of Broker0: There is one topic &amp;lt;br&amp;#x2F;&amp;gt; with one partition&amp;lt;br&amp;#x2F;&amp;gt; called &amp;#x27;my-topic&amp;#x27;&amp;lt;br&amp;#x2F;&amp;gt;The partition&amp;#x27;s leader &amp;lt;br&amp;#x2F;&amp;gt; is Broker0
    Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

Note left of KafkaClient: That is you, I don&amp;#x27;t &amp;lt;br&amp;#x2F;&amp;gt; need to handshake &amp;lt;br&amp;#x2F;&amp;gt; again with &amp;lt;br&amp;#x2F;&amp;gt; another broker
    &lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;producing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#producing&quot; aria-label=&quot;Anchor link for: producing&quot;&gt;üîó&lt;&#x2F;a&gt;Producing&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_Produce&quot;&gt;PRODUCE&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; API is used to send message sets to the server. For efficiency it allows sending message sets intended for many topic partitions in a single request.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;pre class=&quot;mermaid&quot;&gt;
        sequenceDiagram

    Note over KafkaClient,Broker0: ...handshaking, see above...

    loop pull msg
        Note left of KafkaClient: I have a batch &amp;lt;br&amp;#x2F;&amp;gt; containing one &amp;lt;br&amp;#x2F;&amp;gt; message for the &amp;lt;br&amp;#x2F;&amp;gt; partition-0 &amp;lt;br&amp;#x2F;&amp;gt; of &amp;#x27;my-topic&amp;#x27;
        KafkaClient -&amp;gt;&amp;gt;+ Broker0: PRODUCE request

        Note right of Broker0: Processing...&amp;lt;br&amp;#x2F;&amp;gt;
        Note right of Broker0: Done!
        Broker0 -&amp;gt;&amp;gt;- KafkaClient: 
        
        Note left of KafkaClient: Thanks
    end
    &lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;consuming&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consuming&quot; aria-label=&quot;Anchor link for: consuming&quot;&gt;üîó&lt;&#x2F;a&gt;Consuming&lt;&#x2F;h3&gt;
&lt;p&gt;Consuming is more complicated than producing. You can learn more in &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=maJulQ4ABNY&quot;&gt;The Magical Group Coordination Protocol of Apache Kafka&lt;&#x2F;a&gt; By Gwen Shapira, Principal Data Architect @ Confluent and also in the &lt;a href=&quot;https:&#x2F;&#x2F;cwiki.apache.org&#x2F;confluence&#x2F;display&#x2F;KAFKA&#x2F;Kafka+Client-side+Assignment+Proposal&quot;&gt;Kafka Client-side Assignment Proposal&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Consuming can be divided in three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;coordinating the consumers to assign them partitions, using:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_FindCoordinator&quot;&gt;FIND_COORDINATOR&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_JoinGroup&quot;&gt;JOIN_GROUP&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_SyncGroup&quot;&gt;SYNC_GROUP&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;then fetch messages using:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_OffsetFetch&quot;&gt;OFFSET_FETCH&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_ListOffsets&quot;&gt;LIST_OFFSETS&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_Fetch&quot;&gt;FETCH&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_OffsetCommit&quot;&gt;OFFSET_COMMIT&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Send lifeproof to the coordinator using &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;protocol.html#The_Messages_Heartbeat&quot;&gt;HEARTBEAT&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the sake of the explanation, we have now another Broker1 which is holding the coordinator for topic &#x27;my-topic&#x27;. In real-life, it would be the same.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;pre class=&quot;mermaid&quot;&gt;
        sequenceDiagram

    Note over KafkaClient,Broker0: ...handshaking, see above...

    Note left of KafkaClient: Who is the &amp;lt;br&amp;#x2F;&amp;gt; coordinator for&amp;lt;br&amp;#x2F;&amp;gt; &amp;#x27;my-topic&amp;#x27;?
    KafkaClient -&amp;gt;&amp;gt;+ Broker0: FIND_COORDINATOR request

    Note right of Broker0: It is Broker1!
    Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: OK, let&amp;#x27;s connect&amp;lt;br&amp;#x2F;&amp;gt; to Broker1
    Note over KafkaClient,Broker1: ...handshaking, see above...

    Note left of KafkaClient: Hi, I want to join a &amp;lt;br&amp;#x2F;&amp;gt; consumption group &amp;lt;br&amp;#x2F;&amp;gt;for &amp;#x27;my-topic&amp;#x27;
    KafkaClient -&amp;gt;&amp;gt;+ Broker1: JOIN_GROUP request

    Note right of Broker1: Welcome! I will be &amp;lt;br&amp;#x2F;&amp;gt; waiting a bit for any &amp;lt;br&amp;#x2F;&amp;gt;of your friends.
    Note right of Broker1: You are now leader. &amp;lt;br&amp;#x2F;&amp;gt;Your group contains &amp;lt;br&amp;#x2F;&amp;gt; only one member.&amp;lt;br&amp;#x2F;&amp;gt; You now  need to &amp;lt;br&amp;#x2F;&amp;gt; assign partitions to &amp;lt;br&amp;#x2F;&amp;gt; them. 
    Broker1 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Computing &amp;lt;br&amp;#x2F;&amp;gt;the assigment...
    Note left of KafkaClient: Done! I will be &amp;lt;br&amp;#x2F;&amp;gt; in charge of handling &amp;lt;br&amp;#x2F;&amp;gt; partition-0 of &amp;lt;br&amp;#x2F;&amp;gt;&amp;#x27;my-topic&amp;#x27;
    KafkaClient -&amp;gt;&amp;gt;+ Broker1: SYNC_GROUP request

    Note right of Broker1: Thanks, I will &amp;lt;br&amp;#x2F;&amp;gt;broadcast the &amp;lt;br&amp;#x2F;&amp;gt;assigmnents to &amp;lt;br&amp;#x2F;&amp;gt;everyone
    Broker1 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Can I get the &amp;lt;br&amp;#x2F;&amp;gt; committed offsets &amp;lt;br&amp;#x2F;&amp;gt; for partition-0&amp;lt;br&amp;#x2F;&amp;gt;for my consumer&amp;lt;br&amp;#x2F;&amp;gt;group?
    KafkaClient -&amp;gt;&amp;gt;+ Broker1: OFFSET_FETCH request

    Note right of Broker1: Found no &amp;lt;br&amp;#x2F;&amp;gt;committed offset&amp;lt;br&amp;#x2F;&amp;gt; for partition-0
    Broker1 -&amp;gt;&amp;gt;- KafkaClient: 

    Note left of KafkaClient: Thanks, I will now &amp;lt;br&amp;#x2F;&amp;gt;connect to Broker0

    Note over KafkaClient,Broker0: ...handshaking again...

    opt if new consumer-group
        Note left of KafkaClient: Can you give me&amp;lt;br&amp;#x2F;&amp;gt; the earliest position&amp;lt;br&amp;#x2F;&amp;gt; for partition-0?
        KafkaClient -&amp;gt;&amp;gt;+ Broker0: LIST_OFFSETS request
        
        Note right of Broker0: Here&amp;#x27;s the earliest &amp;lt;br&amp;#x2F;&amp;gt; position: ...
        Broker0 -&amp;gt;&amp;gt;- KafkaClient: 
    end 
    loop pull msg

        opt Consume
            Note left of KafkaClient: Can you give me&amp;lt;br&amp;#x2F;&amp;gt; some messages &amp;lt;br&amp;#x2F;&amp;gt; starting  at offset X?
            KafkaClient -&amp;gt;&amp;gt;+ Broker0: FETCH request

            Note right of Broker0: Here some records...
            Broker0 -&amp;gt;&amp;gt;- KafkaClient: 

            Note left of KafkaClient: Processing...
            Note left of KafkaClient: Can you commit &amp;lt;br&amp;#x2F;&amp;gt;offset X?
            KafkaClient -&amp;gt;&amp;gt;+ Broker1: OFFSET_COMMIT request

            Note right of Broker1: Committing...
            Note right of Broker1: Done!
            Broker1 -&amp;gt;&amp;gt;- KafkaClient: 
        end

        Note left of KafkaClient: I need to send &amp;lt;br&amp;#x2F;&amp;gt; some lifeness proof &amp;lt;br&amp;#x2F;&amp;gt; to the coordinator           
        opt Healthcheck
            Note left of KafkaClient: I am still alive!  
            KafkaClient -&amp;gt;&amp;gt;+ Broker1: HEARTBEAT request
            Note right of Broker1: I hear you
            Broker1 -&amp;gt;&amp;gt;- KafkaClient: 
        end
    end
    &lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">messaging</category>
          <category domain="tag">distributed</category>
          <category domain="tag">kafka</category>
          <category domain="tag">networking</category>
          <category domain="tag">diving</category>
      </item>
      <item>
          <title>Diving into Hbase&#x27;s MemStore</title>
          <pubDate>Sun, 17 Nov 2019 10:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/diving-into-hbase-memstore/</link>
          <guid>https://pierrezemb.fr/posts/diving-into-hbase-memstore/</guid>
          <description xml:base="https://pierrezemb.fr/posts/diving-into-hbase-memstore/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;diving&#x2F;&quot;&gt;Diving Into&lt;&#x2F;a&gt; is a blogpost serie where we are digging a specific part of of the project&#x27;s basecode. In this episode, we will digg into the implementation behind Hbase&#x27;s MemStore.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;tl;dr:&lt;&#x2F;code&gt; Hbase is using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;ConcurrentSkipListMap.html&quot;&gt;ConcurrentSkipListMap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-memstore&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-memstore&quot; aria-label=&quot;Anchor link for: what-is-the-memstore&quot;&gt;üîó&lt;&#x2F;a&gt;What is the MemStore?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;memtable&lt;&#x2F;code&gt; from the official &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;archive&#x2F;bigtable-osdi06.pdf&quot;&gt;BigTable paper&lt;&#x2F;a&gt; is the equivalent of the &lt;code&gt;MemStore&lt;&#x2F;code&gt; in Hbase.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As rows are &lt;strong&gt;sorted lexicographically&lt;&#x2F;strong&gt; in Hbase, when data comes in, you need to have some kind of a &lt;strong&gt;in-memory buffer&lt;&#x2F;strong&gt; to order those keys. This is where the &lt;code&gt;MemStore&lt;&#x2F;code&gt; comes in. It absorbs the recent write (or put in Hbase semantics) operations. All the rest are immutable files called &lt;code&gt;HFile&lt;&#x2F;code&gt; stored in HDFS. There is one &lt;code&gt;MemStore&lt;&#x2F;code&gt; per &lt;code&gt;column family&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s dig into how the MemStore internally works in Hbase 1.X.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-1&quot; aria-label=&quot;Anchor link for: hbase-1&quot;&gt;üîó&lt;&#x2F;a&gt;Hbase 1&lt;&#x2F;h2&gt;
&lt;p&gt;All extract of code for this section are taken from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;tree&#x2F;rel&#x2F;1.4.9&quot;&gt;rel&#x2F;1.4.9&lt;&#x2F;a&gt; tag.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-memory-storage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-memory-storage&quot; aria-label=&quot;Anchor link for: in-memory-storage&quot;&gt;üîó&lt;&#x2F;a&gt;in-memory storage&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L35&quot;&gt;MemStore interface&lt;&#x2F;a&gt; is giving us insight on how it is working internally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * Write an update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; approximate size of the passed cell.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;long add(final Cell cell);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L68-L73&quot;&gt;add function on the MemStore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The implementation is hold by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;DefaultMemStore.java&quot;&gt;DefaultMemStore&lt;&#x2F;a&gt;. &lt;code&gt;add&lt;&#x2F;code&gt; is wrapped by several functions, but in the end, we are arriving here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addToCellSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cell&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.activeSection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCellSkipListSet&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;DefaultMemStore.java#L202-L213&quot;&gt;addToCellSet on the DefaultMemStore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;CellSkipListSet.java#L33-L48&quot;&gt;CellSkipListSet class&lt;&#x2F;a&gt; is built on top of &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;ConcurrentSkipListMap.html&quot;&gt;ConcurrentSkipListMap&lt;&#x2F;a&gt;, which provide nice features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;concurrency&lt;&#x2F;li&gt;
&lt;li&gt;sorted elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;flush-on-hdfs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flush-on-hdfs&quot; aria-label=&quot;Anchor link for: flush-on-hdfs&quot;&gt;üîó&lt;&#x2F;a&gt;Flush on HDFS&lt;&#x2F;h3&gt;
&lt;p&gt;As we seen above, the &lt;code&gt;MemStore&lt;&#x2F;code&gt; is supporting all the puts. When asked to flush, the current memstore is &lt;strong&gt;moved to snapshot and is cleared&lt;&#x2F;strong&gt;. Flushed file are called (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;io&#x2F;hfile&#x2F;HFile.java&quot;&gt;HFiles&lt;&#x2F;a&gt;) and they are similar to &lt;code&gt;SSTables&lt;&#x2F;code&gt; introduced by the official &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;archive&#x2F;bigtable-osdi06.pdf&quot;&gt;BigTable paper&lt;&#x2F;a&gt;. HFiles are flushed on the Hadoop Distributed File System called &lt;code&gt;HDFS&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want deeper insight about SSTables, I recommend reading &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;rocksdb&#x2F;wiki&#x2F;Rocksdb-BlockBasedTable-Format&quot;&gt;Table Format from the awesome RocksDB wiki&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;compaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compaction&quot; aria-label=&quot;Anchor link for: compaction&quot;&gt;üîó&lt;&#x2F;a&gt;Compaction&lt;&#x2F;h3&gt;
&lt;p&gt;Compaction are only run on HFiles. It means that &lt;strong&gt;if hot data is continuously updated, we are overusing memory due to duplicate entries per row per MemStore&lt;&#x2F;strong&gt;. Accordion tends to solve this problem through &lt;em&gt;in-memory compactions&lt;&#x2F;em&gt;. Let&#x27;s have a look to Hbase 2.X!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-2&quot; aria-label=&quot;Anchor link for: hbase-2&quot;&gt;üîó&lt;&#x2F;a&gt;Hbase 2&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;storing-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storing-data&quot; aria-label=&quot;Anchor link for: storing-data&quot;&gt;üîó&lt;&#x2F;a&gt;storing data&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;All extract of code starting from here are taken from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;tree&#x2F;rel&#x2F;2.1.2&quot;&gt;rel&#x2F;2.1.2&lt;&#x2F;a&gt; tag.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Does &lt;code&gt;MemStore&lt;&#x2F;code&gt; interface changed?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * Write an update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memstoreSizing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; The delta in memstore size will be passed back via this.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *        This will include both data size and heap overhead delta.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  void add(final Cell cell, MemStoreSizing memstoreSizing);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L67-L73&quot;&gt;add function in MemStore interface&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The signature changed a bit, to include passing a object instead of returning a long. Moving on.&lt;&#x2F;p&gt;
&lt;p&gt;The new structure implementing MemStore is called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;AbstractMemStore.java#L42&quot;&gt;AbstractMemStore&lt;&#x2F;a&gt;. Again, we have some layers, where AbstractMemStore is writing to a &lt;code&gt;MutableSegment&lt;&#x2F;code&gt;, which itsef is wrapping &lt;code&gt;Segment&lt;&#x2F;code&gt;. If you dig far enough, you will find that data are stored into the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;CellSet.java#L35-L51&quot;&gt;CellSet class&lt;&#x2F;a&gt; which is also things built on top of &lt;strong&gt;ConcurrentSkipListMap&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-memory-compactions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-memory-compactions&quot; aria-label=&quot;Anchor link for: in-memory-compactions&quot;&gt;üîó&lt;&#x2F;a&gt;in-memory Compactions&lt;&#x2F;h3&gt;
&lt;p&gt;Hbase 2.0 introduces a big change to the original memstore called Accordion which is a codename for in-memory compactions. An awesome blogpost is available here: &lt;a href=&quot;https:&#x2F;&#x2F;blogs.apache.org&#x2F;hbase&#x2F;entry&#x2F;accordion-hbase-breathes-with-in&quot;&gt;Accordion: HBase Breathes with In-Memory Compaction&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;secure&#x2F;attachment&#x2F;12709471&#x2F;HBaseIn-MemoryMemstoreCompactionDesignDocument.pdf&quot;&gt;document design&lt;&#x2F;a&gt; is also available.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! feel free to react to this article, I&#x27;m also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">storage</category>
          <category domain="tag">distributed</category>
          <category domain="tag">hbase</category>
          <category domain="tag">performance</category>
          <category domain="tag">diving</category>
      </item>
      <item>
          <title>What can be gleaned about GFS successor codenamed Colossus?</title>
          <pubDate>Sun, 04 Aug 2019 15:07:11 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/colossus-google/</link>
          <guid>https://pierrezemb.fr/posts/colossus-google/</guid>
          <description xml:base="https://pierrezemb.fr/posts/colossus-google/">&lt;p&gt;In the last few months, there has been numerous blogposts about the end of the Hadoop-era. It is true that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.theregister.co.uk&#x2F;2019&#x2F;06&#x2F;06&#x2F;cloudera_ceo_quits_customers_delay_purchase_orders_due_to_roadmap_uncertainty_after_hortonworks_merger&#x2F;&quot;&gt;Health of Hadoop-based companies are publicly bad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hadoop has a bad publicity with headlines like &lt;a href=&quot;https:&#x2F;&#x2F;techwireasia.com&#x2F;2019&#x2F;07&#x2F;what-does-the-death-of-hadoop-mean-for-big-data&#x2F;&quot;&gt;&#x27;What does the death of Hadoop mean for big data?&#x27;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hadoop, as a distributed-system, &lt;strong&gt;is hard to operate, but can be essential for some type of workload&lt;&#x2F;strong&gt;. As Hadoop is based on GFS, we can wonder how GFS evolved inside Google.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hadoop-s-story&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hadoop-s-story&quot; aria-label=&quot;Anchor link for: hadoop-s-story&quot;&gt;üîó&lt;&#x2F;a&gt;Hadoop&#x27;s story&lt;&#x2F;h2&gt;
&lt;p&gt;Hadoop is based on a Google&#x27;s paper called &lt;a href=&quot;https:&#x2F;&#x2F;static.googleusercontent.com&#x2F;media&#x2F;research.google.com&#x2F;en&#x2F;&#x2F;archive&#x2F;gfs-sosp2003.pdf&quot;&gt;The Google File System&lt;&#x2F;a&gt; published in 2003. There are some key-elements on this paper:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It was designed to be deployed with &lt;a href=&quot;https:&#x2F;&#x2F;ai.google&#x2F;research&#x2F;pubs&#x2F;pub43438&quot;&gt;Borg&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;to &quot;&lt;a href=&quot;https:&#x2F;&#x2F;queue.acm.org&#x2F;detail.cfm?id=1594206&quot;&gt;simplify the overall design problem&lt;&#x2F;a&gt;&quot;, they:
&lt;ul&gt;
&lt;li&gt;implemented a single master architecture&lt;&#x2F;li&gt;
&lt;li&gt;dropped the idea of a full POSIX-compliant file system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Metadatas are stored in RAM in the master,&lt;&#x2F;li&gt;
&lt;li&gt;Datas are stored within chunkservers,&lt;&#x2F;li&gt;
&lt;li&gt;There is no YARN or Map&#x2F;Reduce or any kind of compute capabilities.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;is-hadoop-still-revelant&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-hadoop-still-revelant&quot; aria-label=&quot;Anchor link for: is-hadoop-still-revelant&quot;&gt;üîó&lt;&#x2F;a&gt;Is Hadoop still revelant?&lt;&#x2F;h2&gt;
&lt;p&gt;Google with GFS and the rest of the world with Hadoop hit some issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;One (Metadata) machine is not large enough for large FS,&lt;&#x2F;li&gt;
&lt;li&gt;Single bottleneck for metadata operations,&lt;&#x2F;li&gt;
&lt;li&gt;Not appropriate for latency sensitive applications,&lt;&#x2F;li&gt;
&lt;li&gt;Fault tolerant not HA,&lt;&#x2F;li&gt;
&lt;li&gt;Unpredictable performance,&lt;&#x2F;li&gt;
&lt;li&gt;Replication&#x27;s cost,&lt;&#x2F;li&gt;
&lt;li&gt;HDFS Write-path pipelining,&lt;&#x2F;li&gt;
&lt;li&gt;fixed-size of blocks,&lt;&#x2F;li&gt;
&lt;li&gt;cost of operations,&lt;&#x2F;li&gt;
&lt;li&gt;...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Despite all the issues, Hadoop is still relevant for some usecases, such as Map&#x2F;Reduce, or if you need Hbase as a main datastore. There is stories available online about the scalability of Hadoop:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.twitter.com&#x2F;engineering&#x2F;en_us&#x2F;topics&#x2F;infrastructure&#x2F;2017&#x2F;the-infrastructure-behind-twitter-scale.html&quot;&gt;Twitter has multiple clusters storing over 500 PB (2017)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;whereas Google prefered to &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;files&#x2F;storage_architecture_and_challenges.pdf&quot;&gt;&quot;Scaled to approximately 50M files, 10P&quot; to avoid &quot;added management overhead&quot; brought by the scaling.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Nowadays, Hadoop is mostly used for Business Intelligence or to create a datalake, but at first, GFS was designed to provide a distributed file-system on top of commodity servers.&lt;&#x2F;p&gt;
&lt;p&gt;Google&#x27;s developers were&#x2F;are deploying applications into &quot;containers&quot;, meaning that &lt;strong&gt;any process could be spawned somewhere into the cloud&lt;&#x2F;strong&gt;. Developers are used to work with the file-system abstraction, which provide a layer of durability and security. To mimic that process, they developed GFS, so that &lt;strong&gt;processes don&#x27;t need to worry about replication&lt;&#x2F;strong&gt; (like Bigtable&#x2F;HBase).&lt;&#x2F;p&gt;
&lt;p&gt;This is a promise that, I think, was forgotten. In a world where Kubernetes &lt;em&gt;seems&lt;&#x2F;em&gt; to be the standard, &lt;strong&gt;the need of a global distributed file-system is now higher than before&lt;&#x2F;strong&gt;. By providing a &quot;file-system&quot; abstraction for applications deployed in Kubernetes, we may be solving many problems Kubernetes-adopters are hitting, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How can I retrieve that particular file for my applications deployed on the other side of the Kubernetes cluster?&lt;&#x2F;li&gt;
&lt;li&gt;Should I be moving that persistent volume over my slow network?&lt;&#x2F;li&gt;
&lt;li&gt;What is happening when &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dgraph-io&#x2F;dgraph&#x2F;issues&#x2F;2698&quot;&gt;Kubernetes killed an alpha pod in the middle of retrieving snapshot&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;well-let-s-put-hadoop-in-kubernetes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#well-let-s-put-hadoop-in-kubernetes&quot; aria-label=&quot;Anchor link for: well-let-s-put-hadoop-in-kubernetes&quot;&gt;üîó&lt;&#x2F;a&gt;Well, let&#x27;s put Hadoop in Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;Putting a distributed systems inside Kubernetes is currently a unpleasant experience because of the current tooling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Helm is not helping me expressing my needs as a distributed-system operator. Even worse, the official &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helm&#x2F;charts&#x2F;tree&#x2F;master&#x2F;stable&#x2F;hadoop&quot;&gt;Helm chart for Hadoop is limited to YARN and Map&#x2F;Reduce and &quot;Data should be read from cloud based datastores such as Google Cloud Storage, S3 or Swift.&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Kubernetes Operators has no access to key-metrics, so they cannot watch over your applications correctly. It is only providing a &quot;day-zero to day-two&quot; good experience,&lt;&#x2F;li&gt;
&lt;li&gt;Google seems to &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=16971959&quot;&gt;not be using the Operators design internally&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ibm.com&#x2F;cloud&#x2F;blog&#x2F;new-builders&#x2F;database-deep-dives-couchdb&quot;&gt;CouchDB developers&lt;&#x2F;a&gt; are saying that:
&lt;ul&gt;
&lt;li&gt;&quot;For certain workloads, the technology isn‚Äôt quite there yet&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&quot;In certain scenarios that are getting smaller and smaller, both Kubernetes and Docker get in the way of that. At that point, CouchDB gets slow, or you get timeout errors, that you can‚Äôt explain.&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-gfs-evolved-within-google&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-gfs-evolved-within-google&quot; aria-label=&quot;Anchor link for: how-gfs-evolved-within-google&quot;&gt;üîó&lt;&#x2F;a&gt;How GFS evolved within Google&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;technical-overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-overview&quot; aria-label=&quot;Anchor link for: technical-overview&quot;&gt;üîó&lt;&#x2F;a&gt;Technical overview&lt;&#x2F;h3&gt;
&lt;p&gt;As GFS&#x27;s paper was published in 2003, we can ask ourselves if GFS has evolved. And it did! The sad part is that there is only a few informations about this project codenamed &lt;code&gt;Colossus&lt;&#x2F;code&gt;. There is no papers, and not a lot informations available, here&#x27;s what can be found online:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;files&#x2F;storage_architecture_and_challenges.pdf&quot;&gt;Storage Architecture and Challenges(2010)&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They moved from full-replication to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reed%E2%80%93Solomon_error_correction&quot;&gt;Reed-Salomon&lt;&#x2F;a&gt;. This feature is acually in &lt;a href=&quot;https:&#x2F;&#x2F;hadoop.apache.org&#x2F;docs&#x2F;r3.0.0&#x2F;hadoop-project-dist&#x2F;hadoop-hdfs&#x2F;HDFSErasureCoding.html&quot;&gt;Hadoop 3&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;replication is handled by the client, instead of the pipelining,&lt;&#x2F;li&gt;
&lt;li&gt;the metadata layer is automatically sharded. We can find more informations about that in the next ressource!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;http:&#x2F;&#x2F;www.pdsw.org&#x2F;pdsw-discs17&#x2F;slides&#x2F;PDSW-DISCS-Google-Keynote.pdf&quot;&gt;Cluster-Level Storage @ Google(2017)&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GFS master replaced by Colossus&lt;&#x2F;li&gt;
&lt;li&gt;GFS chunkserver replaced by D&lt;&#x2F;li&gt;
&lt;li&gt;Colossus rebalances old, cold data&lt;&#x2F;li&gt;
&lt;li&gt;distributes newly written data evenly across disks&lt;&#x2F;li&gt;
&lt;li&gt;Metadatas are stored into BigTable. each Bigtable row corresponds to a single file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &quot;all in RAM&quot; GFS master design was a severe single-point-of-failure, so getting rid of it was a priority. They didn&#x27;t had a lof of options for a scalable and rock-solid datastore &lt;strong&gt;beside BigTable&lt;&#x2F;strong&gt;. When you think about it, a key&#x2F;value datastore is a great replacement for a distributed file-system master:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;automatic sharding of regions,&lt;&#x2F;li&gt;
&lt;li&gt;scan capabilities for files in the same &quot;directory&quot;,&lt;&#x2F;li&gt;
&lt;li&gt;lexical ordering,&lt;&#x2F;li&gt;
&lt;li&gt;...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The funny part is that they now need a Colossus for Colossus. The only things saving them is that storing the metametametadata (the metadata of the metadata of the metadata) can be hold in Chubby.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;queue.acm.org&#x2F;detail.cfm?id=1594206&quot;&gt;GFS: Evolution on Fast-forward(2009)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;they moved to chunks of 1MB of files, as the limitations of the master disappeared. This is also allowing Colossus to support latency sensitive applications,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cockroachdb&#x2F;cockroach&#x2F;issues&#x2F;243#issuecomment-91575792&quot;&gt;a Github comment on Colossus&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;File reconstruction from Reed-Salomnon was performed on both client-side and server-side&lt;&#x2F;li&gt;
&lt;li&gt;on-the-fly recovery of data is greatly enhanced by this data layout(Reed Salomon)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From a &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20135927&quot;&gt;Hacker News comment&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Colossus and D are two separate things.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;blog&#x2F;products&#x2F;storage-data-transfer&#x2F;a-peek-behind-colossus-googles-file-system&quot;&gt;Colossus under the hood: a peek into Google‚Äôs scalable storage system&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Colossus&#x27;s Control Plane is a scalable metadata service, which consists of many Curators. Clients talk directly to curators for control operations, such as file creation, and can scale horizontally.&lt;&#x2F;li&gt;
&lt;li&gt;background storage managers called Custodians, there are handling tasks like disk space balancing and RAID reconstruction.&lt;&#x2F;li&gt;
&lt;li&gt;Applications needs to specifies I&#x2F;O, availability, and durability requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What is that &quot;D&quot;?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;landing.google.com&#x2F;sre&#x2F;sre-book&#x2F;chapters&#x2F;production-environment&#x2F;&quot;&gt;The Production Environment at Google, from the Viewpoint of an SRE&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;D stands for &lt;em&gt;Disk&lt;&#x2F;em&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;D is a fileserver running on almost all machines in a cluster.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@jerub&#x2F;the-production-environment-at-google-8a1aaece3767&quot;&gt;The Production Environment at Google&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;D is more of a block server than a file server&lt;&#x2F;li&gt;
&lt;li&gt;It provides nothing apart from checksums.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deployments&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#deployments&quot; aria-label=&quot;Anchor link for: deployments&quot;&gt;üîó&lt;&#x2F;a&gt;Deployments&lt;&#x2F;h3&gt;
&lt;!-- I think the team that&#x27;s pushing the forefront of something k8s-like for persistency&#x2F;durability is... the Colossus&#x2F;D team at Google, who have been running storage servers managed by Borg for almost a decade now :) Problem is, it&#x27;s not k8s. But could tell us what that roadmap is.  --&gt;
&lt;p&gt;How everything is deployed? Using Borg!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;migration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#migration&quot; aria-label=&quot;Anchor link for: migration&quot;&gt;üîó&lt;&#x2F;a&gt;Migration&lt;&#x2F;h3&gt;
&lt;p&gt;The migration process is described in the now free &lt;a href=&quot;https:&#x2F;&#x2F;static.googleusercontent.com&#x2F;media&#x2F;sre.google&#x2F;en&#x2F;&#x2F;static&#x2F;pdf&#x2F;case-studies-infrastructure-change-management.pdf&quot;&gt;Case Studies in Infrastructure Change Management&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-there-an-open-source-effort-to-create-a-colossus-like-dfs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-there-an-open-source-effort-to-create-a-colossus-like-dfs&quot; aria-label=&quot;Anchor link for: is-there-an-open-source-effort-to-create-a-colossus-like-dfs&quot;&gt;üîó&lt;&#x2F;a&gt;Is there an open-source effort to create a Colossus-like DFS?&lt;&#x2F;h2&gt;
&lt;p&gt;I did not found any point towards a open-source version of Colossus, beside some work made for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;baidu&#x2F;bfs&quot;&gt;The Baidu File System&lt;&#x2F;a&gt; in which the Nameserver is implemented as a raft group.&lt;&#x2F;p&gt;
&lt;p&gt;There is &lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;HadoopSummit&#x2F;scaling-hdfs-to-manage-billions-of-files-with-distributed-storage-schemes&quot;&gt;some work to add colossus&#x27;s features in Hadoop&lt;&#x2F;a&gt; but based on the bad publicity Hadoop has now, I don&#x27;t think there will be a lot of money to power those efforts.&lt;&#x2F;p&gt;
&lt;p&gt;I do think that rewriting an distributed file-system based on Colossus would be a huge benefit for the community:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reimplement D may be easy, my current question is &lt;strong&gt;how far can we use modern FS such as OpenZFS&lt;&#x2F;strong&gt; to facilitate the work? FS capabilities such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zfsonlinux&#x2F;zfs&#x2F;wiki&#x2F;Checksums&quot;&gt;OpenZFS checksums&lt;&#x2F;a&gt; seems pretty interesting.&lt;&#x2F;li&gt;
&lt;li&gt;To resolve the distributed master issue, we could use &lt;a href=&quot;https:&#x2F;&#x2F;tikv.org&#x2F;&quot;&gt;Tikv&lt;&#x2F;a&gt; as a building block to provide an &quot;BigTable experience&quot; without the need of a distributed file-system underneath.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But remember:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like crypto, Do not roll your own DFS!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">storage</category>
          <category domain="tag">distributed</category>
          <category domain="tag">google</category>
          <category domain="tag">filesystem</category>
          <category domain="tag">hadoop</category>
      </item>
      <item>
          <title>Playing with TTL in HBase</title>
          <pubDate>Mon, 27 May 2019 22:07:11 +0200</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/ttl-hbase/</link>
          <guid>https://pierrezemb.fr/posts/ttl-hbase/</guid>
          <description xml:base="https://pierrezemb.fr/posts/ttl-hbase/">&lt;header class=&quot;row text-center header&quot;&gt;
   &lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;HBase Image&quot; class=&quot;text-center&quot;&gt;
&lt;&#x2F;header&gt;
&lt;p&gt;Among all features provided by HBase, there is one that is pretty handy to deal with your data&#x27;s lifecyle: the fact that every cell version can have &lt;strong&gt;Time to Live&lt;&#x2F;strong&gt; or TTL. Let&#x27;s dive into the feature!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;time-to-live-ttl&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#time-to-live-ttl&quot; aria-label=&quot;Anchor link for: time-to-live-ttl&quot;&gt;üîó&lt;&#x2F;a&gt;Time To Live (TTL)&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s read the doc first!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ColumnFamilies can set a TTL length in seconds, and &lt;strong&gt;HBase will automatically delete rows once the expiration time is reached&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#ttl&quot;&gt;HBase Book: Time To Live (TTL)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s play with it! You can easily start an standalone HBase by following &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#quickstart&quot;&gt;the HBase Book&lt;&#x2F;a&gt;. Once your standalone cluster is started, we can get started:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bin&#x2F;hbase&lt;&#x2F;span&gt;&lt;span&gt; shell
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:001:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; create &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TTL&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; 30} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 30 sec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that our test_table is created, we can &lt;code&gt;put&lt;&#x2F;code&gt; some data on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:002:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; put &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TTL Demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can &lt;code&gt;get&lt;&#x2F;code&gt; it with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:003:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;                          timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.0080 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s our row! But if you wait a bit, it will &lt;strong&gt;disappear&lt;&#x2F;strong&gt; thanks to the TTL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:004:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.0220 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It has been filtered from the result, but the data is still here.  You can trigger a &lt;strong&gt;raw&lt;&#x2F;strong&gt; scan to check:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:002:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {RAW =&amp;gt; true}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                                COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;                            column=cf1:desc, timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.3280 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will be removed only when a &lt;strong&gt;major-compaction&lt;&#x2F;strong&gt; will occur. As we are playing, we can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;force the memstore to be &lt;strong&gt;flushed as HFiles&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;force the &lt;strong&gt;compaction&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
You may have heard about &lt;b&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blogs.apache.org&#x2F;hbase&#x2F;entry&#x2F;accordion-hbase-breathes-with-in&quot;&gt;Accordion&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;, the new feature in HBase 2. If you are playing with HBase 2, you can enable it by following &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#inmemory_compaction&quot;&gt;this link&lt;&#x2F;a&gt; and run &lt;b&gt;compactions directly in the MemStores.&lt;&#x2F;b&gt;
&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:014:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; flush &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.4456 seconds    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:015:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; compact &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0468 seconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# wait a bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:016:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {RAW =&amp;gt; true}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                            COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; row(s)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0060 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;how-does-it-works&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-works&quot; aria-label=&quot;Anchor link for: how-does-it-works&quot;&gt;üîó&lt;&#x2F;a&gt;How does it works?&lt;&#x2F;h1&gt;
&lt;p&gt;As always, the truth is held by the documentation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A {row, column, version} tuple exactly specifies a cell in HBase. It‚Äôs possible to have an unbounded number of cells where the row and column are the same but the cell address differs only in its version dimension.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;While rows and column keys are expressed as bytes, &lt;strong&gt;the version is specified using a long integer&lt;&#x2F;strong&gt;. Typically &lt;strong&gt;this long contains time instances&lt;&#x2F;strong&gt; such as those returned by java.util.Date.getTime() or &lt;strong&gt;System.currentTimeMillis()&lt;&#x2F;strong&gt;,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#versions&quot;&gt;HBase Book: Versions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may have seen it during our scan earlier, there is a &lt;strong&gt;timestamp associated&lt;&#x2F;strong&gt; with the version of the cell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:003:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;                          timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#                           here  ^^^^^^^^^^^^^^^^^^^^^^^ 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hbase used the &lt;code&gt;System.currentTimeMillis()&lt;&#x2F;code&gt; at ingest time to add it. During scanner and compaction, as time went by, &lt;strong&gt;there was more than TTL seconds between the cell version and now, so the row was discarded&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now the real question is: &lt;strong&gt;can you set it by yourself and be real Time-Lord&lt;&#x2F;strong&gt; (of HBase)?&lt;&#x2F;p&gt;
&lt;p&gt;The reponse is &lt;em&gt;yes!&lt;&#x2F;em&gt; There is also a bit of a warning a bit &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#_explicit_version_example&quot;&gt;below:&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caution:&lt;&#x2F;em&gt; the version timestamp is used internally by HBase for things like &lt;strong&gt;time-to-live calculations&lt;&#x2F;strong&gt;. It‚Äôs usually best to avoid setting this timestamp yourself. Prefer using a separate timestamp attribute of the row, or have the timestamp as a part of the row key, or both.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s try it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt; +%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+2 min&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1558472441  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# don&amp;#39;t forget to add 3 zeroes as the time need to be in millisecond!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bin&#x2F;hbase&lt;&#x2F;span&gt;&lt;span&gt; shell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:001:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; put &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row1234&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;timestamp Demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, 1558472441000  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:044:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                            COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row1234&lt;&#x2F;span&gt;&lt;span&gt;                       column=cf1:desc, timestamp=1558473315, value=timestamp Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0031 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we are using a timestamp at the end of the &lt;code&gt;put&lt;&#x2F;code&gt; method? This will &lt;strong&gt;add the desired timestamp to the version&lt;&#x2F;strong&gt;. Which means that &lt;strong&gt;your application can control when your version will be removed, even with a TTL on your column-qualifier.&lt;&#x2F;strong&gt; You just need to compute a timestamp like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ts = now - ttlCF + desiredTTL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">hbase</category>
          <category domain="tag">storage</category>
          <category domain="tag">expiration</category>
      </item>
      <item>
          <title>Handling OVH&#x27;s alerts with Apache Flink</title>
          <pubDate>Sun, 03 Feb 2019 15:37:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/ovh-alerts-flink/</link>
          <guid>https://pierrezemb.fr/posts/ovh-alerts-flink/</guid>
          <description xml:base="https://pierrezemb.fr/posts/ovh-alerts-flink/">&lt;p&gt;This is a repost from &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;blog&#x2F;handling-ovhs-alerts-with-apache-flink&#x2F;&quot; title=&quot;Permalink to Handling OVH&amp;#39;s alerts with Apache Flink&quot;&gt;OVH&#x27;s official blogpost.&lt;&#x2F;a&gt;. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LostInBrittany&#x2F;&quot;&gt;Horacio Gonzalez&lt;&#x2F;a&gt; for the awesome drawings!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;handling-ovh-s-alerts-with-apache-flink&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-ovh-s-alerts-with-apache-flink&quot; aria-label=&quot;Anchor link for: handling-ovh-s-alerts-with-apache-flink&quot;&gt;üîó&lt;&#x2F;a&gt;Handling OVH&#x27;s alerts with Apache Flink&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;01&#x2F;001-1.png?x70472&quot; alt=&quot;OVH &amp;amp; Apache Flink&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OVH relies extensively on &lt;strong&gt;metrics&lt;&#x2F;strong&gt; to effectively monitor its entire stack. Whether they are &lt;strong&gt;low-level&lt;&#x2F;strong&gt; or &lt;strong&gt;business&lt;&#x2F;strong&gt; centric, they allow teams to gain &lt;strong&gt;insight&lt;&#x2F;strong&gt; into how our services are operating on a daily basis. The need to store &lt;strong&gt;millions of datapoints per second&lt;&#x2F;strong&gt; has produced the need to create a dedicated team to build a operate a product to handle that load: &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;**Metrics Data Platform&lt;&#x2F;a&gt;.&lt;strong&gt;By relying on &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;**Apache Hbase&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;&quot;&gt;Apache Kafka&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.warp10.io&#x2F;&quot;&gt;&lt;strong&gt;Warp 10&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, we succeeded in creating a fully distributed platform that is handling all our metrics‚Ä¶ and yours!&lt;&#x2F;p&gt;
&lt;p&gt;After building the platform to deal with all those metrics, our next challenge was to build one of the most needed feature for Metrics: the &lt;strong&gt;Alerting.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meet-omni-our-alerting-layer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#meet-omni-our-alerting-layer&quot; aria-label=&quot;Anchor link for: meet-omni-our-alerting-layer&quot;&gt;üîó&lt;&#x2F;a&gt;Meet OMNI, our alerting layer&lt;&#x2F;h2&gt;
&lt;p&gt;OMNI is our code name for a &lt;strong&gt;fully distributed&lt;&#x2F;strong&gt;, &lt;strong&gt;as-code&lt;&#x2F;strong&gt;, &lt;strong&gt;alerting&lt;&#x2F;strong&gt; system that we developed on top of Metrics. It is split into components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The management part&lt;&#x2F;strong&gt;, taking your alerts definitions defined in a Git repository, and represent them as continuous queries,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The query executor&lt;&#x2F;strong&gt;, scheduling your queries in a distributed way.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The query executor is pushing the query results into Kafka, ready to be handled! We now need to perform all the tasks that an alerting system does:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Handling alerts &lt;strong&gt;deduplication&lt;&#x2F;strong&gt; and &lt;strong&gt;grouping&lt;&#x2F;strong&gt;, to avoid &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Alarm_fatigue&quot;&gt;alert fatigue.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Handling &lt;strong&gt;escalation&lt;&#x2F;strong&gt; steps, &lt;strong&gt;acknowledgement&lt;&#x2F;strong&gt;or &lt;strong&gt;snooze&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Notify&lt;&#x2F;strong&gt; the end user, through differents &lt;strong&gt;channels&lt;&#x2F;strong&gt;: SMS, mail, Push notifications, ‚Ä¶&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To handle that, we looked at open-source projects, such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;alertmanager&quot;&gt;Prometheus AlertManager,&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;open-sourcing-iris-and-oncall&quot;&gt;LinkedIn Iris,&lt;&#x2F;a&gt; we discovered the &lt;em&gt;hidden&lt;&#x2F;em&gt; truth:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Handling alerts as streams of data,&lt;br &#x2F;&gt;
moving from operators to another.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We embraced it, and decided to leverage &lt;a href=&quot;https:&#x2F;&#x2F;flink.apache.org&#x2F;&quot;&gt;Apache Flink&lt;&#x2F;a&gt; to create &lt;strong&gt;Beacon&lt;&#x2F;strong&gt;. In the next section we are going to describe the architecture of Beacon, and how we built and operate it.&lt;&#x2F;p&gt;
&lt;p&gt;If you want some more information on Apache Flink, we suggest to read the introduction article on the official website: &lt;a href=&quot;https:&#x2F;&#x2F;flink.apache.org&#x2F;flink-architecture.html&quot;&gt;What is Apache Flink?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;beacon-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#beacon-architecture&quot; aria-label=&quot;Anchor link for: beacon-architecture&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;strong&gt;Beacon architecture&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At his core, Beacon is reading events from &lt;strong&gt;Kafka&lt;&#x2F;strong&gt;. Everything is represented as a &lt;strong&gt;message&lt;&#x2F;strong&gt;, from alerts to aggregations rules, snooze orders and so on. The pipeline is divided into two branches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;One that is running the &lt;strong&gt;aggregations&lt;&#x2F;strong&gt;, and triggering notifications based on customer&#x27;s rules.&lt;&#x2F;li&gt;
&lt;li&gt;One that is handling the &lt;strong&gt;escalation steps&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then everything is merged to &lt;strong&gt;generate&lt;&#x2F;strong&gt; &lt;strong&gt;a&lt;&#x2F;strong&gt; &lt;strong&gt;notification&lt;&#x2F;strong&gt;, that is going to be forward to the right person. A notification message is pushed into Kafka, that will be consumed by another component called &lt;strong&gt;beacon-notifier.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-states&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-states&quot; aria-label=&quot;Anchor link for: handling-states&quot;&gt;üîó&lt;&#x2F;a&gt;Handling States&lt;&#x2F;h2&gt;
&lt;p&gt;If you are new to streaming architecture, I recommend reading &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.7&#x2F;concepts&#x2F;programming-model.html&quot;&gt;Dataflow Programming Model&lt;&#x2F;a&gt; from Flink official documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Everything is merged into a dataStream, &lt;strong&gt;partitionned&lt;&#x2F;strong&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;r&#x2F;?url=https%3A%2F%2Fci.apache.org%2Fprojects%2Fflink%2Fflink-docs-release-1.7%2Fdev%2Fstream%2Fstate%2Fstate.html%23keyed-state&quot;&gt;keyed by&lt;&#x2F;a&gt;in Flink API) by users. Here&#x27;s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DataStream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; alertStream =
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Partitioning Stream per AlertIdentifier
&lt;&#x2F;span&gt;&lt;span&gt;      cleanedAlertsStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyBy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Applying a Map Operation which is setting since when an alert is triggered
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SetSinceOnSelector&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setting-since-on-selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setting-since-on-selector&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Partitioning again Stream per AlertIdentifier
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyBy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Applying another Map Operation which is setting State and Trend
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SetStateAndTrend&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setting-state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setting-state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the example above, we are chaining two keyed operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SetSinceOnSelector&lt;&#x2F;strong&gt;, which is setting &lt;strong&gt;since&lt;&#x2F;strong&gt; when the alert is triggered&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SetStateAndTrend&lt;&#x2F;strong&gt;, which is setting the &lt;strong&gt;state&lt;&#x2F;strong&gt;(ONGOING, RECOVERY or OK) and the &lt;strong&gt;trend&lt;&#x2F;strong&gt;(do we have more or less metrics in errors).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each of this class is under 120 lines of codes because Flink is &lt;strong&gt;handling all the difficulties&lt;&#x2F;strong&gt;. Most of the pipeline are &lt;strong&gt;only composed&lt;&#x2F;strong&gt; of &lt;strong&gt;classic transformations&lt;&#x2F;strong&gt; such as &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.7&#x2F;dev&#x2F;stream&#x2F;operators&#x2F;&quot;&gt;Map, FlatMap, Reduce&lt;&#x2F;a&gt;, including their &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-stable&#x2F;dev&#x2F;api_concepts.html#rich-functions&quot;&gt;Rich&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-stable&#x2F;dev&#x2F;stream&#x2F;state&#x2F;state.html#using-managed-keyed-state&quot;&gt;Keyed&lt;&#x2F;a&gt; version. We have a few &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.7&#x2F;dev&#x2F;stream&#x2F;operators&#x2F;process_function.html&quot;&gt;Process Functions&lt;&#x2F;a&gt;, which are &lt;strong&gt;very handy&lt;&#x2F;strong&gt; to develop, for example, the escalation timer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integration-tests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-tests&quot; aria-label=&quot;Anchor link for: integration-tests&quot;&gt;üîó&lt;&#x2F;a&gt;Integration tests&lt;&#x2F;h2&gt;
&lt;p&gt;As the number of classes was growing, we needed to test our pipeline. Because it is only wired to Kafka, we wrapped consumer and producer to create what we call **scenari:**a series of integration tests running different scenarios.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queryable-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#queryable-state&quot; aria-label=&quot;Anchor link for: queryable-state&quot;&gt;üîó&lt;&#x2F;a&gt;Queryable state&lt;&#x2F;h2&gt;
&lt;p&gt;One killer feature of Apache Flink is the &lt;strong&gt;capabilities of &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.7&#x2F;dev&#x2F;stream&#x2F;state&#x2F;queryable_state.html&quot;&gt;**&lt;strong&gt;querying the internal state&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; of an operator**. Even if it is a beta feature, it allows us the get the current state of the different parts of the job:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;at which escalation steps are we on&lt;&#x2F;li&gt;
&lt;li&gt;is it snoozed or &lt;em&gt;ack&lt;&#x2F;em&gt;-ed&lt;&#x2F;li&gt;
&lt;li&gt;Which alert is ongoing&lt;&#x2F;li&gt;
&lt;li&gt;and so on.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;01&#x2F;004-1.png?x70472&quot; alt=&quot;Queryable state overview&quot; &#x2F;&gt;Queryable state overview&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to this, we easily developed an &lt;strong&gt;API&lt;&#x2F;strong&gt; over the queryable state, that is powering our &lt;strong&gt;alerting view&lt;&#x2F;strong&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;studio.metrics.ovh.net&#x2F;&quot;&gt;Metrics Studio,&lt;&#x2F;a&gt; our codename for the Web UI of the Metrics Data Platform.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apache-flink-deployment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#apache-flink-deployment&quot; aria-label=&quot;Anchor link for: apache-flink-deployment&quot;&gt;üîó&lt;&#x2F;a&gt;Apache Flink deployment&lt;&#x2F;h3&gt;
&lt;p&gt;We deployed the latest version of Flink (&lt;strong&gt;1.7.1&lt;&#x2F;strong&gt; at the time of writing) directly on bare metal servers with a dedicated Zookeeper&#x27;s cluster using Ansible. Operating Flink has been a really nice surprise for us, with &lt;strong&gt;clear documentation and configuration&lt;&#x2F;strong&gt;, and an &lt;strong&gt;impressive resilience&lt;&#x2F;strong&gt;. We are capable of &lt;strong&gt;rebooting&lt;&#x2F;strong&gt; the whole Flink cluster, and the job is &lt;strong&gt;restarting at his last saved state&lt;&#x2F;strong&gt;, like nothing happened.&lt;&#x2F;p&gt;
&lt;p&gt;We are using &lt;strong&gt;RockDB&lt;&#x2F;strong&gt; as a state backend, backed by OpenStack &lt;strong&gt;Swift storage&lt;&#x2F;strong&gt;provided by OVH Public Cloud.&lt;&#x2F;p&gt;
&lt;p&gt;For monitoring, we are relying on &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-stable&#x2F;monitoring&#x2F;metrics.html#prometheus-orgapacheflinkmetricsprometheusprometheusreporter&quot;&gt;Prometheus Exporter&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ovh&#x2F;beamium&quot;&gt;Beamium&lt;&#x2F;a&gt; to gain &lt;strong&gt;observability&lt;&#x2F;strong&gt; over job&#x27;s health.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-short-we-love-apache-flink&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-short-we-love-apache-flink&quot; aria-label=&quot;Anchor link for: in-short-we-love-apache-flink&quot;&gt;üîó&lt;&#x2F;a&gt;In short, we love Apache Flink&lt;&#x2F;h3&gt;
&lt;p&gt;If you are used to work with stream related software, you may have realized that we did not used any rocket science or tricks. We may be relying on basics streaming features offered by Apache Flink, but they allowed us to tackle many business and scalability problems with ease.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;01&#x2F;0F28C7F7-9701-4C19-BAFB-E40439FA1C77.png?x70472&quot; alt=&quot;Apache Flink&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As such, we highly recommend that any developers should have a look to Apache Flink. I encourage you to go through &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;r&#x2F;?url=https%3A%2F%2Ftraining.da-platform.com%2F&quot;&gt;Apache Flink Training&lt;&#x2F;a&gt;, written by Data Artisans. Furthermore, the community has put a lot of effort to easily deploy Apache Flink to Kubernetes, so you can easily try Flink using our Managed Kubernetes!&lt;&#x2F;p&gt;
</description>
          <category domain="tag">streaming</category>
          <category domain="tag">flink</category>
          <category domain="tag">monitoring</category>
          <category domain="tag">distributed</category>
      </item>
      <item>
          <title>What are ACID transactions?</title>
          <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/acid-transactions/</link>
          <guid>https://pierrezemb.fr/posts/acid-transactions/</guid>
          <description xml:base="https://pierrezemb.fr/posts/acid-transactions/">&lt;h1 id=&quot;transaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transaction&quot; aria-label=&quot;Anchor link for: transaction&quot;&gt;üîó&lt;&#x2F;a&gt;Transaction?&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;Programming should be about transforming data&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;--- Programming Elixir 1.3 by Dave Thomas&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As developers, we are interacting oftenly with data, whenever handling it from an API or a messaging consumer. To store it, we started to create softwares called &lt;strong&gt;relational database management system&lt;&#x2F;strong&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_database_management_system&quot;&gt;RDBMS&lt;&#x2F;a&gt;. Thanks to them, we, as developers, can develop applications pretty easily, &lt;strong&gt;without the need to implement our own storage solution&lt;&#x2F;strong&gt;. Interacting with &lt;a href=&quot;https:&#x2F;&#x2F;www.mysql.com&#x2F;&quot;&gt;mySQL&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt; have now become a &lt;strong&gt;commodity&lt;&#x2F;strong&gt;. Handling a database is not that easy though, because anything can happen, from failures to concurrency isssues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How can we interact with &lt;strong&gt;datastores that can fail?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;What is happening if two users are  &lt;strong&gt;updating a value at the same time?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a database user, we are using &lt;code&gt;transactions&lt;&#x2F;code&gt; to answer these questions. As a developer, a transaction is a &lt;strong&gt;single unit of logic or work&lt;&#x2F;strong&gt;, sometimes made up of multiple operations. It is mainly an &lt;strong&gt;abstraction&lt;&#x2F;strong&gt; that we are using to &lt;strong&gt;hide underlying problems&lt;&#x2F;strong&gt;, such as concurrency or hardware faults.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ACID&lt;&#x2F;code&gt; appears in a paper published in 1983 called &lt;a href=&quot;https:&#x2F;&#x2F;sites.fas.harvard.edu&#x2F;~cs265&#x2F;papers&#x2F;haerder-1983.pdf&quot;&gt;&quot;Principles of transaction-oriented database recovery&quot;&lt;&#x2F;a&gt; written by &lt;em&gt;Theo Haerder&lt;&#x2F;em&gt; and &lt;em&gt;Andreas Reuter&lt;&#x2F;em&gt;. This paper introduce a terminology of properties for a transaction:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A&lt;&#x2F;strong&gt;tomic, &lt;strong&gt;C&lt;&#x2F;strong&gt;onsistency, &lt;strong&gt;I&lt;&#x2F;strong&gt;solation, &lt;strong&gt;D&lt;&#x2F;strong&gt;urability&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;atomic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#atomic&quot; aria-label=&quot;Anchor link for: atomic&quot;&gt;üîó&lt;&#x2F;a&gt;Atomic&lt;&#x2F;h2&gt;
&lt;p&gt;Atomic, as you may have guessed, &lt;code&gt;atomic&lt;&#x2F;code&gt; represents something that &lt;strong&gt;cannot be splitted&lt;&#x2F;strong&gt;. In the database transaction world, it means for example that if a transaction with several writes is &lt;strong&gt;started and failed&lt;&#x2F;strong&gt; at some point, &lt;strong&gt;none of the write will be committed&lt;&#x2F;strong&gt;. As stated by many, the word &lt;code&gt;atomic&lt;&#x2F;code&gt; could be reword as &lt;code&gt;abortability&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;consistency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consistency&quot; aria-label=&quot;Anchor link for: consistency&quot;&gt;üîó&lt;&#x2F;a&gt;Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;You will hear about &lt;code&gt;consistency&lt;&#x2F;code&gt; a lot of this serie. Unfortunately, this word can be used in a lot of context. In the ACID definition, it refers to the fact that a transaction will &lt;strong&gt;bring the database from one valid state to another.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;isolation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation&quot; aria-label=&quot;Anchor link for: isolation&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation&lt;&#x2F;h2&gt;
&lt;p&gt;Think back to your database. Were you the only user on it? I don&#x27;t think so. Maybe they were concurrent transactions at the same time, beside yours. &lt;strong&gt;Isolation while keeping good performance is the most difficult item on the list.&lt;&#x2F;strong&gt; There&#x27;s a lot of litterature and papers about it, and we will only scratch the surface. There is different transaction isolation levels, depending on the number of guarantees provided.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;isolation-by-the-theory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-by-the-theory&quot; aria-label=&quot;Anchor link for: isolation-by-the-theory&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation by the theory&lt;&#x2F;h3&gt;
&lt;p&gt;The SQL standard defines four isolation levels: &lt;code&gt;Serializable&lt;&#x2F;code&gt;, &lt;code&gt;Repeatable Read&lt;&#x2F;code&gt;, &lt;code&gt;Read Commited&lt;&#x2F;code&gt; and &lt;code&gt;Read Uncommited&lt;&#x2F;code&gt;. The strongest isolation is &lt;code&gt;Serializable&lt;&#x2F;code&gt; where transaction are &lt;strong&gt;not runned in parallel&lt;&#x2F;strong&gt;. As you may have guessed, it is also the slowest. &lt;strong&gt;Weaker isolation level are trading speed against anomalies&lt;&#x2F;strong&gt; that can be sum-up like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Isolation level&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Dirty_reads&quot;&gt;dirty reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_%28database_systems%29#Non-repeatable_reads&quot;&gt;Non-repeatable reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Phantom_reads&quot;&gt;Phantom reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;Performance&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Serializable&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Repeatable Read&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read Commited&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read uncommited&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëçüëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;I encourage you to click on all the links within the table to &lt;strong&gt;see everything that could go wrong in a weak database!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;isolation-in-real-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-in-real-databases&quot; aria-label=&quot;Anchor link for: isolation-in-real-databases&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation in Real Databases&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we saw some theory, let&#x27;s have a look on a particular well-known database: PostgreSQL. What kind of isolation PostgreSQL is offering?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL provides a rich set of tools for developers to manage concurrent access to data. Internally, data consistency is maintained by using a multiversion model (&lt;strong&gt;Multiversion Concurrency Control, MVCC&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;--- &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;mvcc-intro.html&quot;&gt;Concurrency Control introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wait what? What is MVCC? Well, turns out that after the SQL standards came another type of Isolation: &lt;strong&gt;Snapshot Isolation&lt;&#x2F;strong&gt;. Instead of locking that row for reading when somebody starts working on it, it ensures that &lt;strong&gt;any transaction will see a version of the data that is corresponding to the start of the query&lt;&#x2F;strong&gt;. As it is providing a good balance between &lt;strong&gt;performance and consistency&lt;&#x2F;strong&gt;, it became &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_databases_using_MVCC&quot;&gt;a standard used by the industry&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;durability&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#durability&quot; aria-label=&quot;Anchor link for: durability&quot;&gt;üîó&lt;&#x2F;a&gt;Durability&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Durability&lt;&#x2F;code&gt; ensure that your database is a &lt;strong&gt;safe place&lt;&#x2F;strong&gt; where data can be stored without fear of losing it. If a transaction has commited successfully, any written data will not be forgotten.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;that-s-it&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-s-it&quot; aria-label=&quot;Anchor link for: that-s-it&quot;&gt;üîó&lt;&#x2F;a&gt;That&#x27;s it?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;All these properties may seems obvious to you&lt;&#x2F;strong&gt; but each of the item is involving a lot of engineering and researchs. And this is only valid for a single machine, &lt;strong&gt;the distributed transaction field&lt;&#x2F;strong&gt; is even more complicated, but we will get to it in another blogpost!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">transactions</category>
          <category domain="tag">sql</category>
          <category domain="tag">storage</category>
      </item>
      <item>
          <title>Hbase Data Model</title>
          <pubDate>Sun, 27 Jan 2019 20:24:27 +0100</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/hbase-data-model/</link>
          <guid>https://pierrezemb.fr/posts/hbase-data-model/</guid>
          <description xml:base="https://pierrezemb.fr/posts/hbase-data-model/">&lt;h2 id=&quot;hbase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase&quot; aria-label=&quot;Anchor link for: hbase&quot;&gt;üîó&lt;&#x2F;a&gt;HBase?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase‚Ñ¢&lt;&#x2F;a&gt; is a type of &quot;NoSQL&quot; database. &quot;NoSQL&quot; is a general term meaning that the database isn‚Äôt an RDBMS which supports SQL as its primary access language. Technically speaking, HBase is really more a &quot;Data Store&quot; than &quot;Data Base&quot; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.nosql&quot;&gt;Hbase architecture overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-data-model&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-data-model&quot; aria-label=&quot;Anchor link for: hbase-data-model&quot;&gt;üîó&lt;&#x2F;a&gt;Hbase data model&lt;&#x2F;h2&gt;
&lt;p&gt;The data model is simple: it&#x27;s like a multi-dimensional map:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Elements are stored as &lt;strong&gt;rows&lt;&#x2F;strong&gt; in a &lt;strong&gt;table&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each table has only &lt;strong&gt;one index, the row key&lt;&#x2F;strong&gt;. There are no secondary indices.&lt;&#x2F;li&gt;
&lt;li&gt;Rows are &lt;strong&gt;sorted lexicographically by row key&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A range of rows is called a &lt;strong&gt;region&lt;&#x2F;strong&gt;. It is similar to a shard.&lt;&#x2F;li&gt;
&lt;li&gt;A row in HBase consists of a &lt;strong&gt;row key&lt;&#x2F;strong&gt; and &lt;strong&gt;one or more columns&lt;&#x2F;strong&gt;, which are holding the cells.&lt;&#x2F;li&gt;
&lt;li&gt;Values are stored into what we call a &lt;strong&gt;cell&lt;&#x2F;strong&gt; and are versioned with a timestamp.&lt;&#x2F;li&gt;
&lt;li&gt;A column is divided between a &lt;strong&gt;Column Family&lt;&#x2F;strong&gt; and a &lt;strong&gt;Column Qualifier&lt;&#x2F;strong&gt;. Long story short, a Column Family is kind of like a column in classic SQL, and a qualifier is a sub-structure inside a Colum family. A column Family is &lt;strong&gt;static&lt;&#x2F;strong&gt;, you need to create it during table creation, whereas Column Qualifiers can be created on the fly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not as easy as you thought? Here&#x27;s an example! Let&#x27;s say that we&#x27;re trying to &lt;strong&gt;save the whole internet&lt;&#x2F;strong&gt;. To do this, we need to store the content of each pages, and versioned it. We can use &lt;strong&gt;the page address as the row key&lt;&#x2F;strong&gt; and store the contents in a &lt;strong&gt;column called &quot;Contents&quot;&lt;&#x2F;strong&gt;. Nowadays, website &lt;strong&gt;contents can be anything&lt;&#x2F;strong&gt;, from a HTML file to a binary such as a PDF. To handle that, we can create as many &lt;strong&gt;qualifiers&lt;&#x2F;strong&gt; as we want, such as &quot;content:html&quot; or &quot;content:video&quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fr.pierrezemb.www&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Row key
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Column family
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content:html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Column qualifier
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2017-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A timestamp
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The actual value
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2016-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another timestamp
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another cell
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content:pdf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another Column qualifier
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2015-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;pdf&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; my website may only contained a pdf in 2015
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;key-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-design&quot; aria-label=&quot;Anchor link for: key-design&quot;&gt;üîó&lt;&#x2F;a&gt;Key design&lt;&#x2F;h2&gt;
&lt;p&gt;Hbase is most efficient at queries when we&#x27;re getting a &lt;strong&gt;single row key&lt;&#x2F;strong&gt;, or during &lt;strong&gt;row range&lt;&#x2F;strong&gt;, ie. getting a block of contiguous data because keys are &lt;strong&gt;sorted lexicographically by row key&lt;&#x2F;strong&gt;. For example, my website &lt;code&gt;fr.pierrezemb.www&lt;&#x2F;code&gt; and &lt;code&gt;org.pierrezemb.www&lt;&#x2F;code&gt; would not be &quot;near&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;As such, the &lt;strong&gt;key design&lt;&#x2F;strong&gt; is really important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If your data are too spread, you will have poor performance.&lt;&#x2F;li&gt;
&lt;li&gt;If your data are too much collocate, you will also have poor performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As stated by the official &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#rowkey.design&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hotspotting occurs when a &lt;strong&gt;large amount of client traffic is directed at one node, or only a few nodes, of a cluster&lt;&#x2F;strong&gt;. This traffic may represent reads, writes, or other operations. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As you may have guessed, this is why we are using the &lt;strong&gt;reverse address name&lt;&#x2F;strong&gt; in my example, because &lt;code&gt;www&lt;&#x2F;code&gt; is too generic, we would have hotspot the poor region holding data for &lt;code&gt;www&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are curious about Hbase schema, you should have a look on &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;bigtable&#x2F;docs&#x2F;schema-design&quot;&gt;Designing Your BigTable Schema&lt;&#x2F;a&gt;, as BigTable is kind of the proprietary version of Hbase.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-warned&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-warned&quot; aria-label=&quot;Anchor link for: be-warned&quot;&gt;üîó&lt;&#x2F;a&gt;Be warned&lt;&#x2F;h2&gt;
&lt;p&gt;I have been working with Hbase for the past three years, &lt;strong&gt;including operation and on-call duty.&lt;&#x2F;strong&gt; It is a really nice data store, but it diverges from classical RDBMS. Here&#x27;s some warnings extracted from the well-written documentation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;HBase is really more a &quot;Data Store&quot; than &quot;Data Base&quot; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc. However, HBase has many features which supports both linear and modular scaling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.nosql&quot;&gt;NoSQL?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have hundreds of millions or billions of rows, then HBase is a good candidate. If you only have a few thousand&#x2F;million rows, then using a traditional RDBMS might be a better choice due to the fact that all of your data might wind up on a single node (or two) and the rest of the cluster may be sitting idle.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.when&quot;&gt;When Should I Use HBase?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">distributed</category>
          <category domain="tag">hbase</category>
          <category domain="tag">storage</category>
          <category domain="tag">design</category>
      </item>
      <item>
          <title>Introducing HelloExoWorld: The quest to discover exoplanets with Warp10 and Tensorflow</title>
          <pubDate>Wed, 11 Oct 2017 10:23:11 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow/</link>
          <guid>https://pierrezemb.fr/posts/introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow/</guid>
          <description xml:base="https://pierrezemb.fr/posts/introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;helloexoworld&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow-e50f6e669915&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;1.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;
&lt;em&gt;Artist‚Äôs impression of the super-Earth exoplanet LHS 1140b By &lt;a href=&quot;https:&#x2F;&#x2F;www.eso.org&#x2F;public&#x2F;images&#x2F;eso1712a&#x2F;&quot;&gt;ESO&#x2F;spaceengine.org&lt;&#x2F;a&gt;‚Ää‚Äî‚Ää&lt;a href=&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by&#x2F;4.0&quot;&gt;CC BY 4.0&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My passion for programming was kind of late, I typed my first line of code at my engineering school. It then became a &lt;strong&gt;passion&lt;&#x2F;strong&gt;, something I‚Äôm willing to do at work, on my free-time, at night or the week-end. But before discovering C and other languages, I had another passion: &lt;strong&gt;astronomy&lt;&#x2F;strong&gt;. Every summer, I was participating at the &lt;a href=&quot;https:&#x2F;&#x2F;www.afastronomie.fr&#x2F;les-nuits-des-etoiles&quot;&gt;&lt;strong&gt;Nuit des Etoiles&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, a &lt;strong&gt;global french event&lt;&#x2F;strong&gt; organized by numerous clubs of astronomers offering several hundreds (between 300 and 500 depending on the year) of free animation sites for the general public.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;2.png&quot; alt=&quot;image&quot; &#x2F;&gt;
&lt;em&gt;As you can see below, I was &lt;strong&gt;kind of young at the time&lt;&#x2F;strong&gt;!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;But the sad truth is that I didn‚Äôt do any astronomy during my studies. But now, &lt;strong&gt;I want to get back to it and look at the sky again&lt;&#x2F;strong&gt;. There were two obstacles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The price of equipments&lt;&#x2F;li&gt;
&lt;li&gt;The local weather&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;I was looking for something that would unit my two passions: computer and astronomy&lt;&#x2F;strong&gt;. So I started googling:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;3.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I found a lot of amazing projects using Raspberry pis, but I didn‚Äôt find something that would &lt;strong&gt;motivate me&lt;&#x2F;strong&gt; over the time. So I started typing over keywords, more work-related, such as &lt;em&gt;&lt;strong&gt;time series&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; or &lt;em&gt;&lt;strong&gt;analytics&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;. I found many papers related to astrophysics, but there was two keywords that were coming back: &lt;strong&gt;exoplanet detection&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-an-exoplanet-and-how-to-detect-it&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-an-exoplanet-and-how-to-detect-it&quot; aria-label=&quot;Anchor link for: what-is-an-exoplanet-and-how-to-detect-it&quot;&gt;üîó&lt;&#x2F;a&gt;What is an exoplanet and how to detect it?&lt;&#x2F;h3&gt;
&lt;p&gt;Let‚Äôs quote our good old friend &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exoplanet&quot;&gt;&lt;strong&gt;Wikipedia&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An exoplanet or extrasolar planet is a planet outside of our solar system that orbits a star.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;do you know how many exoplanets that have been discovered? &lt;a href=&quot;https:&#x2F;&#x2F;exoplanetarchive.ipac.caltech.edu&#x2F;&quot;&gt;&lt;strong&gt;3,529 confirmed planets&lt;&#x2F;strong&gt; as of 10&#x2F;09&#x2F;2017&lt;&#x2F;a&gt;. I was amazed by the number of them. I started digging into the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Methods_of_detecting_exoplanets&quot;&gt;&lt;strong&gt;detection methods&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Turns out there is one method heavily used, called &lt;strong&gt;the transit method&lt;&#x2F;strong&gt;. It‚Äôs like a eclipse: when the exoplanet is passing in front of the star, the photometry is varying during the transit, as shown below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;4.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;animation illustrating how a dip in the observed brightness of a star may indicate the presence of an exoplanet. &lt;em&gt;&lt;strong&gt;Credits: NASA‚Äôs Goddard Space Flight Center&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To recap, exoplanet detection using the transit method are in reality a &lt;strong&gt;time series analysis problem&lt;&#x2F;strong&gt;. As I‚Äôm starting to be familiar with that type of analytics thanks to my current work at OVH in &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;&lt;strong&gt;Metrics Data Platform&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I wanted to give it a try.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kepler-k2-mission&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kepler-k2-mission&quot; aria-label=&quot;Anchor link for: kepler-k2-mission&quot;&gt;üîó&lt;&#x2F;a&gt;Kepler&#x2F;K2 mission&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;5.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Image Credit: NASA Ames&#x2F;W. Stenzel&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Kepler is a &lt;strong&gt;space observatory&lt;&#x2F;strong&gt; launched by NASA in March 2009 to &lt;strong&gt;discover Earth-sized planets orbiting other stars&lt;&#x2F;strong&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;www.nasa.gov&#x2F;feature&#x2F;ames&#x2F;nasas-k2-mission-the-kepler-space-telescopes-second-chance-to-shine&quot;&gt;The loss of a second of the four reaction wheels during May 2013&lt;&#x2F;a&gt; put an end to the original mission. Fortunately, scientists decided to create an &lt;strong&gt;entirely community-driven mission&lt;&#x2F;strong&gt; called K2, to &lt;strong&gt;reuse the Kepler spacecraft and its assets&lt;&#x2F;strong&gt;. But furthermore, the community is also encouraged to exploit the mission‚Äôs unique &lt;strong&gt;open&lt;&#x2F;strong&gt; data archive. Every image taken by the satellite can be &lt;strong&gt;downloaded and analyzed by anyone&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;More information about the telescope itself can be found &lt;a href=&quot;https:&#x2F;&#x2F;keplerscience.arc.nasa.gov&#x2F;the-kepler-space-telescope.html&quot;&gt;&lt;strong&gt;here&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;where-i-m-going&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-i-m-going&quot; aria-label=&quot;Anchor link for: where-i-m-going&quot;&gt;üîó&lt;&#x2F;a&gt;Where I‚Äôm going&lt;&#x2F;h3&gt;
&lt;p&gt;The goal of my project is to see if &lt;strong&gt;I can contribute to the exoplanets search&lt;&#x2F;strong&gt; using new tools such as &lt;a href=&quot;http:&#x2F;&#x2F;www.warp10.io&quot;&gt;&lt;strong&gt;Warp10&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;tensorflow.org&#x2F;&quot;&gt;&lt;strong&gt;TensorFlow&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Using &lt;strong&gt;Deep Learning to search for anomalies could be much more effective&lt;&#x2F;strong&gt; than writing WarpScript, because it is the &lt;strong&gt;neural network&#x27;s job to learn&lt;&#x2F;strong&gt; by itself &lt;strong&gt;how&lt;&#x2F;strong&gt; to detect the exoplanets.&lt;&#x2F;p&gt;
&lt;p&gt;As I‚Äôm currently following &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;neural-networks-deep-learning&quot;&gt;&lt;strong&gt;Andrew Ng courses about Deep Learning&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, it is also a great opportunity for me to play with &lt;strong&gt;Tensorflow&lt;&#x2F;strong&gt; in a personal project. The project can be divided into several steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Import&lt;&#x2F;strong&gt; the data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Analyze&lt;&#x2F;strong&gt; the data using WarpScript&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;&#x2F;strong&gt; a neural network to search for exoplanets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see how the import was done!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;importing-kepler-and-k2-dataset&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#importing-kepler-and-k2-dataset&quot; aria-label=&quot;Anchor link for: importing-kepler-and-k2-dataset&quot;&gt;üîó&lt;&#x2F;a&gt;Importing Kepler and K2 dataset&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;step-0-find-the-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-0-find-the-data&quot; aria-label=&quot;Anchor link for: step-0-find-the-data&quot;&gt;üîó&lt;&#x2F;a&gt;Step 0: Find the data&lt;&#x2F;h4&gt;
&lt;p&gt;As mentioned previously, data are available from The Mikulski Archive for Space Telescopes or &lt;a href=&quot;https:&#x2F;&#x2F;archive.stsci.edu&#x2F;&quot;&gt;MAST&lt;&#x2F;a&gt;. It‚Äôs a &lt;strong&gt;NASA funded project&lt;&#x2F;strong&gt; to support and provide the astronomical community with a variety of astronomical data archives. Both Kepler and K2 dataset are &lt;strong&gt;available&lt;&#x2F;strong&gt; through &lt;strong&gt;campaigns&lt;&#x2F;strong&gt;. Each campaign has a collection of tar files, which are containing the FITS files associated. A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FITS&quot;&gt;&lt;strong&gt;FITS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; file is an &lt;strong&gt;open format&lt;&#x2F;strong&gt; for images which is also &lt;strong&gt;containing scientific data&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;6.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;FITS file representation.&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;keplerscience.arc.nasa.gov&#x2F;k2-observing.html&quot;&gt;&lt;em&gt;Image Credit: KEPLER &amp;amp; K2 Science Center&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-etl-extract-transform-and-load-into-warp10&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-1-etl-extract-transform-and-load-into-warp10&quot; aria-label=&quot;Anchor link for: step-1-etl-extract-transform-and-load-into-warp10&quot;&gt;üîó&lt;&#x2F;a&gt;Step 1: ETL (Extract, Transform and Load) into Warp10&lt;&#x2F;h4&gt;
&lt;p&gt;To speed-up acquisition, I developed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;kepler-lens&quot;&gt;&lt;strong&gt;kepler-lens&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to &lt;strong&gt;automatically&lt;&#x2F;strong&gt; &lt;strong&gt;download Kepler&#x2F;K2 datasets and extract the needed time series&lt;&#x2F;strong&gt; into a CSV format. &lt;strong&gt;Kepler-lens&lt;&#x2F;strong&gt; is using two awesome libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KeplerGO&#x2F;PyKE&quot;&gt;&lt;strong&gt;pyKe&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to export the data from the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FITS&quot;&gt;&lt;strong&gt;FITS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; files to CSV (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KeplerGO&#x2F;PyKE&#x2F;pull&#x2F;69&quot;&gt;&lt;strong&gt;#PR69&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KeplerGO&#x2F;PyKE&#x2F;pull&#x2F;76&quot;&gt;&lt;strong&gt;#PR76&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;  have been merged).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dfm&#x2F;kplr&quot;&gt;&lt;strong&gt;kplr&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is used to &lt;strong&gt;tag&lt;&#x2F;strong&gt; the dataset. With it, I can easily &lt;strong&gt;find stars&lt;&#x2F;strong&gt; with &lt;strong&gt;confirmed&lt;&#x2F;strong&gt; exoplanets or &lt;strong&gt;candidates&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;kepler2warp10&quot;&gt;&lt;strong&gt;Kepler2Warp10&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is used to &lt;strong&gt;push the CSV files generated by kepler-lens to Warp10&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To ease importation, an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;kepler2warp10-ansible&quot;&gt;&lt;strong&gt;Ansible role&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;  has been made, to spread the work across multiples small &lt;strong&gt;virtual machines&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;550k distincts stars&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;around &lt;strong&gt;50k datapoints per star&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s around &lt;strong&gt;27,5 billions of measures&lt;&#x2F;strong&gt; (300GB of LevelDB files), imported on a &lt;strong&gt;standalone&lt;&#x2F;strong&gt; instance. The Warp10 instance is &lt;strong&gt;self-hosted&lt;&#x2F;strong&gt; on a dedicated &lt;a href=&quot;https:&#x2F;&#x2F;www.kimsufi.com&#x2F;&quot;&gt;&lt;strong&gt;Kimsufi&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; server at OVH. Here‚Äôs the full specifications for the curious ones:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;7.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now that the data are &lt;strong&gt;available&lt;&#x2F;strong&gt;, we are ready to &lt;strong&gt;dive into the dataset&lt;&#x2F;strong&gt; and &lt;strong&gt;look for exoplanets&lt;&#x2F;strong&gt;! Let&#x27;s use WarpScript&lt;&#x2F;p&gt;
&lt;p&gt;!### Let&#x27;s see a transit using WarpScript&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;8.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;WarpScript logo&lt;&#x2F;p&gt;
&lt;p&gt;For those who don‚Äôt know WarpScript, I recommend reading my previous blogpost ‚Äú&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript-c97a9f4a0016&quot;&gt;&lt;strong&gt;Engage maximum warp speed in time series analysis with WarpScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs first plot the data! We are going to take a well-known star called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kepler-11&quot;&gt;&lt;strong&gt;Kepler-11&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. It has (at least) 6 confirmed exoplanets. Let&#x27;s write our first WarpScript:&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;www.warp10.io&#x2F;reference&#x2F;functions&#x2F;function_FETCH&quot;&gt;FETCH&lt;&#x2F;a&gt; function retrieves &lt;strong&gt;raw datapoints&lt;&#x2F;strong&gt; from Warp10. Let‚Äôs plot the result of our script:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;9.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mmmmh, the straight lines are representing &lt;strong&gt;empties period with no datapoints&lt;&#x2F;strong&gt;; they correspond to &lt;strong&gt;different observations&lt;&#x2F;strong&gt;. &lt;strong&gt;Let&#x27;s divide the data&lt;&#x2F;strong&gt; and generate &lt;strong&gt;one time series per observation&lt;&#x2F;strong&gt; using &lt;a href=&quot;http:&#x2F;&#x2F;www.warp10.io&#x2F;reference&#x2F;functions&#x2F;function_TIMESPLIT&#x2F;&quot;&gt;TIMESPLIT&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;To ease the display, 0 GET is used to &lt;strong&gt;get only the first observation&lt;&#x2F;strong&gt;. Let&#x27;s see the result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;10.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Much better. Do you see the dropouts? &lt;strong&gt;Those are transiting exoplanets!&lt;&#x2F;strong&gt; Now we‚Äôll need to &lt;strong&gt;write a WarpScript to automatically detect transits.&lt;&#x2F;strong&gt; But that was enough for today, so we‚Äôll cover this **in the next blogpost!**Thank you for reading! Feel free to &lt;strong&gt;comment&lt;&#x2F;strong&gt; and to &lt;strong&gt;subscribe&lt;&#x2F;strong&gt; to the &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;helloexoworld&quot;&gt;twitter account&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;introducing-helloexoworld-the-quest-to-discover-exoplanets-with-warp10-and-tensorflow&#x2F;11.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Artist‚Äôs impression of the ultracool dwarf star TRAPPIST-1 from close to one of its planets&lt;&#x2F;strong&gt;. Image Credit: By &lt;a href=&quot;http:&#x2F;&#x2F;www.eso.org&#x2F;public&#x2F;images&#x2F;eso1615b&#x2F;&quot;&gt;ESO&#x2F;M. Kornmesser&lt;&#x2F;a&gt;‚Ää‚Äî‚Ää&lt;a href=&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-sa&#x2F;4.0&quot;&gt;CC BY-SA 4.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
          <category domain="tag">space</category>
          <category domain="tag">timeseries</category>
          <category domain="tag">analytics</category>
          <category domain="tag">machinelearning</category>
      </item>
      <item>
          <title>Engage maximum warp speed in time series analysis with WarpScript</title>
          <pubDate>Sun, 08 Oct 2017 20:43:05 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/</link>
          <guid>https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/</guid>
          <description xml:base="https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript-c97a9f4a0016&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;1.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We, at &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt;, are working everyday with &lt;a href=&quot;http:&#x2F;&#x2F;www.warp10.io&#x2F;&quot;&gt;Warp10 Platform&lt;&#x2F;a&gt;, an open source Time Series database. You may not know it because it‚Äôs not as famous as &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;docs.influxdata.com&#x2F;influxdb&#x2F;&quot;&gt;InfluxDB&lt;&#x2F;a&gt; but Warp10 is the most &lt;strong&gt;powerful and generic solution&lt;&#x2F;strong&gt; to store and analyze sensor data. It‚Äôs the &lt;strong&gt;core&lt;&#x2F;strong&gt; of Metrics, and many internal teams from OVH are using &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt; to monitor their infrastructure. As a result, we are handling a pretty nice traffic 24&#x2F;7&#x2F;365, as you can see below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;6.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not only Warp10 allows us to reach an unbelievable scalability but it also comes with his own language called &lt;strong&gt;WarpScript&lt;&#x2F;strong&gt;, to manipulate and perform heavy time series analysis. Before digging into the need of a new language, let‚Äôs talk a bit about the need of time series analysis.### What is a time serie ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A time serie, or sensor data, is simply a sequence of measurements over time&lt;&#x2F;strong&gt;. The definition is quite generic, because many things can be represented as a time serie:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the evolution of the stock exchange or a bank account&lt;&#x2F;li&gt;
&lt;li&gt;the number of calls on a webserver&lt;&#x2F;li&gt;
&lt;li&gt;the fuel consumption of a car&lt;&#x2F;li&gt;
&lt;li&gt;the time to insert a value into a database&lt;&#x2F;li&gt;
&lt;li&gt;the time a customer is taking to register on your website&lt;&#x2F;li&gt;
&lt;li&gt;the heart rate of a person measured through a smartwatch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From an historical point of view, time series appeared shortly after the creation of the Web, to &lt;strong&gt;help engineers monitor the networks&lt;&#x2F;strong&gt;. It quickly expands to also monitors servers. With the right monitoring system, you can have &lt;strong&gt;insights&lt;&#x2F;strong&gt; and &lt;strong&gt;KPIs&lt;&#x2F;strong&gt; about your service:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Analysis of long-term trend&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How fast is my database growing?&lt;&#x2F;li&gt;
&lt;li&gt;At what speed my number of active user accounts grows?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;The comparison over time&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My queries run faster with the new version of my library? Is my site slower than last week?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Alerts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger alerts based on advanced queries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Displaying data through dashboards&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dashboards help answer basic questions on the service, and in particular the 4 indispensable metrics: &lt;strong&gt;latency, traffic, errors and service saturation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;The possibility of designing retrospective&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Our latency is doubling, what‚Äôs going on?### Time series are complicated to handle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Storage, retrieval and analysis of time series cannot be done through standard relational databases. Generally, highly scalable databases are used to support volumetry. For example, the &lt;strong&gt;300,000 Airbus A380 sensors on board can generate an average of 16 TB of data per flight&lt;&#x2F;strong&gt;. On a smaller scale, &lt;strong&gt;a single sensor that measures every second generates 31.5 million values per year&lt;&#x2F;strong&gt;. Handling time series at scale is difficult, because you‚Äôre running into advanced distributed systems issues, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ingestion scalability&lt;&#x2F;strong&gt;, i.e. how to absorb all the datapoints 24‚ÅÑ7&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;query scalability&lt;&#x2F;strong&gt;, i.e. how to query in a raisonnable amount of time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;delete capability&lt;&#x2F;strong&gt;, i.e. how to handle deletes without stopping ingestion and query&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Frustration with existing open source monitoring tools like &lt;strong&gt;Nagios&lt;&#x2F;strong&gt; and &lt;strong&gt;Ganglia&lt;&#x2F;strong&gt; is why the giants created their own tools‚Ää‚Äî‚Ää&lt;strong&gt;Google has Borgmon&lt;&#x2F;strong&gt; and &lt;strong&gt;Facebook has&lt;&#x2F;strong&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.vldb.org&#x2F;pvldb&#x2F;vol8&#x2F;p1816-teller.pdf&quot;&gt;&lt;strong&gt;Gorilla&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, just to name two. They are closed sources but the idea of treating time-series data as a data source for generating alerts is now accessible to everyone, thanks to the &lt;strong&gt;former Googlers who decided to rewrite Borgmon&lt;&#x2F;strong&gt; outside Google.### Why another time series database?&lt;&#x2F;p&gt;
&lt;p&gt;Now the time series ecosystem is bigger than ever, here‚Äôs a short list of what you can find to handle time series data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;InfluxDB.&lt;&#x2F;li&gt;
&lt;li&gt;Prometheus.&lt;&#x2F;li&gt;
&lt;li&gt;Riak TS.&lt;&#x2F;li&gt;
&lt;li&gt;OpenTSDB.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then there‚Äôs &lt;strong&gt;Warp10&lt;&#x2F;strong&gt;. The difference is quite simple, Warp10 is &lt;strong&gt;a platform&lt;&#x2F;strong&gt; whereas all the time series listed above are &lt;strong&gt;stores&lt;&#x2F;strong&gt;. This is game changing, for multiples reasons.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;security-first-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#security-first-design&quot; aria-label=&quot;Anchor link for: security-first-design&quot;&gt;üîó&lt;&#x2F;a&gt;Security-first design&lt;&#x2F;h4&gt;
&lt;p&gt;Security is mandatory for data access and sharing job‚Äôs results, but in most of the above databases, security access is not handled by default. With Warp10, security is handled with crypto tokens similar to &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;pubs&#x2F;pub41892.html&quot;&gt;Macaroons&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;high-level-analysis-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#high-level-analysis-capabilities&quot; aria-label=&quot;Anchor link for: high-level-analysis-capabilities&quot;&gt;üîó&lt;&#x2F;a&gt;High level analysis capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;Using classical time series database, &lt;strong&gt;high level analysis must be done elsewhere&lt;&#x2F;strong&gt;, with R, Spark, Flink, Python, or whatever languages or frameworks that you want to use. Using Warp10, you can just &lt;strong&gt;submit your script&lt;&#x2F;strong&gt; and &lt;em&gt;voil√†&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;server-side-calculation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#server-side-calculation&quot; aria-label=&quot;Anchor link for: server-side-calculation&quot;&gt;üîó&lt;&#x2F;a&gt;Server-side calculation&lt;&#x2F;h4&gt;
&lt;p&gt;Algorithms are resource heavy. Whatever they‚Äôre using CPU, ram, disk and network, you‚Äôll hit &lt;strong&gt;limitations&lt;&#x2F;strong&gt; on your personal computer. Can you really aggregate and analyze one year of data from thousands of sensors on your laptop? Maybe, but what if you‚Äôre submitting the job from a mobile? To be &lt;strong&gt;scalable&lt;&#x2F;strong&gt;, analysis must be done &lt;strong&gt;server-side&lt;&#x2F;strong&gt;.### Meet WarpScript&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;2.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Warp10 folks created WarpScript, an &lt;strong&gt;extensible&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stack-oriented_programming_language&quot;&gt;&lt;strong&gt;stack oriented programming language&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; which offers more than &lt;strong&gt;800 functions&lt;&#x2F;strong&gt; and &lt;strong&gt;several high level frameworks&lt;&#x2F;strong&gt; to ease and speed your data analysis. Simply &lt;strong&gt;create scripts&lt;&#x2F;strong&gt; containing your data analysis code and &lt;strong&gt;submit them to the platform&lt;&#x2F;strong&gt;, they will &lt;strong&gt;execute close to where the data resides&lt;&#x2F;strong&gt; and you will get the result of that analysis as a &lt;strong&gt;JSON object&lt;&#x2F;strong&gt; that you can &lt;strong&gt;integrate into your application&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, you‚Äôll be able to run that &lt;strong&gt;awesome query that is fetching millions of datapoints&lt;&#x2F;strong&gt; and only get the result. You need all the data, or just the timestamp of a weird datapoint? &lt;strong&gt;The result of the script is simply what‚Äôs left on the stack&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dataflow-language&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dataflow-language&quot; aria-label=&quot;Anchor link for: dataflow-language&quot;&gt;üîó&lt;&#x2F;a&gt;Dataflow language&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript is really easy to code, &lt;strong&gt;because of the stack design&lt;&#x2F;strong&gt;. You‚Äôll be &lt;strong&gt;pushing elements into the stack and consume them&lt;&#x2F;strong&gt;. Coding became logical. First you need to &lt;strong&gt;fetch&lt;&#x2F;strong&gt; your points, then &lt;strong&gt;applying some downsampling&lt;&#x2F;strong&gt; and then &lt;strong&gt;aggregate&lt;&#x2F;strong&gt;. These 3 steps are translated into &lt;strong&gt;3 lines of WarpScript&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FETCH&lt;&#x2F;strong&gt; will push the needed Geo Time Series into the stack&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;BUCKETIZE&lt;&#x2F;strong&gt; will take the Geo Time Series from the stack, apply some downsampling, and push the result into the stack&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;REDUCE&lt;&#x2F;strong&gt; will take the Geo Time Series from the stack, aggregate them, and push them back into the stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Debugguing as never be that easy, just use the keyword &lt;strong&gt;STOP&lt;&#x2F;strong&gt; to see the stack at any moment.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rich-programming-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rich-programming-capabilities&quot; aria-label=&quot;Anchor link for: rich-programming-capabilities&quot;&gt;üîó&lt;&#x2F;a&gt;Rich programming capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript is coming with more than &lt;strong&gt;800 functions&lt;&#x2F;strong&gt;, ready to use. Things like &lt;strong&gt;Patterns and outliers detections, rolling average, FFT, IDWT&lt;&#x2F;strong&gt; are built-in.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;geo-fencing-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geo-fencing-capabilities&quot; aria-label=&quot;Anchor link for: geo-fencing-capabilities&quot;&gt;üîó&lt;&#x2F;a&gt;Geo-Fencing capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;Both &lt;strong&gt;space&lt;&#x2F;strong&gt; (location) and &lt;strong&gt;time&lt;&#x2F;strong&gt; are considered &lt;strong&gt;first class citizens&lt;&#x2F;strong&gt;. Complex searches like ‚Äú&lt;strong&gt;find all the sensors active during last Monday in the perimeter delimited by this geo-fencing polygon&lt;&#x2F;strong&gt;‚Äù can be done without involving expensive joins between separate time series for the same source.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unified-language&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#unified-language&quot; aria-label=&quot;Anchor link for: unified-language&quot;&gt;üîó&lt;&#x2F;a&gt;Unified Language&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript can be used in &lt;strong&gt;batch&lt;&#x2F;strong&gt; mode, or in &lt;strong&gt;real-time&lt;&#x2F;strong&gt;, because you need both of them in the real world.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geez-give-me-an-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geez-give-me-an-example&quot; aria-label=&quot;Anchor link for: geez-give-me-an-example&quot;&gt;üîó&lt;&#x2F;a&gt;Geez, give me an example&lt;&#x2F;h3&gt;
&lt;p&gt;Here‚Äôs an example of a simple but advanced query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; Fetching all values  
&lt;&#x2F;span&gt;&lt;span&gt;[ $token ‚Äòtemperature‚Äô {} NOW 1 h ] FETCH &#x2F;&#x2F; Get max value for each minute  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP bucketizer.max 0 1 m 0 ] BUCKETIZE &#x2F;&#x2F; Round to nearest long  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP mapper.round 0 0 0 ] MAP &#x2F;&#x2F; reduce the data by keeping the max, grouping by &amp;#39;buildingID&amp;#39;  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP [ &amp;#39;buildingID&amp;#39; ] reducer.max ] REDUCE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Have you guessed the goal? The result will &lt;strong&gt;display the temperature from now to 1 hour of the hottest room per buildingID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-about-a-more-complex-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-a-more-complex-example&quot; aria-label=&quot;Anchor link for: what-about-a-more-complex-example&quot;&gt;üîó&lt;&#x2F;a&gt;What about a more complex example?&lt;&#x2F;h3&gt;
&lt;p&gt;You‚Äôre still here? Good, let‚Äôs have a more complex example. Let‚Äôs say that I want to do some patterns recognition. Let‚Äôs take an example. Here‚Äôs a cosinus with an increasing amplitude:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;3.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I want to &lt;strong&gt;detect the green part&lt;&#x2F;strong&gt; of the time series, because I know that my service is crashing when I have that kind of load. With WarpScript, it‚Äôs only a &lt;strong&gt;2 functions calls&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PATTERNS&lt;&#x2F;strong&gt; is generating a list of motifs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PATTERNDETECTION&lt;&#x2F;strong&gt; is running the list of motifs on all the time series you have.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here‚Äôs the code&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; defining some variables  
&lt;&#x2F;span&gt;&lt;span&gt;32 &amp;#39;windowSize&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;8 &amp;#39;patternLength&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;16 &amp;#39;quantizationScale&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Generate patterns   
&lt;&#x2F;span&gt;&lt;span&gt;$pattern.to.detect 0 GET   
&lt;&#x2F;span&gt;&lt;span&gt;$windowSize $patternLength $quantizationScale PATTERNS  
&lt;&#x2F;span&gt;&lt;span&gt;VALUES &amp;#39;patterns&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Running the patterns through a list of GTS (Geo Time Series)  
&lt;&#x2F;span&gt;&lt;span&gt;$list.of.gts $patterns   
&lt;&#x2F;span&gt;&lt;span&gt;$windowSize $patternLength $quantizationScale  PATTERNDETECTION
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here‚Äôs the result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, &lt;strong&gt;PATTERNDETECTION&lt;&#x2F;strong&gt; is working even with the increasing amplitude! You can discover this example by yourself by using &lt;a href=&quot;https:&#x2F;&#x2F;home.cityzendata.net&#x2F;quantum&#x2F;preview&#x2F;#&#x2F;plot&#x2F;TkVXR1RTICdjb3MnIFJFTkFNRQoxIDEwODAKPCUgRFVQICdpJyBTVE9SRSBEVVAgMiAqIFBJICogMzYwIC8gQ09TICRpICogTmFOIE5hTiBOYU4gNCBST0xMIEFERFZBTFVFICU+IEZPUgoKWyBTV0FQIGJ1Y2tldGl6ZXIubGFzdCAxMDgwIDEgMCBdIEJVQ0tFVElaRSAnY29zJyBTVE9SRQoKTkVXR1RTICdwYXR0ZXJuLnRvLmRldGVjdCcgUkVOQU1FCjIwMCAzNzAKPCUgIERVUCAnaScgU1RPUkUgRFVQIDIgKiBQSSAqIDM2MCAvIENPUyAkaSAqIE5hTiBOYU4gTmFOIDQgUk9MTCBBRERWQUxVRSAlPiBGT1IKClsgU1dBUCBidWNrZXRpemVyLmxhc3QgMjE2MCAxIDAgXSBCVUNLRVRJWkUgJ3BhdHRlcm4udG8uZGV0ZWN0JyBTVE9SRQoKLy8gQ3JlYXRlIFBhdHRlcm4KMzIgJ3dpbmRvd1NpemUnIFNUT1JFCjggJ3BhdHRlcm5MZW5ndGgnIFNUT1JFCjE2ICdxdWFudGl6YXRpb25TY2FsZScgU1RPUkUKCiRwYXR0ZXJuLnRvLmRldGVjdCAwIEdFVCAkd2luZG93U2l6ZSAkcGF0dGVybkxlbmd0aCAkcXVhbnRpemF0aW9uU2NhbGUgUEFUVEVSTlMgVkFMVUVTICdwYXR0ZXJucycgU1RPUkUKCiRjb3MgJHBhdHRlcm5zICR3aW5kb3dTaXplICRwYXR0ZXJuTGVuZ3RoICRxdWFudGl6YXRpb25TY2FsZSAgUEFUVEVSTkRFVEVDVElPTiAnY29zLmRldGVjdGlvbicgUkVOQU1FICdjb3MuZGV0ZWN0aW9uJyBTVE9SRQoKJGNvcy5kZXRlY3Rpb24KLy8gTGV0J3MgY3JlYXRlIGEgZ3RzIGZvciBlYWNoIHRyaXAKMTAgICAgICAgLy8gIFF1aWV0IHBlcmlvZAo1ICAgICAgICAgLy8gTWluIG51bWJlciBvZiB2YWx1ZXMKJ3N1YlBhdHRlcm4nICAvLyBMYWJlbApUSU1FU1BMSVQKCiRjb3M=&#x2F;eyJ1cmwiOiJodHRwczovL3dhcnAuY2l0eXplbmRhdGEubmV0L2FwaS92MCIsImhlYWRlck5hbWUiOiJYLUNpdHl6ZW5EYXRhIn0=&quot;&gt;Quantum&lt;&#x2F;a&gt;, the official web-based IDE for WarpScript. &lt;strong&gt;You need to switch X-axis scale to Timestamp in order to see the courbe&lt;&#x2F;strong&gt;.Thanks for reading, here‚Äôs a nice list of additionnals informations about the time series subject and Warp10:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt;, our product&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;warp10.io&#x2F;&quot;&gt;Warp10 official documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tour.warp10.io&#x2F;&quot;&gt;Warp10 tour&lt;&#x2F;a&gt;, similar to ‚ÄúThe Go Tour‚Äù&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=mNkfBR9KofY&quot;&gt;Presentation of the Warp 10 Time Series Platform at the 42 US school in Fremont&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!forum&#x2F;warp10-users&quot;&gt;Warp10 Google Groups&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
          <category domain="tag">database</category>
          <category domain="tag">timeseries</category>
          <category domain="tag">analytics</category>
          <category domain="tag">performance</category>
      </item>
      <item>
          <title>Event-driven architecture 101</title>
          <pubDate>Fri, 13 May 2016 17:19:23 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/eventdriven-architecture-101/</link>
          <guid>https://pierrezemb.fr/posts/eventdriven-architecture-101/</guid>
          <description xml:base="https://pierrezemb.fr/posts/eventdriven-architecture-101/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;event-driven-architecture-101-d8e13cc4c656&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;1.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Do your own cover on &lt;a href=&quot;http:&#x2F;&#x2F;dev.to&#x2F;rly&quot;&gt;http:&#x2F;&#x2F;dev.to&#x2F;rly&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;I‚Äôm still a student, so my point of view could be far from reality, be gentle ;)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;**&lt;em&gt;tl;dr: Queue messaging are cool. Use them at the core of your architecture.&lt;&#x2F;em&gt;**I‚Äôm currently playing a lot around &lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;&quot;&gt;Kafka&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;flink.apache.org&#x2F;&quot;&gt;Flink&lt;&#x2F;a&gt; at work. I also discovered &lt;a href=&quot;http:&#x2F;&#x2F;vertx.io&#x2F;&quot;&gt;Vert.x&lt;&#x2F;a&gt; at my local JUG. All three have a common word: &lt;strong&gt;events&lt;&#x2F;strong&gt;. Event-driven architecture is not something that I learned at school, and I think that‚Äôs a shame. It‚Äôs really powerful and useful, especially in a world where we speak more and more about ‚Äúserverless‚Äù and ‚Äúmicro services‚Äù stuff. So here‚Äôs my attempt to make a big sum-up.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-unix-philosophy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-unix-philosophy&quot; aria-label=&quot;Anchor link for: the-unix-philosophy&quot;&gt;üîó&lt;&#x2F;a&gt;the Unix philosophy&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;2.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôm a huge fan of GNU&#x2F;Linux. I just love my terminal. It‚Äôs been difficult at the beginning, but now, I consider myself fluent with it. My favorite feature ? &lt;strong&gt;Pipes or |&lt;&#x2F;strong&gt;. For those who don‚Äôt know, it‚Äôs the ability to pass the result of the command to another command. For example, to count how many files you have in a folder, you‚Äôll find yourself doing something like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;list files&lt;&#x2F;strong&gt; in a folder&lt;&#x2F;li&gt;
&lt;li&gt;From this list, &lt;strong&gt;manipulate&#x2F;filter&lt;&#x2F;strong&gt; it. One line must correspond to one file, things like folder are omitted&lt;&#x2F;li&gt;
&lt;li&gt;And then &lt;strong&gt;count&lt;&#x2F;strong&gt; the line!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the UNIX world, it should give you something like ‚Äú&lt;strong&gt;&lt;em&gt;ls -l | grep ^- | wc -l‚Äù.&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; it might feels like chinese. For me, it‚Äôs just feels logical. &lt;strong&gt;3 operations mapped into 3 commands.&lt;&#x2F;strong&gt; You declare a set a commands that, in the end, give you the result. It‚Äôs simple and also very fast (in fact, you can find funny articles like this one: &lt;a href=&quot;http:&#x2F;&#x2F;aadrake.com&#x2F;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&quot;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;&#x2F;a&gt;). This is only possible thanks to the &lt;strong&gt;UNIX philosophy&lt;&#x2F;strong&gt;, greatly describe by Doug McIlroy, Elliot Pinson and Berk Tague in 1978:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new ‚Äúfeatures‚Äù.&amp;gt; Expect the output of every program to become the input to another, as yet unknown, program.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Why should I care? It‚Äôs 2016, not 1978! Well‚Ä¶&lt;&#x2F;p&gt;
&lt;h1 id=&quot;back-in-2016&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-in-2016&quot; aria-label=&quot;Anchor link for: back-in-2016&quot;&gt;üîó&lt;&#x2F;a&gt;Back in 2016&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;3.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Cloud changed everything in terms of software engineering. &lt;strong&gt;We can now deploy applications without thinking about the underlying server&lt;&#x2F;strong&gt;. How cool is that? Let‚Äôs take some steps back. Now that you can easily deploy a huge application, what can be accomplished? Well, if I can deploy one app with ease, &lt;strong&gt;Why should I deploy only one huge app ?&lt;&#x2F;strong&gt; why can‚Äôt I deploy multiples applications instead of one? &lt;strong&gt;Let‚Äôs call theses applications micro services&lt;&#x2F;strong&gt; because we are in 2016.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OK, so now I‚Äôm applying the first rule of the UNIX Philosophy, because I have multiples programs that are doing one job each. But about the second rule? &lt;strong&gt;How can they communicate? How can we simulate UNIX pipes?&lt;&#x2F;strong&gt; Before answering, let‚Äôs answer to another question first: &lt;strong&gt;What do we really need to send through our network?&lt;&#x2F;strong&gt; Don‚Äôt forget the  &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing&quot;&gt;&lt;strong&gt;Fallacies of distributed computing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;strong&gt;‚Ä¶&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs take an example. We are a new startup, and we are building our plateform. We‚Äôll certainly need to handle our customers. Let‚Äôs say that for each new customer, &lt;strong&gt;we need to make two actions&lt;&#x2F;strong&gt;: add it to our database, and then to our mailing-list. &lt;strong&gt;A simple and classical way would be to just call two functions&lt;&#x2F;strong&gt; (whether on the same applications or not), and then say to the customer: ‚ÄúYou‚Äôre successfully registered‚Äù. Like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;5.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Classic approach&lt;&#x2F;p&gt;
&lt;p&gt;Is there another approach? Let‚Äôs use an &lt;strong&gt;event-based architecture&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;h1 id=&quot;let-s-talk-events&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-talk-events&quot; aria-label=&quot;Anchor link for: let-s-talk-events&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;strong&gt;Let‚Äôs talk events&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Let‚Äôs ask Google, what‚Äôs an event?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a thing that happens, especially one of importance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, handling a new customer is a thing that happens (hopefully). For this, we‚Äôll be using a &lt;strong&gt;Queue messaging system or Broker&lt;&#x2F;strong&gt;. It‚Äôs a &lt;strong&gt;middleware&lt;&#x2F;strong&gt; that will &lt;strong&gt;receive events, and making them available for another application or groups of applications.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;6.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Queue messaging architecture with 2 producers and 4 consumers&lt;&#x2F;p&gt;
&lt;p&gt;So let‚Äôs rethink our architecture. Pay attention to the words: our Register page will &lt;strong&gt;produce&lt;&#x2F;strong&gt; an event that will contains all the information about our client. This event will be &lt;strong&gt;queued&lt;&#x2F;strong&gt;, waiting to be &lt;strong&gt;consumed&lt;&#x2F;strong&gt; by the associated micro services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;7.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Simple event-driven architecture&lt;&#x2F;p&gt;
&lt;p&gt;We didn‚Äôt changed much, but we enable many things over here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;&#x2F;strong&gt;. Remember, the first rule ! ‚ÄúMake each program do one thing well‚Äù. Like this, your &lt;strong&gt;code base for each app will be simple&lt;&#x2F;strong&gt; &lt;strong&gt;as hell&lt;&#x2F;strong&gt;, and you‚Äôll be able to easily replace your software if needed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Modularity&lt;&#x2F;strong&gt;. You need to add another action to the event, for example CreateProfile ? Easy, &lt;strong&gt;just plug another app on the same queue&lt;&#x2F;strong&gt;. You need to test a new version of your program? Easy, &lt;strong&gt;just plug it on the same queue&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;. One of your micro services is taking too much time? &lt;strong&gt;Just start a new instance of it&lt;&#x2F;strong&gt;. Huge traffic? Add new instances. With this approach, you can start really small and become giant.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Big-data friendly.&lt;&#x2F;strong&gt; This type of architecture is often used to handle a lot of data. With plateform like &lt;a href=&quot;http:&#x2F;&#x2F;flink.apache.org&quot;&gt;Apache Flink&lt;&#x2F;a&gt;, you can do some &lt;strong&gt;stream processing directly&lt;&#x2F;strong&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-master&#x2F;apis&#x2F;streaming&#x2F;index.html#example-program&quot;&gt;Look how easy it is&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Polyglotism.&lt;&#x2F;strong&gt; Most messaging system are offering libraries for many languages.&lt;strong&gt;Like this, you can use whatever language you want&lt;&#x2F;strong&gt; . But be aware, &lt;em&gt;With great power comes great responsibility&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-about-serverless&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-serverless&quot; aria-label=&quot;Anchor link for: what-about-serverless&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;strong&gt;What about serverless?&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Serverless is the ‚Äúnew‚Äù buzz word. Ignited by Amazon with their product &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;&quot;&gt;AWS Lambda&lt;&#x2F;a&gt; and quickly followed by &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;functions&#x2F;docs&quot;&gt;Google&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;azure.microsoft.com&#x2F;en-us&#x2F;services&#x2F;functions&#x2F;&quot;&gt;Microsoft&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;new-console.ng.bluemix.net&#x2F;openwhisk&#x2F;&quot;&gt;IBM&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.iron.io&#x2F;introducing-aws-lambda-support&quot;&gt;Iron.io&lt;&#x2F;a&gt;, the goal is to &lt;strong&gt;offer to developers a new way of building apps&lt;&#x2F;strong&gt;. Instead of writing apps, &lt;strong&gt;you‚Äôll just write a function that will respond to an event&lt;&#x2F;strong&gt;. In fact, you‚Äôll be paying only for the time it‚Äôs running. It‚Äôs a interesting point-of-view, because you‚Äôll be &lt;strong&gt;deploying an architecture built only using events&lt;&#x2F;strong&gt;. I must admit that I didn‚Äôt try it yet, but I think i&lt;strong&gt;t‚Äôs a great idea to force developers to split their apps and really think about events,&lt;&#x2F;strong&gt; but you could just build the same thing with any cloud provider.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;additional-links-and-talks-about-this-topic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#additional-links-and-talks-about-this-topic&quot; aria-label=&quot;Anchor link for: additional-links-and-talks-about-this-topic&quot;&gt;üîó&lt;&#x2F;a&gt;Additional links and talks about this topic&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;apache-kafka-samza-and-the-unix-philosophy-of-distributed-data&quot;&gt;Apache Kafka, Samza, and the Unix Philosophy of Distributed Data&lt;&#x2F;a&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;13be457aed12&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.cloudera.com&#x2F;blog&#x2F;2014&#x2F;09&#x2F;apache-kafka-for-beginners&#x2F;&quot;&gt;Apache Kafka for Beginners&lt;&#x2F;a&gt; by Cloudera Engineering Blog&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.voxxed.com&#x2F;blog&#x2F;2016&#x2F;04&#x2F;introduction-apache-kafka&#x2F;&quot;&gt;Introduction to Apache Kafka&lt;&#x2F;a&gt; by Guglielmo Iozza&lt;&#x2F;li&gt;
&lt;li&gt;[Apache Flink Training] (&lt;a href=&quot;http:&#x2F;&#x2F;dataartisans.github.io&#x2F;flink-training&#x2F;)by&quot;&gt;http:&#x2F;&#x2F;dataartisans.github.io&#x2F;flink-training&#x2F;)by&lt;&#x2F;a&gt; data-artisans&lt;&#x2F;li&gt;
&lt;li&gt;Meetup LeboncoinTech‚Ää‚Äî‚ÄäAMQP 101 by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;58ea5a89aaae&quot;&gt;Quentin ADAM&lt;&#x2F;a&gt; (French sorry)&lt;&#x2F;li&gt;
&lt;li&gt;vert.x 3‚Ää‚Äî‚Ääbe reactive on the JVM but not only in Java by Clement Escoffier&#x2F;Paulo Lopes DEVOXX 2015&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Please, Feel free to react to this article, you can reach me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, or have a look on my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">architecture</category>
          <category domain="tag">messaging</category>
          <category domain="tag">distributed</category>
          <category domain="tag">design</category>
      </item>
      <item>
          <title>Let‚Äôs talk about containers</title>
          <pubDate>Mon, 04 Jan 2016 18:52:19 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/lets-talk-about-containers/</link>
          <guid>https://pierrezemb.fr/posts/lets-talk-about-containers/</guid>
          <description xml:base="https://pierrezemb.fr/posts/lets-talk-about-containers/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@pierrez&#x2F;let-s-talk-about-containers-1f11ee68c470&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;English is not my first language, so the whole story may have some mistakes‚Ä¶ corrections and fixes will be greatly appreciated. I‚Äôm also still a student, so my point of view could be far from ‚Äúproduction ready‚Äù, be gentle ;-)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the last two years, there‚Äôs been a technology that became really hype. It was the graal for easy deployments, easy applications management. Let‚Äôs talk about containers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;write-once-run-everywhere&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-once-run-everywhere&quot; aria-label=&quot;Anchor link for: write-once-run-everywhere&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúWrite once, run everywhere‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;1.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When I first heard about containers, I was working as a part-time internship for a french bank as a developer in a Ops team. I was working around &lt;a href=&quot;https:&#x2F;&#x2F;hadoop.apache.org&#x2F;&quot;&gt;Hadoop&lt;&#x2F;a&gt; and monitoring systems, and I was wondering ‚ÄúHow should I properly deploy my work?‚Äù. It was a java app, running into the official Java version provided by my company. &lt;strong&gt;I couldn‚Äôt just give it to my colleagues&lt;&#x2F;strong&gt; &lt;strong&gt;and leave them do some vaudou stuff because they are the Ops team&lt;&#x2F;strong&gt;. I remembered saying to myself ‚Äùfortunately, all the features that I need are in this official java version, I don‚Äôt need the latest JRE. I just need to bundle everything into a jar and done‚Äù. But what if it wasn‚Äôt? What if I had to explain to my colleagues that I need the new JRE for a really small app written by an intern? Or I needed another non-standard library during runtime?&lt;&#x2F;p&gt;
&lt;p&gt;The important thing here at the time was that, at any time, &lt;strong&gt;I could deploy it on another server that had Java, because everything is bundled into that big fat jar file&lt;&#x2F;strong&gt;. After all, ‚Äú&lt;strong&gt;write once, run everywhere&lt;&#x2F;strong&gt;‚Äù was the slogan created by Sun Microsystems to illustrate the cross-platform benefits of the Java language. That is a real commodity, and this is the first thing that strike me with Docker.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-hype&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#docker-hype&quot; aria-label=&quot;Anchor link for: docker-hype&quot;&gt;üîó&lt;&#x2F;a&gt;Docker hype&lt;&#x2F;h3&gt;
&lt;p&gt;I will always remember my chat with my colleagues about it. I was like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;2.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-they-were-more-like&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#and-they-were-more-like&quot; aria-label=&quot;Anchor link for: and-they-were-more-like&quot;&gt;üîó&lt;&#x2F;a&gt;And they were more like&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;3.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ops knew about containers since the dawn of time, so why such hype now? I think that ‚Äúwrite once, run everywhere‚Äù is the true slogan of Docker, because you can run docker containers in any environments that has Docker. &lt;strong&gt;You want to try the latest datastore&#x2F;SaaS app that you found on Hacker News or Reddit? There‚Äôs a Dockerfile for that&lt;&#x2F;strong&gt;. And that is super cool. So everyone started to get interested in Docker, myself included. But the real benefit is that many huge companies like Google admits that containers are the way they are deploying apps. &lt;strong&gt;They don‚Äôt care what type of applications they are deploying or where it‚Äôs running, it‚Äôs just running somewhere.&lt;&#x2F;strong&gt; That‚Äôs all that matters. By unifying the packages, you can automatize and deliver whatever you want somewhere. Do you really care if it‚Äôs on a specific machine? No you don‚Äôt. That‚Äôs a powerful way to think infrastructure more like a bunch of compute or storage power, and not individual machines.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;let-s-create-a-container&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-create-a-container&quot; aria-label=&quot;Anchor link for: let-s-create-a-container&quot;&gt;üîó&lt;&#x2F;a&gt;Let‚Äôs create a container&lt;&#x2F;h3&gt;
&lt;p&gt;That‚Äôs not a secret: I love &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;. It‚Äôs in my opinion a very nice programming language &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;why-you-really-should-give-golang-a-try-6b577092d725&quot;&gt;that you should really try&lt;&#x2F;a&gt;. So let‚Äôs say that I‚Äôm creating a go app, and then ship it with Docker. So I‚Äôll use the officiel Docker image right? &lt;strong&gt;Then I end up with a 700MB container to ship a 10MB app&lt;&#x2F;strong&gt;‚Ä¶ I thought that containers were supposed to be small‚Ä¶ Why? because it‚Äôs based on a full OS, with go compiler and so on. To run a single binary, there‚Äôs no need to have the whole Go compiler stack.&lt;&#x2F;p&gt;
&lt;p&gt;That was really bothering me. At this point, if the container is holding everything, why not use a VM? Why do we need to bundle Ubuntu into the container? From a outside point-of-view, running a container in interactive mode is much like a virtual machines right? &lt;strong&gt;At the time of writing, Docker‚Äôs official image for Ubuntu was pulled more than 36,000,000 time&lt;&#x2F;strong&gt;. That‚Äôs huge! And disturbing. Do you really need for example ‚Äúls, chmod, chown, sudo‚Äù into a container?&lt;&#x2F;p&gt;
&lt;p&gt;There is another huge impact on having a full distribution on a container: Security. &lt;strong&gt;You now have to watch not only for CVEs (Common Vulnerabilities and Exposures) on the packages in your host distribution, but also in your container&lt;&#x2F;strong&gt;! After all, based on this &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1toUKgqLyy1b-pZlDgxONLduiLmt2yaLR0GliBB7b3L0&#x2F;pub?start=false&amp;amp;loop=false#slide=id.ge614ec624_2_70&quot;&gt;presentation&lt;&#x2F;a&gt;, 66.6% of analyzed images on Quay.io are vulnerable to &lt;a href=&quot;https:&#x2F;&#x2F;community.qualys.com&#x2F;blogs&#x2F;laws-of-vulnerabilities&#x2F;2015&#x2F;01&#x2F;27&#x2F;the-ghost-vulnerability&quot;&gt;Ghost&lt;&#x2F;a&gt;, and 80% to &lt;a href=&quot;http:&#x2F;&#x2F;heartbleed.com&#x2F;&quot;&gt;Heartbleed&lt;&#x2F;a&gt;. That is quite scary‚Ä¶ So adding this nightmare doesn‚Äôt seems the solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so-what-should-i-put-into-my-container&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#so-what-should-i-put-into-my-container&quot; aria-label=&quot;Anchor link for: so-what-should-i-put-into-my-container&quot;&gt;üîó&lt;&#x2F;a&gt;So what should I put into my container?&lt;&#x2F;h3&gt;
&lt;p&gt;I looked a lot around the internet, I saw things like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gliderlabs&#x2F;docker-alpine&quot;&gt;docker-alpine&lt;&#x2F;a&gt; or [baseimage-docker] (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;phusion&#x2F;baseimage-docker)which&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;phusion&#x2F;baseimage-docker)which&lt;&#x2F;a&gt; are cool, but in fact, the answer was on Docker‚Äôs website‚Ä¶ Here‚Äôs the [official sentence] (&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;what-docker)that&quot;&gt;https:&#x2F;&#x2F;www.docker.com&#x2F;what-docker)that&lt;&#x2F;a&gt; explains the difference between containers and virtual machines:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúContainers include the application and all of its dependencies, but share the kernel with other containers.‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This specific sentence triggers something in my head. When you execute a program on your UNIX system, the system creates a special environment for that program. This environment contains everything needed for the system to run the program as if no other program were running on the system. It‚Äôs exactly the same! &lt;strong&gt;So a container should be abstract not as a Virtual machines, but as a UNIX process!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;application + dependencies represent the image&lt;&#x2F;li&gt;
&lt;li&gt;Runtime environment like token&#x2F;password will be passed through env vars for example&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-compilation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#static-compilation&quot; aria-label=&quot;Anchor link for: static-compilation&quot;&gt;üîó&lt;&#x2F;a&gt;Static compilation&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Meet Go&lt;&#x2F;p&gt;
&lt;p&gt;Here‚Äôs an interesting fact: Go, the open-source programming language pushed by Google &lt;strong&gt;supports statically apps&lt;&#x2F;strong&gt;, what a coincidence! That means that this statically app will be directly talking to the kernel. &lt;strong&gt;Our Docker image can be empty&lt;&#x2F;strong&gt;, except for the binary and needed files like configuration. There‚Äôs a strange image on Docker that you might have seen, which is called ‚Äúscratch‚Äù:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use Docker‚Äôs reserved, minimal image, scratch, as a starting point for building containers. Using the scratch ‚Äúimage‚Äù signals to the build process that you want the next command in the Dockerfile to be the first filesystem layer in your image. While scratch appears in Docker‚Äôs repository on the hub, you can‚Äôt pull it, run it, or tag any image with the name scratch. Instead, you can refer to it in your Dockerfile.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That means that our Dockerfile now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; scratch  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ADD &lt;&#x2F;span&gt;&lt;span&gt;hello &#x2F;  
&lt;&#x2F;span&gt;&lt;span&gt;CMD [&#x2F;hello]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now, I have finally (I think) the right abstraction for a container! &lt;strong&gt;We have a container containing only our app&lt;&#x2F;strong&gt;. Can we go even further? The most interesting thing that I learned from (quickly) reading &lt;a href=&quot;https:&#x2F;&#x2F;static.googleusercontent.com&#x2F;media&#x2F;research.google.com&#x2F;en&#x2F;&#x2F;pubs&#x2F;archive&#x2F;43438.pdf&quot;&gt;&lt;em&gt;Large-scale cluster management at Google with Borg&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; is this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Borg programs are statically linked to reduce dependencies on their runtime environment, and structured as packages of binaries and data files, whose installation is orchestrated by Borg.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here‚Äôs the (final) answer! By trully coming back to the UNIX process point-of-view, we can abstract containers as Unix processes. Bu we still need to handle them. So &lt;strong&gt;the role of Docker would be more like a Operating System builder&lt;&#x2F;strong&gt; (nice name found by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;58ea5a89aaae&quot;&gt;Quentin ADAM&lt;&#x2F;a&gt;).As a conclusion, I think that Docker true success was to show developers that they can sandbox their apps easily, and now it‚Äôs our work to build better software, and learning new design patterns.&lt;&#x2F;p&gt;
&lt;p&gt;Please, Feel free to react to this article, you can reach me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, Or visite my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">containers</category>
          <category domain="tag">docker</category>
          <category domain="tag">security</category>
          <category domain="tag">infrastructure</category>
      </item>
    </channel>
</rss>
