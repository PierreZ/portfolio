<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Foundationdb - Category - Pierre Zemb</title>
        <link>https://pierrezemb.fr/categories/foundationdb/</link>
        <description>Foundationdb - Category - Pierre Zemb</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 22 Apr 2024 00:37:27 &#43;0100</lastBuildDate><atom:link href="https://pierrezemb.fr/categories/foundationdb/" rel="self" type="application/rss+xml" /><item>
    <title>Redwoodâ€™s memory tuning in FoundationDB</title>
    <link>https://pierrezemb.fr/posts/redwood-memory-tuning/readme/</link>
    <pubDate>Mon, 22 Apr 2024 00:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/redwood-memory-tuning/readme/</guid>
    <description><![CDATA[While FoundationDB allows you to obtain sub-milliseconds transactionsâ€™s latency without any knob-tuning, we had to bump a bit memory usage for Redwood under certain usage and workload. The following configuration has been tested on clusters from 7.1 to 7.3.
BTree page cache We discovered the issue when we saw a performance decrease on our cluster storing time-series data. Our cluster was reporting some high disk-business, causing outages:
10.0.3.23:4501 ( 65% cpu; 61% machine; 0.]]></description>
</item>
<item>
    <title>True idempotent transactions with FoundationDB 7.3</title>
    <link>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</link>
    <pubDate>Tue, 12 Mar 2024 00:37:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</guid>
    <description><![CDATA[I have been working around FoundationDB for several years now, and the new upcoming version is fixing one of the most evil and painful caveats you can deal with when writing layers: commit_unknown_result.
Transactions with unknown results When you start writing code with FDB, you may be under the assertions that given the databaseâ€™s robustness, you will not experience some strange behavior under certain failure scenarios. Turns out, there is one scenario that is possible to reach, and quickly explained in the official documentation:]]></description>
</item>
<item>
    <title>Crafting row keys in FoundationDB</title>
    <link>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</link>
    <pubDate>Sun, 21 Feb 2021 00:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</guid>
    <description><![CDATA[As I&rsquo;m working on my latest contribution around FoundationDB and Rust, I had the chance to dig a bit into how FoundationDB&rsquo;s bindings are offering helpers to generate keys. Their approach is interesting enough to deserve a blogpost ðŸ˜Ž
Row key? When you are using a key/value store, the design of the row key is extremely important, as this will define how well:
your scans will be optimized, your puts will be spread, you will avoid hot-spotting a shard/region.]]></description>
</item>
<item>
    <title>Announcing Record-Store, a new (experimental) place for your data</title>
    <link>https://pierrezemb.fr/posts/announcing-record-store/</link>
    <pubDate>Wed, 23 Sep 2020 10:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/announcing-record-store/</guid>
    <description><![CDATA[TL;DR: I&rsquo;m really happy to announce my latest open-source project called Record-Store ðŸš€ Please check it out on https://pierrez.github.io/record-store.
What? Record-Store is a layer running on top of FoundationDB. It provides abstractions to create, load and deletes customer-defined data called records, which are hold into a RecordSpace. We would like to have this kind of flow for developers:
Opening RecordSpace, for example prod/users Create a protobuf definition which will be used as schema Upsert schema Push records Query records delete records You need another KeySpace to store another type of data, or maybe a KeySpace dedicated to production env?]]></description>
</item>
<item>
    <title>Notes about FoundationDB</title>
    <link>https://pierrezemb.fr/posts/notes-about-foundationdb/</link>
    <pubDate>Thu, 30 Jan 2020 10:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/notes-about-foundationdb/</guid>
    <description><![CDATA[Notes About is a blogpost serie you will find a lot of links, videos, quotes, podcasts to click on about a specific topic. Today we will discover FoundationDB.
Overview of FoundationDB As stated in the official documentation:
FoundationDB is a distributed database designed to handle large volumes of structured data across clusters of commodity servers. It organizes data as an ordered key-value store and employs ACID transactions for all operations.]]></description>
</item>
</channel>
</rss>
