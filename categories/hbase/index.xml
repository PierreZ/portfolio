<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>hbase - Category - Pierre Zemb</title>
        <link>https://pierrezemb.fr/categories/hbase/</link>
        <description>hbase - Category - Pierre Zemb</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 14 Feb 2020 10:24:27 &#43;0100</lastBuildDate><atom:link href="https://pierrezemb.fr/categories/hbase/" rel="self" type="application/rss+xml" /><item>
    <title>Contributing to Apache HBase: custom data balancing</title>
    <link>https://pierrezemb.fr/posts/hbase-custom-data-balancing/</link>
    <pubDate>Fri, 14 Feb 2020 10:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/hbase-custom-data-balancing/</guid>
    <description><![CDATA[This is a repost from OVHcloud&rsquo;s official blogpost., please read it there to support my company. Thanks Horacio Gonzalez for the awesome drawings!
In today&rsquo;s blogpost, we&rsquo;re going to take a look at our upstream contribution to Apache HBase&rsquo;s stochastic load balancer, based on our experience of running HBase clusters to support OVHcloud&rsquo;s monitoring.
The context Have you ever wondered how:
we generate the graphs for your OVHcloud server or web hosting package?]]></description>
</item>
<item>
    <title>Diving into Hbase&#39;s MemStore</title>
    <link>https://pierrezemb.fr/posts/diving-into-hbase-memstore/</link>
    <pubDate>Sun, 17 Nov 2019 10:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/diving-into-hbase-memstore/</guid>
    <description><![CDATA[Diving Into is a blogpost serie where we are digging a specific part of of the project&rsquo;s basecode. In this episode, we will digg into the implementation behind Hbase&rsquo;s MemStore.
tl;dr: Hbase is using the ConcurrentSkipListMap.
What is the MemStore? The memtable from the official BigTable paper is the equivalent of the MemStore in Hbase.
As rows are sorted lexicographically in Hbase, when data comes in, you need to have some kind of a in-memory buffer to order those keys.]]></description>
</item>
<item>
    <title>Playing with TTL in HBase</title>
    <link>https://pierrezemb.fr/posts/ttl-hbase/</link>
    <pubDate>Mon, 27 May 2019 22:07:11 &#43;0200</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/ttl-hbase/</guid>
    <description><![CDATA[Among all features provided by HBase, there is one that is pretty handy to deal with your data&rsquo;s lifecyle: the fact that every cell version can have Time to Live or TTL. Let&rsquo;s dive into the feature!
Time To Live (TTL) Let&rsquo;s read the doc first!
ColumnFamilies can set a TTL length in seconds, and HBase will automatically delete rows once the expiration time is reached.
HBase Book: Time To Live (TTL)]]></description>
</item>
<item>
    <title>Hbase Data Model</title>
    <link>https://pierrezemb.fr/posts/hbase-data-model/</link>
    <pubDate>Sun, 27 Jan 2019 20:24:27 &#43;0100</pubDate>
    <author>Pierre Zemb</author>
    <guid>https://pierrezemb.fr/posts/hbase-data-model/</guid>
    <description><![CDATA[HBase? Apache HBase™ is a type of &ldquo;NoSQL&rdquo; database. &ldquo;NoSQL&rdquo; is a general term meaning that the database isn’t an RDBMS which supports SQL as its primary access language. Technically speaking, HBase is really more a &ldquo;Data Store&rdquo; than &ldquo;Data Base&rdquo; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc.
&ndash; Hbase architecture overview
Hbase data model The data model is simple: it&rsquo;s like a multi-dimensional map:]]></description>
</item>
</channel>
</rss>
