<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed-systems on Pierre Zemb</title>
    <link>https://pierrezemb.fr/tags/distributed-systems/</link>
    <description>Recent content in distributed-systems on Pierre Zemb</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Some Rights Reserved&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 04 Aug 2019 15:07:11 +0200</lastBuildDate>
    
	<atom:link href="https://pierrezemb.fr/tags/distributed-systems/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What can be gleaned about GFS successor codenamed Colossus?</title>
      <link>https://pierrezemb.fr/posts/colossus-google/</link>
      <pubDate>Sun, 04 Aug 2019 15:07:11 +0200</pubDate>
      
      <guid>https://pierrezemb.fr/posts/colossus-google/</guid>
      <description>In the last few months, there has been numerous blogposts about the end of the Hadoop-era. It is true that:
 Health of Hadoop-based companies are publicly bad Hadoop has a bad publicity with headlines like &amp;lsquo;What does the death of Hadoop mean for big data?&#39;  Hadoop, as a distributed-system, is hard to operate, but can be essential for some type of workload. As Hadoop is based on GFS, we can wonder how GFS evolved inside Google.</description>
    </item>
    
    <item>
      <title>Playing with TTL in HBase</title>
      <link>https://pierrezemb.fr/posts/ttl-hbase/</link>
      <pubDate>Mon, 27 May 2019 22:07:11 +0200</pubDate>
      
      <guid>https://pierrezemb.fr/posts/ttl-hbase/</guid>
      <description>Among all features provided by HBase, there is one that is pretty handy to deal with your data&amp;rsquo;s lifecyle: the fact that every cell version can have Time to Live or TTL. Let&amp;rsquo;s dive into the feature!
Time To Live (TTL) Let&amp;rsquo;s read the doc first!
 ColumnFamilies can set a TTL length in seconds, and HBase will automatically delete rows once the expiration time is reached.
 HBase Book: Time To Live (TTL)</description>
    </item>
    
    <item>
      <title>Handling OVH&#39;s alerts with Apache Flink</title>
      <link>https://pierrezemb.fr/posts/ovh-alerts-flink/</link>
      <pubDate>Sun, 03 Feb 2019 15:37:27 +0100</pubDate>
      
      <guid>https://pierrezemb.fr/posts/ovh-alerts-flink/</guid>
      <description>This is a repost from OVH&amp;rsquo;s official blogpost.. Thanks Horacio Gonzalez for the awesome drawings!
Handling OVH&amp;rsquo;s alerts with Apache Flink OVH relies extensively on metrics to effectively monitor its entire stack. Whether they are low-level or business centric, they allow teams to gain insight into how our services are operating on a daily basis. The need to store millions of datapoints per second has produced the need to create a dedicated team to build a operate a product to handle that load: **Metrics Data Platform.</description>
    </item>
    
    <item>
      <title>Hbase Data Model</title>
      <link>https://pierrezemb.fr/posts/hbase-data-model/</link>
      <pubDate>Sun, 27 Jan 2019 20:24:27 +0100</pubDate>
      
      <guid>https://pierrezemb.fr/posts/hbase-data-model/</guid>
      <description>HBase?  Apache HBase™ is a type of &amp;ldquo;NoSQL&amp;rdquo; database. &amp;ldquo;NoSQL&amp;rdquo; is a general term meaning that the database isn’t an RDBMS which supports SQL as its primary access language. Technically speaking, HBase is really more a &amp;ldquo;Data Store&amp;rdquo; than &amp;ldquo;Data Base&amp;rdquo; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc.
 &amp;ndash; Hbase architecture overview</description>
    </item>
    
  </channel>
</rss>