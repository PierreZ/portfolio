<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Pierre Zemb&#x27;s Blog - architecture</title>
    <subtitle>Pierre Zemb personal blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://pierrezemb.fr/tags/architecture/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://pierrezemb.fr"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2016-05-13T17:19:23.788+00:00</updated>
    <id>https://pierrezemb.fr/tags/architecture/atom.xml</id>
    <entry xml:lang="en">
        <title>Event-driven architecture 101</title>
        <published>2016-05-13T17:19:23.788+00:00</published>
        <updated>2016-05-13T17:19:23.788+00:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/eventdriven-architecture-101/"/>
        <id>https://pierrezemb.fr/posts/eventdriven-architecture-101/</id>
        
        <content type="html" xml:base="https://pierrezemb.fr/posts/eventdriven-architecture-101/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;event-driven-architecture-101-d8e13cc4c656&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;1.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Do your own cover on &lt;a href=&quot;http:&#x2F;&#x2F;dev.to&#x2F;rly&quot;&gt;http:&#x2F;&#x2F;dev.to&#x2F;rly&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;I‚Äôm still a student, so my point of view could be far from reality, be gentle ;)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;**&lt;em&gt;tl;dr: Queue messaging are cool. Use them at the core of your architecture.&lt;&#x2F;em&gt;**I‚Äôm currently playing a lot around &lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;&quot;&gt;Kafka&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;flink.apache.org&#x2F;&quot;&gt;Flink&lt;&#x2F;a&gt; at work. I also discovered &lt;a href=&quot;http:&#x2F;&#x2F;vertx.io&#x2F;&quot;&gt;Vert.x&lt;&#x2F;a&gt; at my local JUG. All three have a common word: &lt;strong&gt;events&lt;&#x2F;strong&gt;. Event-driven architecture is not something that I learned at school, and I think that‚Äôs a shame. It‚Äôs really powerful and useful, especially in a world where we speak more and more about ‚Äúserverless‚Äù and ‚Äúmicro services‚Äù stuff. So here‚Äôs my attempt to make a big sum-up.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-unix-philosophy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-unix-philosophy&quot; aria-label=&quot;Anchor link for: the-unix-philosophy&quot;&gt;üîó&lt;&#x2F;a&gt;the Unix philosophy&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;2.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I‚Äôm a huge fan of GNU&#x2F;Linux. I just love my terminal. It‚Äôs been difficult at the beginning, but now, I consider myself fluent with it. My favorite feature ? &lt;strong&gt;Pipes or |&lt;&#x2F;strong&gt;. For those who don‚Äôt know, it‚Äôs the ability to pass the result of the command to another command. For example, to count how many files you have in a folder, you‚Äôll find yourself doing something like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;list files&lt;&#x2F;strong&gt; in a folder&lt;&#x2F;li&gt;
&lt;li&gt;From this list, &lt;strong&gt;manipulate&#x2F;filter&lt;&#x2F;strong&gt; it. One line must correspond to one file, things like folder are omitted&lt;&#x2F;li&gt;
&lt;li&gt;And then &lt;strong&gt;count&lt;&#x2F;strong&gt; the line!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the UNIX world, it should give you something like ‚Äú&lt;strong&gt;&lt;em&gt;ls -l | grep ^- | wc -l‚Äù.&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; it might feels like chinese. For me, it‚Äôs just feels logical. &lt;strong&gt;3 operations mapped into 3 commands.&lt;&#x2F;strong&gt; You declare a set a commands that, in the end, give you the result. It‚Äôs simple and also very fast (in fact, you can find funny articles like this one: &lt;a href=&quot;http:&#x2F;&#x2F;aadrake.com&#x2F;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&quot;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;&#x2F;a&gt;). This is only possible thanks to the &lt;strong&gt;UNIX philosophy&lt;&#x2F;strong&gt;, greatly describe by Doug McIlroy, Elliot Pinson and Berk Tague in 1978:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new ‚Äúfeatures‚Äù.&amp;gt; Expect the output of every program to become the input to another, as yet unknown, program.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Why should I care? It‚Äôs 2016, not 1978! Well‚Ä¶&lt;&#x2F;p&gt;
&lt;h1 id=&quot;back-in-2016&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-in-2016&quot; aria-label=&quot;Anchor link for: back-in-2016&quot;&gt;üîó&lt;&#x2F;a&gt;Back in 2016&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;3.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Cloud changed everything in terms of software engineering. &lt;strong&gt;We can now deploy applications without thinking about the underlying server&lt;&#x2F;strong&gt;. How cool is that? Let‚Äôs take some steps back. Now that you can easily deploy a huge application, what can be accomplished? Well, if I can deploy one app with ease, &lt;strong&gt;Why should I deploy only one huge app ?&lt;&#x2F;strong&gt; why can‚Äôt I deploy multiples applications instead of one? &lt;strong&gt;Let‚Äôs call theses applications micro services&lt;&#x2F;strong&gt; because we are in 2016.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OK, so now I‚Äôm applying the first rule of the UNIX Philosophy, because I have multiples programs that are doing one job each. But about the second rule? &lt;strong&gt;How can they communicate? How can we simulate UNIX pipes?&lt;&#x2F;strong&gt; Before answering, let‚Äôs answer to another question first: &lt;strong&gt;What do we really need to send through our network?&lt;&#x2F;strong&gt; Don‚Äôt forget the  &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing&quot;&gt;&lt;strong&gt;Fallacies of distributed computing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;strong&gt;‚Ä¶&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs take an example. We are a new startup, and we are building our plateform. We‚Äôll certainly need to handle our customers. Let‚Äôs say that for each new customer, &lt;strong&gt;we need to make two actions&lt;&#x2F;strong&gt;: add it to our database, and then to our mailing-list. &lt;strong&gt;A simple and classical way would be to just call two functions&lt;&#x2F;strong&gt; (whether on the same applications or not), and then say to the customer: ‚ÄúYou‚Äôre successfully registered‚Äù. Like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;5.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Classic approach&lt;&#x2F;p&gt;
&lt;p&gt;Is there another approach? Let‚Äôs use an &lt;strong&gt;event-based architecture&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;h1 id=&quot;let-s-talk-events&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-talk-events&quot; aria-label=&quot;Anchor link for: let-s-talk-events&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;strong&gt;Let‚Äôs talk events&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Let‚Äôs ask Google, what‚Äôs an event?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a thing that happens, especially one of importance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, handling a new customer is a thing that happens (hopefully). For this, we‚Äôll be using a &lt;strong&gt;Queue messaging system or Broker&lt;&#x2F;strong&gt;. It‚Äôs a &lt;strong&gt;middleware&lt;&#x2F;strong&gt; that will &lt;strong&gt;receive events, and making them available for another application or groups of applications.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;6.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Queue messaging architecture with 2 producers and 4 consumers&lt;&#x2F;p&gt;
&lt;p&gt;So let‚Äôs rethink our architecture. Pay attention to the words: our Register page will &lt;strong&gt;produce&lt;&#x2F;strong&gt; an event that will contains all the information about our client. This event will be &lt;strong&gt;queued&lt;&#x2F;strong&gt;, waiting to be &lt;strong&gt;consumed&lt;&#x2F;strong&gt; by the associated micro services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;eventdriven-architecture-101&#x2F;7.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Simple event-driven architecture&lt;&#x2F;p&gt;
&lt;p&gt;We didn‚Äôt changed much, but we enable many things over here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;&#x2F;strong&gt;. Remember, the first rule ! ‚ÄúMake each program do one thing well‚Äù. Like this, your &lt;strong&gt;code base for each app will be simple&lt;&#x2F;strong&gt; &lt;strong&gt;as hell&lt;&#x2F;strong&gt;, and you‚Äôll be able to easily replace your software if needed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Modularity&lt;&#x2F;strong&gt;. You need to add another action to the event, for example CreateProfile ? Easy, &lt;strong&gt;just plug another app on the same queue&lt;&#x2F;strong&gt;. You need to test a new version of your program? Easy, &lt;strong&gt;just plug it on the same queue&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;. One of your micro services is taking too much time? &lt;strong&gt;Just start a new instance of it&lt;&#x2F;strong&gt;. Huge traffic? Add new instances. With this approach, you can start really small and become giant.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Big-data friendly.&lt;&#x2F;strong&gt; This type of architecture is often used to handle a lot of data. With plateform like &lt;a href=&quot;http:&#x2F;&#x2F;flink.apache.org&quot;&gt;Apache Flink&lt;&#x2F;a&gt;, you can do some &lt;strong&gt;stream processing directly&lt;&#x2F;strong&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-master&#x2F;apis&#x2F;streaming&#x2F;index.html#example-program&quot;&gt;Look how easy it is&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Polyglotism.&lt;&#x2F;strong&gt; Most messaging system are offering libraries for many languages.&lt;strong&gt;Like this, you can use whatever language you want&lt;&#x2F;strong&gt; . But be aware, &lt;em&gt;With great power comes great responsibility&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-about-serverless&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-serverless&quot; aria-label=&quot;Anchor link for: what-about-serverless&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;strong&gt;What about serverless?&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Serverless is the ‚Äúnew‚Äù buzz word. Ignited by Amazon with their product &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;&quot;&gt;AWS Lambda&lt;&#x2F;a&gt; and quickly followed by &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;functions&#x2F;docs&quot;&gt;Google&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;azure.microsoft.com&#x2F;en-us&#x2F;services&#x2F;functions&#x2F;&quot;&gt;Microsoft&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;new-console.ng.bluemix.net&#x2F;openwhisk&#x2F;&quot;&gt;IBM&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.iron.io&#x2F;introducing-aws-lambda-support&quot;&gt;Iron.io&lt;&#x2F;a&gt;, the goal is to &lt;strong&gt;offer to developers a new way of building apps&lt;&#x2F;strong&gt;. Instead of writing apps, &lt;strong&gt;you‚Äôll just write a function that will respond to an event&lt;&#x2F;strong&gt;. In fact, you‚Äôll be paying only for the time it‚Äôs running. It‚Äôs a interesting point-of-view, because you‚Äôll be &lt;strong&gt;deploying an architecture built only using events&lt;&#x2F;strong&gt;. I must admit that I didn‚Äôt try it yet, but I think i&lt;strong&gt;t‚Äôs a great idea to force developers to split their apps and really think about events,&lt;&#x2F;strong&gt; but you could just build the same thing with any cloud provider.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;additional-links-and-talks-about-this-topic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#additional-links-and-talks-about-this-topic&quot; aria-label=&quot;Anchor link for: additional-links-and-talks-about-this-topic&quot;&gt;üîó&lt;&#x2F;a&gt;Additional links and talks about this topic&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;apache-kafka-samza-and-the-unix-philosophy-of-distributed-data&quot;&gt;Apache Kafka, Samza, and the Unix Philosophy of Distributed Data&lt;&#x2F;a&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;13be457aed12&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.cloudera.com&#x2F;blog&#x2F;2014&#x2F;09&#x2F;apache-kafka-for-beginners&#x2F;&quot;&gt;Apache Kafka for Beginners&lt;&#x2F;a&gt; by Cloudera Engineering Blog&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.voxxed.com&#x2F;blog&#x2F;2016&#x2F;04&#x2F;introduction-apache-kafka&#x2F;&quot;&gt;Introduction to Apache Kafka&lt;&#x2F;a&gt; by Guglielmo Iozza&lt;&#x2F;li&gt;
&lt;li&gt;[Apache Flink Training] (&lt;a href=&quot;http:&#x2F;&#x2F;dataartisans.github.io&#x2F;flink-training&#x2F;)by&quot;&gt;http:&#x2F;&#x2F;dataartisans.github.io&#x2F;flink-training&#x2F;)by&lt;&#x2F;a&gt; data-artisans&lt;&#x2F;li&gt;
&lt;li&gt;Meetup LeboncoinTech‚Ää‚Äî‚ÄäAMQP 101 by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;58ea5a89aaae&quot;&gt;Quentin ADAM&lt;&#x2F;a&gt; (French sorry)&lt;&#x2F;li&gt;
&lt;li&gt;vert.x 3‚Ää‚Äî‚Ääbe reactive on the JVM but not only in Java by Clement Escoffier&#x2F;Paulo Lopes DEVOXX 2015&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Please, Feel free to react to this article, you can reach me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, or have a look on my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
