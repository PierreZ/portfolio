<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etcd on Pierre Zemb</title>
    <link>https://pierrezemb.fr/tags/etcd/</link>
    <description>Recent content in etcd on Pierre Zemb</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Some Rights Reserved&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 11 Jan 2021 00:24:27 +0100</lastBuildDate><atom:link href="https://pierrezemb.fr/tags/etcd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes about ETCD</title>
      <link>https://pierrezemb.fr/posts/notes-about-etcd/</link>
      <pubDate>Mon, 11 Jan 2021 00:24:27 +0100</pubDate>
      
      <guid>https://pierrezemb.fr/posts/notes-about-etcd/</guid>
      <description>Notes About is a blogpost serie you will find a lot of links, videos, quotes, podcasts to click on about a specific topic. Today we will discover ETCD.
Overview of ETCD As stated in the official documentation:
 etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.</description>
    </item>
    
    <item>
      <title>Diving into ETCD&#39;s linearizable reads</title>
      <link>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</link>
      <pubDate>Fri, 18 Sep 2020 05:24:27 +0100</pubDate>
      
      <guid>https://pierrezemb.fr/posts/diving-into-etcd-linearizable/</guid>
      <description>Diving Into is a blogpost serie where we are digging a specific part of the project&amp;rsquo;s basecode. In this episode, we will digg into the implementation behind ETCD&amp;rsquo;s Linearizable reads.
 What is ETCD? From the official website:
 etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.</description>
    </item>
    
  </channel>
</rss>
