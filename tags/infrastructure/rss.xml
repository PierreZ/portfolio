<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Pierre Zemb&#x27;s Blog - infrastructure</title>
      <link>https://pierrezemb.fr</link>
      <description>Pierre Zemb personal blog</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://pierrezemb.fr/tags/infrastructure/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Mon, 04 Jan 2016 18:52:19 +0000</lastBuildDate>
      <item>
          <title>Let‚Äôs talk about containers</title>
          <pubDate>Mon, 04 Jan 2016 18:52:19 +0000</pubDate>
          <author>Pierre Zemb</author>
          <link>https://pierrezemb.fr/posts/lets-talk-about-containers/</link>
          <guid>https://pierrezemb.fr/posts/lets-talk-about-containers/</guid>
          <description xml:base="https://pierrezemb.fr/posts/lets-talk-about-containers/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@pierrez&#x2F;let-s-talk-about-containers-1f11ee68c470&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;English is not my first language, so the whole story may have some mistakes‚Ä¶ corrections and fixes will be greatly appreciated. I‚Äôm also still a student, so my point of view could be far from ‚Äúproduction ready‚Äù, be gentle ;-)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the last two years, there‚Äôs been a technology that became really hype. It was the graal for easy deployments, easy applications management. Let‚Äôs talk about containers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;write-once-run-everywhere&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-once-run-everywhere&quot; aria-label=&quot;Anchor link for: write-once-run-everywhere&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúWrite once, run everywhere‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;1.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When I first heard about containers, I was working as a part-time internship for a french bank as a developer in a Ops team. I was working around &lt;a href=&quot;https:&#x2F;&#x2F;hadoop.apache.org&#x2F;&quot;&gt;Hadoop&lt;&#x2F;a&gt; and monitoring systems, and I was wondering ‚ÄúHow should I properly deploy my work?‚Äù. It was a java app, running into the official Java version provided by my company. &lt;strong&gt;I couldn‚Äôt just give it to my colleagues&lt;&#x2F;strong&gt; &lt;strong&gt;and leave them do some vaudou stuff because they are the Ops team&lt;&#x2F;strong&gt;. I remembered saying to myself ‚Äùfortunately, all the features that I need are in this official java version, I don‚Äôt need the latest JRE. I just need to bundle everything into a jar and done‚Äù. But what if it wasn‚Äôt? What if I had to explain to my colleagues that I need the new JRE for a really small app written by an intern? Or I needed another non-standard library during runtime?&lt;&#x2F;p&gt;
&lt;p&gt;The important thing here at the time was that, at any time, &lt;strong&gt;I could deploy it on another server that had Java, because everything is bundled into that big fat jar file&lt;&#x2F;strong&gt;. After all, ‚Äú&lt;strong&gt;write once, run everywhere&lt;&#x2F;strong&gt;‚Äù was the slogan created by Sun Microsystems to illustrate the cross-platform benefits of the Java language. That is a real commodity, and this is the first thing that strike me with Docker.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-hype&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#docker-hype&quot; aria-label=&quot;Anchor link for: docker-hype&quot;&gt;üîó&lt;&#x2F;a&gt;Docker hype&lt;&#x2F;h3&gt;
&lt;p&gt;I will always remember my chat with my colleagues about it. I was like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;2.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-they-were-more-like&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#and-they-were-more-like&quot; aria-label=&quot;Anchor link for: and-they-were-more-like&quot;&gt;üîó&lt;&#x2F;a&gt;And they were more like&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;3.jpeg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ops knew about containers since the dawn of time, so why such hype now? I think that ‚Äúwrite once, run everywhere‚Äù is the true slogan of Docker, because you can run docker containers in any environments that has Docker. &lt;strong&gt;You want to try the latest datastore&#x2F;SaaS app that you found on Hacker News or Reddit? There‚Äôs a Dockerfile for that&lt;&#x2F;strong&gt;. And that is super cool. So everyone started to get interested in Docker, myself included. But the real benefit is that many huge companies like Google admits that containers are the way they are deploying apps. &lt;strong&gt;They don‚Äôt care what type of applications they are deploying or where it‚Äôs running, it‚Äôs just running somewhere.&lt;&#x2F;strong&gt; That‚Äôs all that matters. By unifying the packages, you can automatize and deliver whatever you want somewhere. Do you really care if it‚Äôs on a specific machine? No you don‚Äôt. That‚Äôs a powerful way to think infrastructure more like a bunch of compute or storage power, and not individual machines.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;let-s-create-a-container&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-create-a-container&quot; aria-label=&quot;Anchor link for: let-s-create-a-container&quot;&gt;üîó&lt;&#x2F;a&gt;Let‚Äôs create a container&lt;&#x2F;h3&gt;
&lt;p&gt;That‚Äôs not a secret: I love &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;. It‚Äôs in my opinion a very nice programming language &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;why-you-really-should-give-golang-a-try-6b577092d725&quot;&gt;that you should really try&lt;&#x2F;a&gt;. So let‚Äôs say that I‚Äôm creating a go app, and then ship it with Docker. So I‚Äôll use the officiel Docker image right? &lt;strong&gt;Then I end up with a 700MB container to ship a 10MB app&lt;&#x2F;strong&gt;‚Ä¶ I thought that containers were supposed to be small‚Ä¶ Why? because it‚Äôs based on a full OS, with go compiler and so on. To run a single binary, there‚Äôs no need to have the whole Go compiler stack.&lt;&#x2F;p&gt;
&lt;p&gt;That was really bothering me. At this point, if the container is holding everything, why not use a VM? Why do we need to bundle Ubuntu into the container? From a outside point-of-view, running a container in interactive mode is much like a virtual machines right? &lt;strong&gt;At the time of writing, Docker‚Äôs official image for Ubuntu was pulled more than 36,000,000 time&lt;&#x2F;strong&gt;. That‚Äôs huge! And disturbing. Do you really need for example ‚Äúls, chmod, chown, sudo‚Äù into a container?&lt;&#x2F;p&gt;
&lt;p&gt;There is another huge impact on having a full distribution on a container: Security. &lt;strong&gt;You now have to watch not only for CVEs (Common Vulnerabilities and Exposures) on the packages in your host distribution, but also in your container&lt;&#x2F;strong&gt;! After all, based on this &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1toUKgqLyy1b-pZlDgxONLduiLmt2yaLR0GliBB7b3L0&#x2F;pub?start=false&amp;amp;loop=false#slide=id.ge614ec624_2_70&quot;&gt;presentation&lt;&#x2F;a&gt;, 66.6% of analyzed images on Quay.io are vulnerable to &lt;a href=&quot;https:&#x2F;&#x2F;community.qualys.com&#x2F;blogs&#x2F;laws-of-vulnerabilities&#x2F;2015&#x2F;01&#x2F;27&#x2F;the-ghost-vulnerability&quot;&gt;Ghost&lt;&#x2F;a&gt;, and 80% to &lt;a href=&quot;http:&#x2F;&#x2F;heartbleed.com&#x2F;&quot;&gt;Heartbleed&lt;&#x2F;a&gt;. That is quite scary‚Ä¶ So adding this nightmare doesn‚Äôt seems the solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so-what-should-i-put-into-my-container&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#so-what-should-i-put-into-my-container&quot; aria-label=&quot;Anchor link for: so-what-should-i-put-into-my-container&quot;&gt;üîó&lt;&#x2F;a&gt;So what should I put into my container?&lt;&#x2F;h3&gt;
&lt;p&gt;I looked a lot around the internet, I saw things like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gliderlabs&#x2F;docker-alpine&quot;&gt;docker-alpine&lt;&#x2F;a&gt; or [baseimage-docker] (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;phusion&#x2F;baseimage-docker)which&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;phusion&#x2F;baseimage-docker)which&lt;&#x2F;a&gt; are cool, but in fact, the answer was on Docker‚Äôs website‚Ä¶ Here‚Äôs the [official sentence] (&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;what-docker)that&quot;&gt;https:&#x2F;&#x2F;www.docker.com&#x2F;what-docker)that&lt;&#x2F;a&gt; explains the difference between containers and virtual machines:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúContainers include the application and all of its dependencies, but share the kernel with other containers.‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This specific sentence triggers something in my head. When you execute a program on your UNIX system, the system creates a special environment for that program. This environment contains everything needed for the system to run the program as if no other program were running on the system. It‚Äôs exactly the same! &lt;strong&gt;So a container should be abstract not as a Virtual machines, but as a UNIX process!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;application + dependencies represent the image&lt;&#x2F;li&gt;
&lt;li&gt;Runtime environment like token&#x2F;password will be passed through env vars for example&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-compilation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#static-compilation&quot; aria-label=&quot;Anchor link for: static-compilation&quot;&gt;üîó&lt;&#x2F;a&gt;Static compilation&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;lets-talk-about-containers&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Meet Go&lt;&#x2F;p&gt;
&lt;p&gt;Here‚Äôs an interesting fact: Go, the open-source programming language pushed by Google &lt;strong&gt;supports statically apps&lt;&#x2F;strong&gt;, what a coincidence! That means that this statically app will be directly talking to the kernel. &lt;strong&gt;Our Docker image can be empty&lt;&#x2F;strong&gt;, except for the binary and needed files like configuration. There‚Äôs a strange image on Docker that you might have seen, which is called ‚Äúscratch‚Äù:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use Docker‚Äôs reserved, minimal image, scratch, as a starting point for building containers. Using the scratch ‚Äúimage‚Äù signals to the build process that you want the next command in the Dockerfile to be the first filesystem layer in your image. While scratch appears in Docker‚Äôs repository on the hub, you can‚Äôt pull it, run it, or tag any image with the name scratch. Instead, you can refer to it in your Dockerfile.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That means that our Dockerfile now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;docker&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-docker &quot;&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span&gt;FROM scratch  
&lt;&#x2F;span&gt;&lt;span&gt;ADD hello &#x2F;  
&lt;&#x2F;span&gt;&lt;span&gt;CMD [&#x2F;hello]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now, I have finally (I think) the right abstraction for a container! &lt;strong&gt;We have a container containing only our app&lt;&#x2F;strong&gt;. Can we go even further? The most interesting thing that I learned from (quickly) reading &lt;a href=&quot;https:&#x2F;&#x2F;static.googleusercontent.com&#x2F;media&#x2F;research.google.com&#x2F;en&#x2F;&#x2F;pubs&#x2F;archive&#x2F;43438.pdf&quot;&gt;&lt;em&gt;Large-scale cluster management at Google with Borg&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; is this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Borg programs are statically linked to reduce dependencies on their runtime environment, and structured as packages of binaries and data files, whose installation is orchestrated by Borg.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here‚Äôs the (final) answer! By trully coming back to the UNIX process point-of-view, we can abstract containers as Unix processes. Bu we still need to handle them. So &lt;strong&gt;the role of Docker would be more like a Operating System builder&lt;&#x2F;strong&gt; (nice name found by &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;u&#x2F;58ea5a89aaae&quot;&gt;Quentin ADAM&lt;&#x2F;a&gt;).As a conclusion, I think that Docker true success was to show developers that they can sandbox their apps easily, and now it‚Äôs our work to build better software, and learning new design patterns.&lt;&#x2F;p&gt;
&lt;p&gt;Please, Feel free to react to this article, you can reach me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, Or visite my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
          <category domain="tag">containers</category>
          <category domain="tag">docker</category>
          <category domain="tag">security</category>
          <category domain="tag">infrastructure</category>
      </item>
    </channel>
</rss>
