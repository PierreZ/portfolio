<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Pierre Zemb&#x27;s Blog - database</title>
    <subtitle>Pierre Zemb personal blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://pierrezemb.fr/tags/database/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://pierrezemb.fr"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-03-27T05:24:27+01:00</updated>
    <id>https://pierrezemb.fr/tags/database/atom.xml</id>
    <entry xml:lang="en">
        <title>Key design tip: reverse number scanning in ordered key-value stores</title>
        <published>2025-03-27T05:24:27+01:00</published>
        <updated>2025-03-27T05:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/reverse-number-scanning/"/>
        <id>https://pierrezemb.fr/posts/reverse-number-scanning/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="performance" schema="https://pierrezemb.fr/tags/" label="performance"/>
        <category term="optimization" schema="https://pierrezemb.fr/tags/" label="optimization"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/reverse-number-scanning/">&lt;p&gt;Ordered key-value stores like HBase, FoundationDB or RocksDB store keys in lexicographical order. When getting the latest version or most recent events, this ordering often requires scanning through all values in reverse order. While this works, it can become a performance bottleneck, especially in distributed systems. Let&#x27;s explore a simple yet powerful optimization technique that I&#x27;ve been using recently 🚀&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-design-in-key-value-stores&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-design-in-key-value-stores&quot; aria-label=&quot;Anchor link for: key-design-in-key-value-stores&quot;&gt;🔗&lt;&#x2F;a&gt;Key design in Key-value stores&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look at this using a tuple structure of &lt;code&gt;(key, number)&lt;&#x2F;code&gt;. This could represent a document version, a timestamp, or any numeric identifier:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 2)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-2&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In ordered key-value stores, keys are stored in &lt;code&gt;lexicographical order&lt;&#x2F;code&gt;. This works well when you want to scan from lowest to highest values, but becomes inefficient when you need the opposite order. For example, to find the highest number for a key, you need to scan through all values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 2)
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 99)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could scan in reverse mode, but you would lose the order of your first prefix(the &quot;my-key-1&quot;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reverse-number-scanning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reverse-number-scanning&quot; aria-label=&quot;Anchor link for: reverse-number-scanning&quot;&gt;🔗&lt;&#x2F;a&gt;Reverse Number Scanning&lt;&#x2F;h2&gt;
&lt;p&gt;By reversing the numbers using a simple subtraction from the maximum possible value (e.g., &lt;code&gt;Long.MAX_VALUE&lt;&#x2F;code&gt; in Java), we can optimize the scanning process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; reversedNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span&gt;- number;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This transforms our data into:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775804) &#x2F;&#x2F; number 3
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775805) &#x2F;&#x2F; number 2
&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;my-key-1&amp;quot;, 9223372036854775806) &#x2F;&#x2F; number 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the highest number (which appears first in the reversed order) can be found efficiently, allowing us to stop after finding the first match.&lt;&#x2F;p&gt;
&lt;p&gt;This technique is particularly useful in systems dealing with time-series data, versioned documents, or any scenario requiring efficient retrieval of the most recent or highest-valued items.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;number 1: 9223372036854775806
&lt;&#x2F;span&gt;&lt;span&gt;number 2: 9223372036854775805
&lt;&#x2F;span&gt;&lt;span&gt;number 3: 9223372036854775804
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Reversing back is straightforward
&lt;&#x2F;span&gt;&lt;span&gt;Long.MAX_VALUE - 9223372036854775806 = 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging FoundationDB&#x27;s Data Distributor</title>
        <published>2025-03-07T00:00:00+01:00</published>
        <updated>2025-03-07T00:00:00+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/fdb-data-distributor/"/>
        <id>https://pierrezemb.fr/posts/fdb-data-distributor/</id>
        
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="debugging" schema="https://pierrezemb.fr/tags/" label="debugging"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/fdb-data-distributor/">&lt;p&gt;FoundationDB is a powerful, distributed database designed to handle massive workloads with high consistency guarantees. At its core, the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt; plays a critical role in determining how shards are distributed across the cluster to maintain load balance and resilience.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we dive into the &lt;strong&gt;Data Distributor&#x27;s&lt;&#x2F;strong&gt; internals, along with practical lessons we learned during a outage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-data-distributor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-data-distributor&quot; aria-label=&quot;Anchor link for: what-is-the-data-distributor&quot;&gt;🔗&lt;&#x2F;a&gt;What is the Data Distributor?&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;Data Distributor (DD)&lt;&#x2F;strong&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;architecture.html&quot;&gt;a subsystem&lt;&#x2F;a&gt; responsible for efficiently placing and relocating shards (range of keys) in a FoundationDB cluster. Its key goals are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Balancing load across servers&lt;&#x2F;li&gt;
&lt;li&gt;Handling failures by redistributing data&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring optimal data placement for performance reliability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-distributor-wording&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-distributor-wording&quot; aria-label=&quot;Anchor link for: data-distributor-wording&quot;&gt;🔗&lt;&#x2F;a&gt;Data Distributor wording&lt;&#x2F;h2&gt;
&lt;p&gt;The architecture and behavior of the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt; are documented in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;design&#x2F;data-distributor-internals.md&quot;&gt;official design document&lt;&#x2F;a&gt;, and introduce the following concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Machine&lt;&#x2F;strong&gt;: A failure domain in FoundationDB, often considered equivalent to a rack.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard&lt;&#x2F;strong&gt;: A range of key-values—essentially a contiguous block of the database keyspace.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Server Team&lt;&#x2F;strong&gt;: A group of &lt;code&gt;k&lt;&#x2F;code&gt; processes (where &lt;code&gt;k&lt;&#x2F;code&gt; is the replication factor) hosting the same shard.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Machine Team&lt;&#x2F;strong&gt;: A collection of &lt;code&gt;k&lt;&#x2F;code&gt; machines, ensuring fault isolation for redundancy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The term &quot;machine&quot; in FoundationDB’s documentation &lt;strong&gt;often translates better as &quot;rack&quot;&lt;&#x2F;strong&gt; in many practical cases. Using racks makes the Machine Team&#x27;s role clearer: it ensures fault isolation by storing copies of data in different racks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debug-dd-with-status-json&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debug-dd-with-status-json&quot; aria-label=&quot;Anchor link for: debug-dd-with-status-json&quot;&gt;🔗&lt;&#x2F;a&gt;Debug DD with &lt;code&gt;status json&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Your first input point should be to have a look at the &lt;code&gt;team_trackers&lt;&#x2F;code&gt; key in the &lt;code&gt;status json&lt;&#x2F;code&gt;. The JSON should contain enough information for basic monitoring:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;team_trackers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;primary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unhealthy_servers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;healthy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;healthy_rebalancing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;debug-dd-with-trace-events&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debug-dd-with-trace-events&quot; aria-label=&quot;Anchor link for: debug-dd-with-trace-events&quot;&gt;🔗&lt;&#x2F;a&gt;Debug DD with Trace events&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB provides a robust tracing system where each process generates detailed events in either XML or JSON formats. To troubleshoot the &lt;strong&gt;Data Distributor&lt;&#x2F;strong&gt;, you first need to locate the process it has been elected to. From there, trace events can be analyzed to understand shard movements, priorities, and failures.&lt;&#x2F;p&gt;
&lt;p&gt;One particularly important attribute in these events is the &lt;code&gt;Priority&lt;&#x2F;code&gt; field. This field determines the precedence of shard placement or redistribution tasks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_RECOVER_MOVE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;110 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_REBALANCE_UNDERUTILIZED_TEAM, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_REBALANCE_OVERUTILIZED_TEAM, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;122 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_TEAM_UNHEALTHY, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;700&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;( PRIORITY_SPLIT_SHARD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;950 &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A full list of defined priorities can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;fdbclient&#x2F;ServerKnobs.cpp#L155-L173&quot;&gt;Knobs file&lt;&#x2F;a&gt;, providing useful insights into how tasks are scheduled.&lt;&#x2F;p&gt;
&lt;p&gt;EDIT: Yes, &lt;code&gt;SPLIT_SHARD&lt;&#x2F;code&gt; has an higher priority! See &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;alexmillerdb.bsky.social&#x2F;post&#x2F;3ljsqqvfslc24&quot;&gt;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;alexmillerdb.bsky.social&#x2F;post&#x2F;3ljsqqvfslc24&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serverteaminfo-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#serverteaminfo-event&quot; aria-label=&quot;Anchor link for: serverteaminfo-event&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;code&gt;ServerTeamInfo&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;Understanding the state of server teams is essential since the Data Distributor schedules data movements based on real-time metrics. The &lt;code&gt;fdbcli&lt;&#x2F;code&gt; command &lt;code&gt;triggerddteaminfolog&lt;&#x2F;code&gt; triggers informative logs by invoking &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;fdbserver&#x2F;DDTeamCollection.actor.cpp#L3425&quot;&gt;printSnapshotTeamsInfo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ServerTeamInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;709&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Healthy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamSize&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MemberIDs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5a69... 5fc1... 8718...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LoadBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1135157527&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MinAvailableSpaceRatio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.94108&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;serverteamprioritychange-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#serverteamprioritychange-event&quot; aria-label=&quot;Anchor link for: serverteamprioritychange-event&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;code&gt;ServerTeamPriorityChange&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;This event is logged when server team priorities change, often indicating server failures or rebalancing actions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ServerTeamPriorityChange&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;950&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e9b362decbafbd81&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;relocateshard-event&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#relocateshard-event&quot; aria-label=&quot;Anchor link for: relocateshard-event&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;code&gt;RelocateShard&lt;&#x2F;code&gt; Event&lt;&#x2F;h3&gt;
&lt;p&gt;This event tracks shard movement between teams to maintain balance.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RelocateShard&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PRIORITY_REBALANCE_UNDERUTILIZED_TEAM
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RelocationID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3f1290654949771e&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, the most useful field is the priority, indicating why it is relocated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;valleyfiller-and-mountainchopper-mechanisms&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#valleyfiller-and-mountainchopper-mechanisms&quot; aria-label=&quot;Anchor link for: valleyfiller-and-mountainchopper-mechanisms&quot;&gt;🔗&lt;&#x2F;a&gt;&quot;ValleyFiller&quot; and &quot;MountainChopper&quot; Mechanisms&lt;&#x2F;h3&gt;
&lt;p&gt;To optimize shard placement, FoundationDB employs two balancing strategies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ValleyFiller&lt;&#x2F;strong&gt;: Fills underutilized servers (the &lt;strong&gt;valleys&lt;&#x2F;strong&gt;) with data to balance the load.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;MountainChopper&lt;&#x2F;strong&gt;: Redistributes shards from overutilized servers (the &lt;strong&gt;mountains&lt;&#x2F;strong&gt;) to spread the load evenly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both logs will have a &lt;code&gt;SourceTeam&lt;&#x2F;code&gt; and &lt;code&gt;DestTeam&lt;&#x2F;code&gt; to use in other traces:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BgDDValleyFiller&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QueuedRelocations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SourceTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 95819f0d3d7ea40d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DestTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 0817e6fe3135e6f6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ShardBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;398281250&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BgDDMountainChopper&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QueuedRelocations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SourceTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID 95819f0d3d7ea40d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DestTeam&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TeamID e17dcecd86547e09&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ShardBytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;308000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ensuring Safety in FoundationDB&#x27;s Rust Crate</title>
        <published>2025-02-11T00:00:00+01:00</published>
        <updated>2025-02-11T00:00:00+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/providing-safety-fdb-rs/"/>
        <id>https://pierrezemb.fr/posts/providing-safety-fdb-rs/</id>
        
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="rust" schema="https://pierrezemb.fr/tags/" label="rust"/>
        <category term="testing" schema="https://pierrezemb.fr/tags/" label="testing"/>
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/providing-safety-fdb-rs/">&lt;p&gt;As we approach 5 million downloads of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;foundationdb&quot;&gt;FoundationDB Rust crate&lt;&#x2F;a&gt; (4,998,185 at the time of writing), I wanted to share some insights into how I ensure the safety of the crate. Being the primary maintainer of a database driver comes with responsibility, but I sleep well at night knowing that we have robust safety measures in place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crate-overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#crate-overview&quot; aria-label=&quot;Anchor link for: crate-overview&quot;&gt;🔗&lt;&#x2F;a&gt;Crate Overview&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust crate, &lt;code&gt;foundationdb-rs&lt;&#x2F;code&gt;, provides bindings to interact with FoundationDB&#x27;s C API (&lt;code&gt;libfdb&lt;&#x2F;code&gt;). It has around 13k lines of code and is used by companies (like Clever Cloud) and projects (such as Apache OpenDAL, SurrealDB). Having experienced numerous outages and issues with drivers and distributed systems, I understand the importance of safety. To ensure the safety of the crate, we need to focus on three layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The underlying client, &lt;code&gt;libfdb&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;The crate itself,&lt;&#x2F;li&gt;
&lt;li&gt;The code that uses the crate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s dig into each of these areas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;libfdb-safety&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#libfdb-safety&quot; aria-label=&quot;Anchor link for: libfdb-safety&quot;&gt;🔗&lt;&#x2F;a&gt;libfdb Safety&lt;&#x2F;h2&gt;
&lt;p&gt;This is the simplest part. &lt;code&gt;libfdb&lt;&#x2F;code&gt;&#x27;s safety is guaranteed by FoundationDB&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;simulation framework&lt;&#x2F;a&gt;. Therefore, we can consider it safe.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;classic-testing-suite&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#classic-testing-suite&quot; aria-label=&quot;Anchor link for: classic-testing-suite&quot;&gt;🔗&lt;&#x2F;a&gt;Classic testing suite&lt;&#x2F;h3&gt;
&lt;p&gt;Since we are using a C library, we need to use FFI (Foreign Function Interface) and unsafe code blocks. With around 130 unsafe blocks, we must be extra careful when calling C code, ensuring all preconditions are met. Naturally, we conduct extensive testing, but most importantly, we run tests in high-variety environments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On multiple operating systems (Ubuntu, macOS)&lt;&#x2F;li&gt;
&lt;li&gt;On multiple FoundationDB versions (from FDB 6.1 to 7.3)&lt;&#x2F;li&gt;
&lt;li&gt;On multiple Rust compiler versions (Minimum Supported Rust Version or MSRV, stable, beta, nightly)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most useful tests are run on the nightly Rust compiler, as we can catch &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;issues&#x2F;90&quot;&gt;new behaviors in the Rust compiler early&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While these testing practices provide significant coverage, the most powerful tool we utilize comes from FoundationDB’s maintainers: the &lt;code&gt;BindingTester&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bindingtester&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-bindingtester&quot; aria-label=&quot;Anchor link for: the-bindingtester&quot;&gt;🔗&lt;&#x2F;a&gt;The BindingTester&lt;&#x2F;h3&gt;
&lt;p&gt;FoundationDB is renowned for its &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;simulation and testing&lt;&#x2F;a&gt; frameworks. Bindings are no exception. They developed the BindingTester, a cross-language validation suite ensuring that all bindings behave correctly and consistently across different languages.&lt;&#x2F;p&gt;
&lt;p&gt;The BindingTester uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;main&#x2F;bindings&#x2F;bindingtester&#x2F;spec&#x2F;bindingApiTester.md&quot;&gt;a stack-based machine&lt;&#x2F;a&gt; to queue operations for FoundationDB. A program then reads the stack and performs the operations. These operations are run twice: once in the target environment and once against a reference implementation. Any differences are reported by the BindingTester.&lt;&#x2F;p&gt;
&lt;p&gt;It looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;.&#x2F;bindings&#x2F;bindingtester&#x2F;bindingtester.py --num-ops 1000 --api-version 730 --test-name api --compare python rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Creating test at API version 730
&lt;&#x2F;span&gt;&lt;span&gt;Generating api test at seed 3208032894 with 1000 op(s) and 1 concurrent tester(s)...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Inserting Rust tests
&lt;&#x2F;span&gt;&lt;span&gt;Inserting test into database...
&lt;&#x2F;span&gt;&lt;span&gt;Running tester &amp;#39;&#x2F;home&#x2F;runner&#x2F;work&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;target&#x2F;debug&#x2F;bindingtester test_spec 730&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Reading results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;workspace&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;Reading results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;stack&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Inserting Python tests
&lt;&#x2F;span&gt;&lt;span&gt;Inserting test into database...
&lt;&#x2F;span&gt;&lt;span&gt;Running tester &amp;#39;python &#x2F;home&#x2F;runner&#x2F;work&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;target&#x2F;foundationdb_build&#x2F;foundationdb&#x2F;bindings&#x2F;bindingtester&#x2F;..&#x2F;python&#x2F;tests&#x2F;tester.py test_spec 730&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Reading results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;workspace&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;Reading results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;stack&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Comparing the results
&lt;&#x2F;span&gt;&lt;span&gt;Comparing results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;workspace&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;Comparing results from &amp;#39;(&amp;#39;tester_output&amp;#39;, &amp;#39;stack&amp;#39;)&amp;#39;...
&lt;&#x2F;span&gt;&lt;span&gt;Test with seed 3208032894 and concurrency 1 had 0 incorrect result(s) and 0 error(s) at API version 730
&lt;&#x2F;span&gt;&lt;span&gt;Completed api test with random seed 3208032894 and 1000 operations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The great advantage of this method is that the tests are seeded, meaning the operations are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;randomly selected to cover all binding usages,&lt;&#x2F;li&gt;
&lt;li&gt;deterministic, so a failing seed can be replayed locally.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Combined with code coverage, this gives us a good idea of what has been tested (though code coverage may vary).&lt;&#x2F;p&gt;
&lt;p&gt;We run the &lt;code&gt;BindingTester&lt;&#x2F;code&gt; &lt;strong&gt;every hour&lt;&#x2F;strong&gt; on our GitHub actions, amounting to &lt;strong&gt;around 219 days of continuous testing each month&lt;&#x2F;strong&gt; (316,335 minutes of correctness last month according to Github).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;user-safety&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#user-safety&quot; aria-label=&quot;Anchor link for: user-safety&quot;&gt;🔗&lt;&#x2F;a&gt;User Safety&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to &lt;code&gt;libfdb&lt;&#x2F;code&gt; and the &lt;code&gt;BindingTester&lt;&#x2F;code&gt;, we can ensure that the library is quite safe. But what about the user&#x27;s code? How can we help users ensure their code can handle all of FoundationDB&#x27;s caveats, such as &lt;a href=&quot;&#x2F;posts&#x2F;automatic-txn-fdb-730&#x2F;#transactions-with-unknown-results&quot;&gt;commit_unknown_result&lt;&#x2F;a&gt;? We added a great feature: the ability to include Rust code &lt;strong&gt;within FDB&#x27;s simulation framework&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can implement an Rust workload with the following Trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;RustWorkload {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: SimDatabase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;: Promise);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_metrics&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;Metric&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_check_timeout&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which can be runned inside the simulation while injecting some faults:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;fdbserver -r simulation -f &#x2F;root&#x2F;atomic.toml -b on --trace-format json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Choosing a random seed
&lt;&#x2F;span&gt;&lt;span&gt;Random seed is 394378360...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Then, everything is derived from the seed, including:
&lt;&#x2F;span&gt;&lt;span&gt;# * cluster topology,
&lt;&#x2F;span&gt;&lt;span&gt;# * cluster configuration,
&lt;&#x2F;span&gt;&lt;span&gt;# * timing to inject faults,
&lt;&#x2F;span&gt;&lt;span&gt;# * operations to run
&lt;&#x2F;span&gt;&lt;span&gt;# * ...
&lt;&#x2F;span&gt;&lt;span&gt;Datacenter 0: 3&#x2F;12 machines, 1&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span&gt;Datacenter 1: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span&gt;Datacenter 2: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span&gt;Datacenter 3: 3&#x2F;12 machines, 0&#x2F;1 coordinators
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Starting the Atomic workload
&lt;&#x2F;span&gt;&lt;span&gt;Run test:AtomicWorkload start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;AtomicWorkload complete
&lt;&#x2F;span&gt;&lt;span&gt;checking test (AtomicWorkload)...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5 test clients passed; 0 test clients failed
&lt;&#x2F;span&gt;&lt;span&gt;Run test:AtomicWorkload Done.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1 tests passed; 0 tests failed.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Unseed: 66324
&lt;&#x2F;span&gt;&lt;span&gt;Elapsed: 405.055622 simsec, 30.342000 real seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has been a &lt;strong&gt;major keypoint&lt;&#x2F;strong&gt; for us to develop and operate &lt;a href=&quot;https:&#x2F;&#x2F;www.clever-cloud.com&#x2F;materia&#x2F;&quot;&gt;Materia, Clever Cloud&#x27;s serverless database offer&lt;&#x2F;a&gt;, as we can enjoy the same Simulation framework used by FDB&#x27;s core engineers for layer engineering 🤯&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closing-words&quot; aria-label=&quot;Anchor link for: closing-words&quot;&gt;🔗&lt;&#x2F;a&gt;Closing words&lt;&#x2F;h2&gt;
&lt;p&gt;As with any open-source project, there is always more to accomplish, but I am quite satisfied with the current level of safety provided by the crate. I would like to express my gratitude to the FoundationDB community for developing the BindingTester, and former contributors to the crate.&lt;&#x2F;p&gt;
&lt;p&gt;I also would like to encourage everyone to explore the simulation framework. Integrating Rust code within this framework has allowed us to harness the full potential of simulation without the need to build our own, and it has forever changed my perspective on testing and software engineering.&lt;&#x2F;p&gt;
&lt;p&gt;There is a strong likelihood that future blog posts will focus on simulation, so feel free to explore the &lt;a href=&quot;&#x2F;tags&#x2F;simulation&#x2F;&quot;&gt;simulation tags&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Redwood’s memory tuning in FoundationDB</title>
        <published>2024-04-22T00:37:27+01:00</published>
        <updated>2024-04-22T00:37:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/redwood-memory-tuning/"/>
        <id>https://pierrezemb.fr/posts/redwood-memory-tuning/</id>
        
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="performance" schema="https://pierrezemb.fr/tags/" label="performance"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="tuning" schema="https://pierrezemb.fr/tags/" label="tuning"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/redwood-memory-tuning/">&lt;p&gt;While FoundationDB allows you to obtain sub-milliseconds transactions’s latency without any knob-tuning, we had to bump a bit memory usage for Redwood under certain usage and workload. The following configuration has been tested on clusters from 7.1 to 7.3.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;btree-page-cache&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#btree-page-cache&quot; aria-label=&quot;Anchor link for: btree-page-cache&quot;&gt;🔗&lt;&#x2F;a&gt;BTree page cache&lt;&#x2F;h2&gt;
&lt;p&gt;We discovered the issue when we saw a performance decrease on our cluster storing time-series data. Our cluster was reporting some high disk-business, causing outages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;10.0.3.23:4501 ( 65% cpu; 61% machine; 0.010 Gbps; 93% disk IO; 7.5 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;span&gt;10.0.3.24:4501 ( 61% cpu; 61% machine; 0.010 Gbps; 87% disk IO; 9.7 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;span&gt;10.0.3.25:4501 ( 69% cpu; 61% machine; 0.010 Gbps; 93% disk IO; 5.4 GB &#x2F; 7.4 GB RAM  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was our first «we need to dig into this» moment with FDB. We couldn’t find the root-cause and we asked the community. Turns out we had a classic page-cache issue which was spotted by &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;markus.pilman&#x2F;summary&quot;&gt;Markus Pilman&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;wmd&#x2F;summary&quot;&gt;William Dowling&lt;&#x2F;a&gt;. While the trace files are pretty verbose, they are containing a lot of information like this one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;PagerCacheHit&amp;quot;: &amp;quot;39852&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;PagerCacheMiss&amp;quot;: &amp;quot;25903&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yep, that’s a 40% cache-miss ratio over 5s 😱 This is why the disk was so busy, spending his time moving pages back and forth. We need to bump the memory, but how much? The general recommandation that worked for us is to target around 1-2% of the &lt;code&gt;kvstore_used_bytes&lt;&#x2F;code&gt; metrics. As we have around 1TiB of data per StorageServer, we can add the following config key:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cache_memory = 10GiB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which fixed our cache-miss issue 🎉&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;PagerCacheHit&amp;quot;: &amp;quot;51968&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;PagerCacheMiss&amp;quot;: &amp;quot;432&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
&lt;h2 id=&quot;byte-sample-memory-usage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#byte-sample-memory-usage&quot; aria-label=&quot;Anchor link for: byte-sample-memory-usage&quot;&gt;🔗&lt;&#x2F;a&gt;Byte Sample memory usage&lt;&#x2F;h2&gt;
&lt;p&gt;But our problems are still unresolved, as we are still seeing some OOM 😭 Because this cluster is storing time-series data, each StorageServers is holding around 1TiB of data. As we were holding more and more data, we saw more and more OOM errors on our &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt; logs. Something was growing linearly with our usage and needed tuning. This time, we had help from &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;u&#x2F;SteavedHams&#x2F;summary&quot;&gt;Steve Atherton&lt;&#x2F;a&gt; which pointed us towards the direction of the &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;foundationdb-7-1-24-the-memory-usage-after-clean-startup-of-fdbserver-process-is-too-high&#x2F;3863&#x2F;8?u=pierrez&quot;&gt;Byte Sample&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a data structure that storage servers have called the Byte Sample which stores a deterministic random sample of keys. This data is persisted on disk in the storage engine and is loaded immediately upon storage server startup. Unfortunately, its size is not tracked or reported, but grows linearly with KV size and I suspect yours is somewhere around 4GB-6GB based on the memory usage I’ve seen for smaller storage KV sizes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, we need to add around 4GB more in the memory, but there is no config for that parameter. It needs to be embedded in the global &lt;code&gt;memory&lt;&#x2F;code&gt; parameter. Let’s compute the right value!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-global-memory-formula&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-global-memory-formula&quot; aria-label=&quot;Anchor link for: the-global-memory-formula&quot;&gt;🔗&lt;&#x2F;a&gt;The global memory formula&lt;&#x2F;h2&gt;
&lt;p&gt;By testing things on our clusters, we ended up with this formula:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Default is 2
&lt;&#x2F;span&gt;&lt;span&gt;cache_memory = (1-2% of kvstore_used_bytes)GiB
&lt;&#x2F;span&gt;&lt;span&gt;# Default is 8
&lt;&#x2F;span&gt;&lt;span&gt;memory = (8 + cache_memory + 4-6GB per TB of kvstore_used_bytes)GiB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which fixed all our memory issues with FoundationDB 🎉 And to be fair, this is the only things we needed to tune on our clusters, which is quite impressive 👀&lt;&#x2F;p&gt;
&lt;h2 id=&quot;special-thanks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#special-thanks&quot; aria-label=&quot;Anchor link for: special-thanks&quot;&gt;🔗&lt;&#x2F;a&gt;Special thanks&lt;&#x2F;h2&gt;
&lt;p&gt;I would like to thank Markus, William and Steve from the FoundationDB community for their help 🤝&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>True idempotent transactions with FoundationDB 7.3</title>
        <published>2024-03-12T00:37:27+01:00</published>
        <updated>2024-03-12T00:37:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/automatic-txn-fdb-730/"/>
        <id>https://pierrezemb.fr/posts/automatic-txn-fdb-730/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="transactions" schema="https://pierrezemb.fr/tags/" label="transactions"/>
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/automatic-txn-fdb-730/">&lt;p&gt;I have been working around &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.org&quot;&gt;FoundationDB&lt;&#x2F;a&gt; for several years now, and the new upcoming version is fixing one of the most evil and painful caveats you can deal with when writing layers: &lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transactions-with-unknown-results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transactions-with-unknown-results&quot; aria-label=&quot;Anchor link for: transactions-with-unknown-results&quot;&gt;🔗&lt;&#x2F;a&gt;Transactions with unknown results&lt;&#x2F;h2&gt;
&lt;p&gt;When you start writing code with FDB, you may be under the assertions that given the database’s robustness, you will not experience some strange behavior under certain failure scenarios. Turns out, there is one scenario that is possible to reach, and quickly explained in the official &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;developer-guide.html#transactions-with-unknown-results&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As with other client&#x2F;server databases, in some failure scenarios a client may be unable to determine whether a transaction succeeded. In these cases, commit() will raise a &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;api-error-codes.html#developer-guide-error-codes&quot;&gt;&lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; exception. The on_error() function treats this exception as retriable, so retry loops that don’t check for &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;api-error-codes.html#developer-guide-error-codes&quot;&gt;&lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; could execute the transaction twice. In these cases, you must consider the idempotency of the transaction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While having idempotent retry loops is possible, sometimes it is not possible, for example when using atomic operations to keep track of statistics.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this problem worth fixing? Seems a really edgy case 🤔&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It truly depends whether it is acceptable for your transaction to be committed twice. For most of the case, it is not, but sometimes developers are not aware of this behavior, leading to errors. This is one of the reasons why we worked and open-sourced a way to embed rust-code within FoundationDB’s simulation framework. Using the simulation crate, your layer can be tested like FDB, and I can assure you: you &lt;strong&gt;will see&lt;&#x2F;strong&gt; those transactions in simulation 🙈.&lt;&#x2F;p&gt;
&lt;p&gt;This behavior has given headache to my colleagues, as we tried to bypass correctness and validation code in simulation when transactions state are unknown, and who could blame us? Validate the correctness of your code is hard when certains transactions (for example, one that could clean everything) are “maybe committed”. Fortunately, the community has released a workaround for this: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;release-7.3&#x2F;documentation&#x2F;sphinx&#x2F;source&#x2F;automatic-idempotency.rst&quot;&gt;&lt;code&gt;automatic idempotency&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automatic-idempotency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#automatic-idempotency&quot; aria-label=&quot;Anchor link for: automatic-idempotency&quot;&gt;🔗&lt;&#x2F;a&gt;Automatic idempotency&lt;&#x2F;h2&gt;
&lt;p&gt;The documentation is fairly explicit:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the automatic_idempotency transaction option to prevent commits from failing with &lt;code&gt;commit_unknown_result&lt;&#x2F;code&gt; at a small performance cost.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The option appeared in FoundationDB 7.3, and could solve our issue. I decided to give it a try and modify the foundationdb-simulation crate example. The example is trying to use a atomic increment under simulation. Before 7.1, during validation, we had to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb-rs&#x2F;foundationdb-rs&#x2F;blob&#x2F;98136cbea1c9b8d40ea9a599438ce0fa8d0297c0&#x2F;foundationdb-simulation&#x2F;examples&#x2F;atomic&#x2F;workload.rs#L99C1-L99C94&quot;&gt;some code&lt;&#x2F;a&gt; that looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We don&amp;#39;t know how much maybe_committed transactions has succeeded,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so we are checking the possible range
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.success_count &amp;lt;= count
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; count &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.expected_count + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.maybe_committed_count {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I was adding 7.3 support in the crate, I decided to update the example and try the new option:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Enable idempotent txn
&lt;&#x2F;span&gt;&lt;span&gt; trx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_option&lt;&#x2F;span&gt;&lt;span&gt;(TransactionOption::AutomaticIdempotency)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the behavior is correct, I can simplify my consistency checks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.success_count == count {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        Severity::Info,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Atomic count match&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        details![],
&lt;&#x2F;span&gt;&lt;span&gt;     );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve been running hundreds of seeds on my machine and everything works great: no more maybe-committed transactions! Now that 7.3 support is merged in the rust bindings, we will be able to expands our testing thanks to our simulation farm. I&#x27;m also looking to see the performance impact of the feature, even if I&#x27;m pretty sure that it will outperform any layer-work.&lt;&#x2F;p&gt;
&lt;p&gt;This is truly a very useful feature and I hope this option will be turned on by default on the next major release. The initial PR can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;pull&#x2F;8398&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Best resources to learn about data and distributed systems</title>
        <published>2022-01-17T01:37:27+01:00</published>
        <updated>2022-01-17T01:37:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/distsys-resources/"/>
        <id>https://pierrezemb.fr/posts/distsys-resources/</id>
        
        <category term="learning" schema="https://pierrezemb.fr/tags/" label="learning"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="education" schema="https://pierrezemb.fr/tags/" label="education"/>
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/distsys-resources/">&lt;p&gt;Learning distributed systems is tough. You need to go through a lot of academic papers, concepts, code review, before being able to have a global pictures. Thankfully, there is a lot of resources out there that can help you to get started.  Here&#x27;s a list of resources I used to learn distributed systems. I will keep this blogpost up-to-date with books, conferences, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;distsys-resources&#x2F;books.jpeg&quot; alt=&quot;&#x2F;posts&#x2F;distsys-resources&#x2F;books.jpeg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A distributed system is one in which the failure of a computer you didn&#x27;t even know existed can render your own computer unusable.&lt;&#x2F;p&gt;
&lt;p&gt;-Lamport, 1987&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;reading-books&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reading-books&quot; aria-label=&quot;Anchor link for: reading-books&quot;&gt;🔗&lt;&#x2F;a&gt;Reading 📚&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;designing-data-intensive-applications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-data-intensive-applications&quot; aria-label=&quot;Anchor link for: designing-data-intensive-applications&quot;&gt;🔗&lt;&#x2F;a&gt;Designing Data-Intensive Applications&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start by one of my favorite book, &lt;a href=&quot;https:&#x2F;&#x2F;dataintensive.net&#x2F;&quot;&gt;Designing Data-Intensive Applications&lt;&#x2F;a&gt;, written by &lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;. This is by far the most practical book you will ever find about distributed systems. It covers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data models, query languages and encoding,&lt;&#x2F;li&gt;
&lt;li&gt;Replication, partitioning, the associated troubles, consistency, consensus,&lt;&#x2F;li&gt;
&lt;li&gt;batch and stream processing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NoSQL… Big Data… Scalability… CAP Theorem… Eventual Consistency… Sharding…&lt;&#x2F;p&gt;
&lt;p&gt;Nice buzzwords, but how does the stuff actually work?&lt;&#x2F;p&gt;
&lt;p&gt;As software engineers, we need to build applications that are reliable, scalable and maintainable in the long run. We need to understand the range of available tools and their trade-offs. For that, we have to dig deeper than buzzwords.&lt;&#x2F;p&gt;
&lt;p&gt;This book will help you navigate the diverse and fast-changing landscape of technologies for storing and processing data. We compare a broad variety of tools and approaches, so that you can see the strengths and weaknesses of each, and decide what’s best for your application.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;database-internals&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-internals&quot; aria-label=&quot;Anchor link for: database-internals&quot;&gt;🔗&lt;&#x2F;a&gt;Database Internals&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.databass.dev&#x2F;&quot;&gt;Database Internals&lt;&#x2F;a&gt;, written by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ifesdjeen&quot;&gt;Alex Petrov&lt;&#x2F;a&gt;, is a fantastic book for anyone wondering how a database works. I recommend reading it after &lt;code&gt;Designing Data-Intensive Applications&lt;&#x2F;code&gt;, as the author dives in more details compared to Martin&#x27;s book.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you ever wanted to learn more about Databases but did not know where to start? This is a book just for you.&lt;&#x2F;p&gt;
&lt;p&gt;We can treat databases and other infrastructure components as black boxes, but it doesn’t have to be that way. Sometimes we have to take a closer look at what’s going on because of performance issues. Sometimes databases misbehave, and we need to find out what exactly is going on. Some of us want to work in infrastructure and develop databases. This book’s main intention is to introduce you to the cornerstone concepts and help you understand how databases work.&lt;&#x2F;p&gt;
&lt;p&gt;The book consists of two parts: Storage Engines and Distributed Systems since that’s where most of the differences between the vast majority of databases is coming from.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems&quot; aria-label=&quot;Anchor link for: distributed-systems&quot;&gt;🔗&lt;&#x2F;a&gt;Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.distributed-systems.net&#x2F;index.php&#x2F;me&#x2F;&quot;&gt;Maarten van Steen&lt;&#x2F;a&gt; wrote a book called &lt;a href=&quot;https:&#x2F;&#x2F;www.distributed-systems.net&#x2F;&quot;&gt;Distributed Systems 3rd edition&lt;&#x2F;a&gt;. It is a nice book which you can get a digital copy of this book for free.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed systems are like 3D brain teasers: easy to disassemble; hard to put together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;understanding-distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-distributed-systems&quot; aria-label=&quot;Anchor link for: understanding-distributed-systems&quot;&gt;🔗&lt;&#x2F;a&gt;Understanding Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;If you are not a backend engineer but still curious about distributed systems, I highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;understandingdistributed.systems&#x2F;&quot;&gt;Understanding Distributed Systems&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;robertovitillo.com&#x2F;&quot;&gt;Roberto Vitillo&lt;&#x2F;a&gt; is doing an insane job to vulgarize the subject.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Want to learn how to build scalable and fault-tolerant cloud applications?&lt;&#x2F;p&gt;
&lt;p&gt;This book will teach you the core principles of distributed systems so that you don’t have to spend countless hours trying to understand how everything fits together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-internals-of-postgresql&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-internals-of-postgresql&quot; aria-label=&quot;Anchor link for: the-internals-of-postgresql&quot;&gt;🔗&lt;&#x2F;a&gt;The Internals of PostgreSQL&lt;&#x2F;h3&gt;
&lt;p&gt;PostgreSQL is getting a lot of love and traction these years, and &lt;a href=&quot;https:&#x2F;&#x2F;www.interdb.jp&#x2F;&quot;&gt;Hironobu Suzuki&lt;&#x2F;a&gt; wrote a terrific book the about the &lt;a href=&quot;https:&#x2F;&#x2F;www.interdb.jp&#x2F;pg&#x2F;index.html&quot;&gt;The Internals of PostgreSQL&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL is a well-designed open-source multi-purpose relational database system which is widely used throughout the world. It is one huge system with the integrated subsystems, each of which has a particular complex feature and works with each other cooperatively. Although understanding of the internal mechanism is crucial for both administration and integration using PostgreSQL, its hugeness and complexity prevent it. The main purposes of this document are to explain how each subsystem works, and to provide the whole picture of PostgreSQL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jepsen-blog&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#jepsen-blog&quot; aria-label=&quot;Anchor link for: jepsen-blog&quot;&gt;🔗&lt;&#x2F;a&gt;Jepsen blog&lt;&#x2F;h3&gt;
&lt;p&gt;We are often using databases as a source of truth, but they are also pieces of software with bugs in it. Kyle Kingsbury is the most famous database-breaker with &lt;a href=&quot;http:&#x2F;&#x2F;jepsen.io&#x2F;&quot;&gt;Jepsen&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jepsen is an effort to improve the safety of distributed databases, queues, consensus systems, etc. We maintain an open source software library for systems testing, as well as blog posts and conference talks exploring particular systems’ failure modes. In each analysis we explore whether the system lives up to its documentation’s claims, file new bugs, and suggest recommendations for operators.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You will find analysis on many databases, such as CockroachDB, etcd, Kafka, MongoDB, and so on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aphyr-distsys-class-notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#aphyr-distsys-class-notes&quot; aria-label=&quot;Anchor link for: aphyr-distsys-class-notes&quot;&gt;🔗&lt;&#x2F;a&gt;Aphyr distsys class notes&lt;&#x2F;h3&gt;
&lt;p&gt;Following Jepsen, here&#x27;s a great bonus: Kyle is also teaching distributed systems, and his notes are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aphyr&#x2F;distsys-class#an-introduction-to-distributed-systems&quot;&gt;available&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;distributed-systems-for-fun-and-profit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems-for-fun-and-profit&quot; aria-label=&quot;Anchor link for: distributed-systems-for-fun-and-profit&quot;&gt;🔗&lt;&#x2F;a&gt;Distributed systems for fun and profit&lt;&#x2F;h3&gt;
&lt;p&gt;Despite being free, &lt;a href=&quot;http:&#x2F;&#x2F;book.mixu.net&#x2F;distsys&#x2F;&quot;&gt;Distributed systems for fun and profit&lt;&#x2F;a&gt; is an awesome book. The author, &lt;a href=&quot;http:&#x2F;&#x2F;mixu.net&#x2F;&quot;&gt;Mikito Takada&lt;&#x2F;a&gt; has done a terrific work to vulgarize distributed systems.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted a text that would bring together the ideas behind many of the more recent distributed systems - systems such as Amazon&#x27;s Dynamo, Google&#x27;s BigTable and MapReduce, Apache&#x27;s Hadoop and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In this text I&#x27;ve tried to provide a more accessible introduction to distributed systems. To me, that means two things: introducing the key concepts that you will need in order to have a good time reading more serious texts, and providing a narrative that covers things in enough detail that you get a gist of what&#x27;s going on without getting stuck on details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;translucent-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#translucent-databases&quot; aria-label=&quot;Anchor link for: translucent-databases&quot;&gt;🔗&lt;&#x2F;a&gt;Translucent Databases&lt;&#x2F;h3&gt;
&lt;p&gt;I really like the pitch of the book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you have personal information in your database?&lt;&#x2F;p&gt;
&lt;p&gt;Do you keep files on your customers, your employees, or anyone else?&lt;&#x2F;p&gt;
&lt;p&gt;Do you need to worry about European laws restricting the information you keep?&lt;&#x2F;p&gt;
&lt;p&gt;Do you keep copies of credit card numbers, social security numbers, or other information that might be useful to identity thieves or insurance fraudsters?&lt;&#x2F;p&gt;
&lt;p&gt;Do you deal with medical records or personal secrets?&lt;&#x2F;p&gt;
&lt;p&gt;Most database administrators have some of these worries. Some have all of them. That&#x27;s why database security is so important.&lt;&#x2F;p&gt;
&lt;p&gt;This new book, Translucent Databases, describes a different attitude toward protecting the information.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wayner.org&#x2F;node&#x2F;46&quot;&gt;Translucent Databases&lt;&#x2F;a&gt; is a short book, focus on how to store sensitive data. You will find several dozen examples of interesting case studies on how to efficiently and privately store sensitive data. A must-have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-art-of-postgresql&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-art-of-postgresql&quot; aria-label=&quot;Anchor link for: the-art-of-postgresql&quot;&gt;🔗&lt;&#x2F;a&gt;The Art of PostgreSQL&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theartofpostgresql.com&#x2F;&quot;&gt;The Art of PostgreSQL&lt;&#x2F;a&gt; is all about showing the power of both SQL and PostgreSQL. It explains the how&#x27;s and why&#x27;s of using Postgres&#x27;s many feature, and how you, as a developers, can take advantages of it. A brilliant book that should be read by every developer.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This book is for developers, covering advanced SQL techniques for data processing. Learn how to get exactly the result set you need in your application’s code!&lt;&#x2F;p&gt;
&lt;p&gt;Learn advanced SQL with practical examples and datasets that help you get the most of the book! Every query solves a practical use case and is given in context.&lt;&#x2F;p&gt;
&lt;p&gt;The book covers (de-)normalisation with simple practical examples to dive into this seemingly complex topic, including Caching and Indexing Strategy.&lt;&#x2F;p&gt;
&lt;p&gt;Writing efficient SQL is easier than it looks, and begins with database modeling and writing clear code. The book teaches you how to write fast queries!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;readings-in-database-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#readings-in-database-systems&quot; aria-label=&quot;Anchor link for: readings-in-database-systems&quot;&gt;🔗&lt;&#x2F;a&gt;Readings in Database Systems&lt;&#x2F;h3&gt;
&lt;p&gt;Another free book, &lt;a href=&quot;http:&#x2F;&#x2F;www.redbook.io&#x2F;&quot;&gt;Readings in Database Systems&lt;&#x2F;a&gt; is a great read if you are looking for an opinionated and short review on subject like architecture, engines, analytics and so on.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readings in Database Systems (commonly known as the &quot;Red Book&quot;) has offered readers an opinionated take on both classic and cutting-edge research in the field of data management since 1988. Here, we present the Fifth Edition of the Red Book — the first in over ten years.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;watching-tv&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#watching-tv&quot; aria-label=&quot;Anchor link for: watching-tv&quot;&gt;🔗&lt;&#x2F;a&gt;Watching 📺&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cmu-database-group&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cmu-database-group&quot; aria-label=&quot;Anchor link for: cmu-database-group&quot;&gt;🔗&lt;&#x2F;a&gt;CMU Database Group&lt;&#x2F;h3&gt;
&lt;p&gt;The Database Group at Carnegie Mellon University have been publishing a lot of contents, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjZaHA6QcxDfJ0SIWBzQFKEG&quot;&gt;Intro to Database Systems lecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjasmrEd2_Yi1deeE360zv5O&quot;&gt;Advanced Database Systems lecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;which are the best lectures about database in my opinion.&lt;&#x2F;p&gt;
&lt;p&gt;I also recommend their Quarantine database talks playlists:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the &quot;Quarantine Database Tech Talks&quot; is a on-line seminar series at Carnegie Mellon University with leading developers and researchers of database systems. Each speaker will present the implementation details of their respective systems and examples of the technical challenges that they faced when working with real-world customers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjbeqnfuvp30VrI7VXiFuOXS&quot;&gt;Vaccination Database Tech Talks First Dose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLSE8ODhjZXjbDOFN4U4-Uv95-N8sgzs5D&quot;&gt;Vaccination Database Tech Talks Second Dose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distributed-systems-lecture-series&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distributed-systems-lecture-series&quot; aria-label=&quot;Anchor link for: distributed-systems-lecture-series&quot;&gt;🔗&lt;&#x2F;a&gt;Distributed Systems lecture series&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;&quot;&gt;Martin Kleppmann&lt;&#x2F;a&gt;(&lt;code&gt;Designing Data Intensive applications&lt;&#x2F;code&gt;&#x27;s author) published an &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB&quot;&gt;8-lecture series on distributed systems&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This video is part of an 8-lecture series on distributed systems, given as part of the undergraduate computer science course at the University of Cambridge.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;academic-conferences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#academic-conferences&quot; aria-label=&quot;Anchor link for: academic-conferences&quot;&gt;🔗&lt;&#x2F;a&gt;Academic conferences&lt;&#x2F;h3&gt;
&lt;p&gt;Keeping track of the academic world is not easy, but thankfully, we can keep track of several academic conferences which are data-related, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cidrdb.org&quot;&gt;CIDR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sigmod.org&#x2F;&quot;&gt;SIGMOD&#x2F;PODS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vldb.org&quot;&gt;VLDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;papoc-workshop.github.io&#x2F;2022&#x2F;&quot;&gt;PaPoC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;industrial-conference&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#industrial-conference&quot; aria-label=&quot;Anchor link for: industrial-conference&quot;&gt;🔗&lt;&#x2F;a&gt;Industrial conference&lt;&#x2F;h3&gt;
&lt;p&gt;There is not much database-focused conferences, but you will be interested to see talks from:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hydraconf.com&#x2F;&quot;&gt;HydraConf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;&quot;&gt;HYTRADBOI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distsys-reading-group-sessions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distsys-reading-group-sessions&quot; aria-label=&quot;Anchor link for: distsys-reading-group-sessions&quot;&gt;🔗&lt;&#x2F;a&gt;DistSys Reading Group sessions&lt;&#x2F;h3&gt;
&lt;p&gt;If you are looking for explanations about a distributed systems paper, you may be interested in the &lt;a href=&quot;http:&#x2F;&#x2F;charap.co&#x2F;category&#x2F;reading-group&#x2F;&quot;&gt;DistSys Reading Group&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every week we present and discuss one distributed systems paper. We try to focus on relatively new papers, although we occasionally break this rule for some important older publications. The main objective of this group is to share knowledge through the discussion. Our participants come from academia and industry and often carry a unique perspective and expertise on the subject matter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Every session can be found on their &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCMKIroHVXvMQRIBhENE6RhQ&quot;&gt;YouTube channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-adult-computer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#coding-adult-computer&quot; aria-label=&quot;Anchor link for: coding-adult-computer&quot;&gt;🔗&lt;&#x2F;a&gt;Coding 🧑‍💻&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;maelstrom&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maelstrom&quot; aria-label=&quot;Anchor link for: maelstrom&quot;&gt;🔗&lt;&#x2F;a&gt;Maelstrom&lt;&#x2F;h3&gt;
&lt;p&gt;Ever wonder to develop your own toy distributed systems? Fear no more, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jepsen-io&#x2F;maelstrom&quot;&gt;Maelstrom&lt;&#x2F;a&gt; for that!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maelstrom is a workbench for learning distributed systems by writing your own. It uses the Jepsen testing library to test toy implementations of distributed systems. Maelstrom provides standardized tests for things like &quot;a commutative set&quot; or &quot;a transactional key-value store&quot;, and lets you learn by writing implementations which those test suites can exercise. It&#x27;s used as a part of a distributed systems workshop by Jepsen.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Maelstrom provides a range of tests for different kinds of distributed systems, built on top of a simple JSON protocol via STDIN and STDOUT. Users write servers in any language. Maelstrom runs those servers, sends them requests, routes messages via a simulated network, and checks that clients observe expected behavior. You want to write Plumtree in Bash? Byzantine Paxos in Intercal? Maelstrom is for you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;pingcap-s-talent-plan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pingcap-s-talent-plan&quot; aria-label=&quot;Anchor link for: pingcap-s-talent-plan&quot;&gt;🔗&lt;&#x2F;a&gt;PingCAP&#x27;s Talent Plan&lt;&#x2F;h3&gt;
&lt;p&gt;PingCAP is the company behind the tidb&#x2F;tikv stack, a new distributed systems. They developed their own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;talent-plan&quot;&gt;open source training program&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talent Plan is an open source training program initiated by PingCAP. It aims to create or combine some open source learning materials for people interested in open source, distributed systems, Rust, Golang, and other infrastructure knowledge. As such, it provides a series of courses focused on open source collaboration, rust programming, distributed database and systems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I went through the Raft project in Rust and I learned a lot!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;patterns-of-distributed-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#patterns-of-distributed-systems&quot; aria-label=&quot;Anchor link for: patterns-of-distributed-systems&quot;&gt;🔗&lt;&#x2F;a&gt;Patterns of Distributed Systems&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;unmeshjoshi&quot;&gt;Unmesh Joshi&lt;&#x2F;a&gt; is writing an on-going serie called &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;patterns-of-distributed-systems&#x2F;&quot;&gt;Patterns of Distributed Systems&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed systems provide a particular challenge to program. They often require us to have multiple copies of data, which need to keep synchronized. Yet we cannot rely on processing nodes working reliably, and network delays can easily lead to inconsistencies. Despite this, many organizations rely on a range of core distributed software handling data storage, messaging, system management, and compute capability. These systems face common problems which they solve with similar solutions. This article recognizes and develops these solutions as patterns, with which we can build up an understanding of how to better understand, communicate and teach distributed system design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;reading-lists-eyes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reading-lists-eyes&quot; aria-label=&quot;Anchor link for: reading-lists-eyes&quot;&gt;🔗&lt;&#x2F;a&gt;Reading lists 👀&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dan-creswell-s-reading-list&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dan-creswell-s-reading-list&quot; aria-label=&quot;Anchor link for: dan-creswell-s-reading-list&quot;&gt;🔗&lt;&#x2F;a&gt;Dan Creswell&#x27;s reading List&lt;&#x2F;h3&gt;
&lt;p&gt;If you want more contents, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dancres&quot;&gt;Dan Creswell&lt;&#x2F;a&gt; has a nice &lt;a href=&quot;https:&#x2F;&#x2F;dancres.github.io&#x2F;Pages&#x2F;&quot;&gt;Distributed Systems Reading List&lt;&#x2F;a&gt; 🚀&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, you can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Crafting row keys in FoundationDB</title>
        <published>2021-02-21T00:24:27+01:00</published>
        <updated>2021-02-21T00:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/crafting-keys-in-fdb/"/>
        <id>https://pierrezemb.fr/posts/crafting-keys-in-fdb/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/crafting-keys-in-fdb/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;fdb-white.jpg&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;m working &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Clikengo&#x2F;foundationdb-rs&#x2F;issues&#x2F;27&quot;&gt;on my latest contribution around FoundationDB and Rust&lt;&#x2F;a&gt;, I had the chance to dig a bit into how FoundationDB&#x27;s bindings are offering helpers to generate keys. Their approach is interesting enough to deserve a blogpost 😎&lt;&#x2F;p&gt;
&lt;h2 id=&quot;row-key&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#row-key&quot; aria-label=&quot;Anchor link for: row-key&quot;&gt;🔗&lt;&#x2F;a&gt;Row key?&lt;&#x2F;h2&gt;
&lt;p&gt;When you are using a key&#x2F;value store, the design of the &lt;code&gt;row key&lt;&#x2F;code&gt; is extremely important, as this will define how well:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;your scans will be optimized,&lt;&#x2F;li&gt;
&lt;li&gt;your puts will be spread,&lt;&#x2F;li&gt;
&lt;li&gt;you will avoid &lt;code&gt;hot-spotting&lt;&#x2F;code&gt; a shard&#x2F;region.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you need more information on &lt;code&gt;row keys&lt;&#x2F;code&gt;, I recommend going through these links before moving on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;bigtable&#x2F;docs&#x2F;schema-design&quot;&gt;&quot;Designing your schema&quot; BigTable documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#rowkey.design&quot;&gt;&quot;Rowkey Design&quot; HBase documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hand-crafting-row-keys&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hand-crafting-row-keys&quot; aria-label=&quot;Anchor link for: hand-crafting-row-keys&quot;&gt;🔗&lt;&#x2F;a&gt;Hand-crafting row keys&lt;&#x2F;h2&gt;
&lt;p&gt;Most of the time, you will need to craft the &lt;code&gt;row key&lt;&#x2F;code&gt; &quot;by hand&quot;, like this for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;senx&#x2F;warp10-platform&#x2F;blob&#x2F;879734d7f63791b487f3e535cd79ac4c23e99377&#x2F;warp10&#x2F;src&#x2F;main&#x2F;java&#x2F;io&#x2F;warp10&#x2F;continuum&#x2F;store&#x2F;Store.java#L1215-L1222&quot;&gt;an HBase&#x27;s app&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Prefix + classId + labelsId + timestamp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 128 bits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte[]&lt;&#x2F;span&gt;&lt;span&gt; rowkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new byte&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Copy classId&#x2F;labelsId
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Longs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toByteArray&lt;&#x2F;span&gt;&lt;span&gt;(msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getClassId&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Longs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toByteArray&lt;&#x2F;span&gt;&lt;span&gt;(msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLabelsId&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rowkey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Constants&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HBASE_RAW_DATA_KEY_PREFIX&lt;&#x2F;span&gt;&lt;span&gt;.length + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or maybe you will wrap things in a function &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;tidb&#x2F;blob&#x2F;ef57bdbbb04f60a8be744060a99207e08a37514a&#x2F;tablecodec&#x2F;tablecodec.go#L80-L86&quot;&gt;like this in Go&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; EncodeRowKey encodes the table id and record handle into a kv.Key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;EncodeRowKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tableID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kv&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prefixLen&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appendTableRecordPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tableID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encodedHandle&lt;&#x2F;span&gt;&lt;span&gt;...)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each time, you need to wrap the complexity of converting your objects to a row-key, by creating a buffer and write stuff in it.&lt;&#x2F;p&gt;
&lt;p&gt;In our Java example, there is an interesting comment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Prefix + classId + labelsId + timestamp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we are replacing some characters, we are not really far from:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (Prefix, classId, labelsId, timestamp)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which looks like a &lt;code&gt;Tuple&lt;&#x2F;code&gt;(a collection of values of different types) and this is what FoundationDB is using as an abstraction to create keys 😍&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fdb-s-abstractions-and-helpers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fdb-s-abstractions-and-helpers&quot; aria-label=&quot;Anchor link for: fdb-s-abstractions-and-helpers&quot;&gt;🔗&lt;&#x2F;a&gt;FDB&#x27;s abstractions and helpers&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tuple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tuple&quot; aria-label=&quot;Anchor link for: tuple&quot;&gt;🔗&lt;&#x2F;a&gt;Tuple&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of crafting bytes by hand, we are &lt;code&gt;packing&lt;&#x2F;code&gt; a Tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a Tuple&amp;lt;String, i64&amp;gt; with (&amp;quot;tenant-42&amp;quot;, 1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tuple = (String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and compute a row-key from the Tuple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; row_key = foundationdb::tuple::pack::&amp;lt;(String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;(&amp;amp;tuple);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The generated row-key will be readable from any bindings, as it&#x27;s construction is standardized. Let&#x27;s print it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and print-it in hexa
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:#04X?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, row_key);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;log&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-log &quot;&gt;&lt;code class=&quot;language-log&quot; data-lang=&quot;log&quot;&gt;&lt;span&gt;&#x2F;&#x2F; can be verified with https:&#x2F;&#x2F;www.utf8-chartable.de&#x2F;unicode-utf8-table.pl
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, &lt;code&gt;pack&lt;&#x2F;code&gt; added some extra-characters. There are used to recognized the next type, a bit like when you are encoding&#x2F;decoding some wire protocols. You can find the relevant documentation &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;design&#x2F;tuple.md&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Having this kind of standard means that we can easily decompose&#x2F;&lt;code&gt;unpack&lt;&#x2F;code&gt; it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; retrieve the user and the magic number In a Tuple (String, i64)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; from_row_key = foundationdb::tuple::unpack::&amp;lt;(String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;(&amp;amp;row_key)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;, magic_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, from_row_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, from_row_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; user=&amp;#39;tenant-42&amp;#39;, magic_number=42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we saw &lt;code&gt;Tuples&lt;&#x2F;code&gt;, let&#x27;s dig in the next abstraction: &lt;code&gt;subspaces&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;subspace&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#subspace&quot; aria-label=&quot;Anchor link for: subspace&quot;&gt;🔗&lt;&#x2F;a&gt;Subspace&lt;&#x2F;h3&gt;
&lt;p&gt;When you are working with key-values store, we are often playing with what we call &lt;code&gt;keyspaces&lt;&#x2F;code&gt;, by dedicating a portion of the key to an usage, like this for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-1&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-2&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;users&#x2F;tenant-3&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;&#x2F;users&#x2F;tenant-1&#x2F;&lt;&#x2F;code&gt; can be view like a prefix where we will put all the relevant keys. Instead of passing a simple prefix, FoundationDB is offering a dedicated structure called a &lt;code&gt;Subspace&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Subspace represents a well-defined region of keyspace in a FoundationDB database&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It provides a convenient way to use FoundationDB tuples to define namespaces for different categories of data. The namespace is specified by a prefix tuple which is prepended to all tuples packed by the subspace. When unpacking a key with the subspace, the prefix tuple will be removed from the result.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Subspace&lt;&#x2F;code&gt; is heavily relying on FoundationDB&#x27;s tuples, as we can &lt;code&gt;pack&lt;&#x2F;code&gt; and &lt;code&gt;unpack&lt;&#x2F;code&gt; it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a best practice, API clients should use at least one subspace for application data.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, as we have now the tools to handle keyspaces easily, it is now futile to craft keys by hand 🙃 Let&#x27;s create a subspace!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a subspace from the Tuple (&amp;quot;tenant-1&amp;quot;, 42)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subspace = Subspace::from((String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let&amp;#39;s print the range
&lt;&#x2F;span&gt;&lt;span&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start: {:#04X?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; end: {:#04X?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, subspace.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, subspace.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see observe this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;log&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-log &quot;&gt;&lt;code class=&quot;language-log&quot; data-lang=&quot;log&quot;&gt;&lt;span&gt;&#x2F;&#x2F; can be verified with https:&#x2F;&#x2F;www.utf8-chartable.de&#x2F;unicode-utf8-table.pl
&lt;&#x2F;span&gt;&lt;span&gt;start: [
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;    0x00,
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, &#x2F;&#x2F; smallest possible byte
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;end: [
&lt;&#x2F;span&gt;&lt;span&gt;    0x02,
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x65, &#x2F;&#x2F; e 
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x61, &#x2F;&#x2F; a
&lt;&#x2F;span&gt;&lt;span&gt;    0x6E, &#x2F;&#x2F; n
&lt;&#x2F;span&gt;&lt;span&gt;    0x74, &#x2F;&#x2F; t
&lt;&#x2F;span&gt;&lt;span&gt;    0x2D, &#x2F;&#x2F; -
&lt;&#x2F;span&gt;&lt;span&gt;    0x31, &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    0x00, 
&lt;&#x2F;span&gt;&lt;span&gt;    0x15,
&lt;&#x2F;span&gt;&lt;span&gt;    0x2A, &#x2F;&#x2F; 42
&lt;&#x2F;span&gt;&lt;span&gt;    0x00,
&lt;&#x2F;span&gt;&lt;span&gt;    0xFF, &#x2F;&#x2F; biggest possible byte
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which make sens, if we take &lt;code&gt;(&quot;tenant-1&quot;, 42)&lt;&#x2F;code&gt; as a prefix, then the range for this subspace will be between &lt;code&gt;(&quot;tenant-1&quot;, 42, 0x00)&lt;&#x2F;code&gt; and &lt;code&gt;(&quot;tenant-1&quot;, 42, 0xFF)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;directory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#directory&quot; aria-label=&quot;Anchor link for: directory&quot;&gt;🔗&lt;&#x2F;a&gt;Directory&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we know our way around &lt;code&gt;Tuples&lt;&#x2F;code&gt; and &lt;code&gt;Subspaces&lt;&#x2F;code&gt;, we can now talk about what I&#x27;m working on, which is the &lt;code&gt;Directory&lt;&#x2F;code&gt;. Let&#x27;s have a look at the relevant &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;developer-guide.html#directories&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB provides directories (available in each language binding) as a tool for managing related subspaces.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Directories are a recommended approach for administering applications. Each application should create or open at least one directory to manage its subspaces.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, let&#x27;s see the API(in Go, as I&#x27;m working on the Rust API):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subspace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CreateOrOpen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subspace&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bytes&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; [21 18]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that we have a shorter subspace! The &lt;code&gt;directory&lt;&#x2F;code&gt; allows you to generate some integer that will be bind to a path, like here &lt;code&gt;&quot;application&quot;, &quot;my-app&quot;, &quot;tenant&quot;, &quot;tenant-42&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are two advantages to this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shorter keys,&lt;&#x2F;li&gt;
&lt;li&gt;cheap metadata operations like &lt;code&gt;List&lt;&#x2F;code&gt; or &lt;code&gt;Move&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; list all tenant in &amp;quot;application&amp;quot;, &amp;quot;my-app&amp;quot;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tenants&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tenants&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; [tenant-42]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; renaming &amp;#39;tenant-42&amp;#39; in &amp;#39;tenant-142&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will NOT move the data, only the metadata is modified
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directorySubspace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Move&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-42&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;},  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; old path
&lt;&#x2F;span&gt;&lt;span&gt; []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenant-142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; new path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directorySubspace&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bytes&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; still [21 18]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The returned object is actually a &lt;code&gt;DirectorySubspace&lt;&#x2F;code&gt;, which implements both &lt;code&gt;Directory&lt;&#x2F;code&gt; and &lt;code&gt;Subspace&lt;&#x2F;code&gt;, which means that you can use it to recreate many directories and subspaces at will 👌&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are wondering about how this integer is generated, I recommend going through this awesome blogpost on &lt;a href=&quot;https:&#x2F;&#x2F;activesphere.com&#x2F;blog&#x2F;2018&#x2F;08&#x2F;05&#x2F;high-contention-allocator&quot;&gt;how high contention allocator works in FoundationDB.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Announcing Record-Store, a new (experimental) place for your data</title>
        <published>2020-09-23T10:24:27+01:00</published>
        <updated>2020-09-23T10:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/announcing-record-store/"/>
        <id>https://pierrezemb.fr/posts/announcing-record-store/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="opensource" schema="https://pierrezemb.fr/tags/" label="opensource"/>
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/announcing-record-store/">&lt;p&gt;TL;DR: I&#x27;m really happy to announce my latest open-source project called Record-Store 🚀 Please check it out on &lt;a href=&quot;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what&quot; aria-label=&quot;Anchor link for: what&quot;&gt;🔗&lt;&#x2F;a&gt;What?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Record-Store&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;layer-concept.html&quot;&gt;layer&lt;&#x2F;a&gt; running on top of &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.org&quot;&gt;FoundationDB&lt;&#x2F;a&gt;. It provides abstractions to create, load and deletes customer-defined data called &lt;code&gt;records&lt;&#x2F;code&gt;, which are hold into a &lt;code&gt;RecordSpace&lt;&#x2F;code&gt;. We would like to have this kind of flow for developers:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Opening RecordSpace, for example &lt;code&gt;prod&#x2F;users&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Create a protobuf definition which will be used as schema&lt;&#x2F;li&gt;
&lt;li&gt;Upsert schema&lt;&#x2F;li&gt;
&lt;li&gt;Push records&lt;&#x2F;li&gt;
&lt;li&gt;Query records&lt;&#x2F;li&gt;
&lt;li&gt;delete records&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You need another &lt;code&gt;KeySpace&lt;&#x2F;code&gt; to store another type of data, or maybe a &lt;code&gt;KeySpace&lt;&#x2F;code&gt; dedicated to production env? Juste create it and you are good to go!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#features&quot; aria-label=&quot;Anchor link for: features&quot;&gt;🔗&lt;&#x2F;a&gt;Features&lt;&#x2F;h2&gt;
&lt;p&gt;It is currently an experiment, but it already has some strong features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-tenant&lt;&#x2F;strong&gt; A &lt;code&gt;tenant&lt;&#x2F;code&gt; can create as many &lt;code&gt;RecordSpace&lt;&#x2F;code&gt; as we want, and we can have many &lt;code&gt;tenants&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standard API&lt;&#x2F;strong&gt; We are exposing the record-store with standard technologies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&quot;&gt;gRPC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;very experimental&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;graphql.org&quot;&gt;GraphQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scalable&lt;&#x2F;strong&gt; We are based on the same tech behind &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;files&#x2F;record-layer-paper.pdf&quot;&gt;CloudKit&lt;&#x2F;a&gt; called the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb&#x2F;fdb-record-layer&#x2F;&quot;&gt;Record Layer&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transactional&lt;&#x2F;strong&gt; We are running on top of &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;&quot;&gt;FoundationDB&lt;&#x2F;a&gt;. FoundationDB gives you the power of ACID transactions in a distributed database.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypted&lt;&#x2F;strong&gt; Data are encrypted by default.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-model&lt;&#x2F;strong&gt; For each &lt;code&gt;RecordSpace&lt;&#x2F;code&gt;, you can define a &lt;code&gt;schema&lt;&#x2F;code&gt;, which is in-fact only a &lt;code&gt;Protobuf&lt;&#x2F;code&gt; definition. You need to store some &lt;code&gt;users&lt;&#x2F;code&gt;, or a more complicated structure? If you can represent it as &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&quot;&gt;Protobuf&lt;&#x2F;a&gt;, you are good to go!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Index-defined queries&lt;&#x2F;strong&gt; Your queries&#x27;s capabilities are defined by the indexes you put on your schema.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Secured&lt;&#x2F;strong&gt; We are using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CleverCloud&#x2F;biscuit&quot;&gt;Biscuit&lt;&#x2F;a&gt;, a mix of &lt;code&gt;JWT&lt;&#x2F;code&gt; and &lt;code&gt;Macaroons&lt;&#x2F;code&gt; to ensure auth{entication, orization}.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;🔗&lt;&#x2F;a&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;Lately, I have been playing a lot with my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-etcd&quot;&gt;ETCD-Layer&lt;&#x2F;a&gt; that is using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundationdb&#x2F;fdb-record-layer&#x2F;&quot;&gt;Record-Layer&lt;&#x2F;a&gt;. Thanks to it, I was able to bootstrap my ETCD-layer very quickly, but I was not using a tenth of the capacities of this library. So I decided to go deeper. &lt;strong&gt;What would a gRPC abstraction of the Record-Layer look like?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The name of this project itself is a tribute to the Record Layer as we are exposing the layer within a gRPC interface.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;try-it-out&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#try-it-out&quot; aria-label=&quot;Anchor link for: try-it-out&quot;&gt;🔗&lt;&#x2F;a&gt;Try it out&lt;&#x2F;h2&gt;
&lt;p&gt;Record-Store is open sourced under Apache License V2 in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;record-store&lt;&#x2F;a&gt; and the documentation can be found &lt;a href=&quot;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&quot;&gt;https:&#x2F;&#x2F;pierrez.github.io&#x2F;record-store&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Contributing to Apache HBase: custom data balancing</title>
        <published>2020-02-14T10:24:27+01:00</published>
        <updated>2020-02-14T10:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/hbase-custom-data-balancing/"/>
        <id>https://pierrezemb.fr/posts/hbase-custom-data-balancing/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="hbase" schema="https://pierrezemb.fr/tags/" label="hbase"/>
        <category term="performance" schema="https://pierrezemb.fr/tags/" label="performance"/>
        <category term="opensource" schema="https://pierrezemb.fr/tags/" label="opensource"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/hbase-custom-data-balancing/">&lt;blockquote&gt;
&lt;p&gt;This is a repost from &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;blog&#x2F;contributing-to-apache-hbase-custom-data-balancing&#x2F;&quot; title=&quot;Permalink to Contributing to Apache HBase: custom data balancing&quot;&gt;OVHcloud&#x27;s official blogpost.&lt;&#x2F;a&gt;, please read it there to support my company. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LostInBrittany&#x2F;&quot;&gt;Horacio Gonzalez&lt;&#x2F;a&gt; for the awesome drawings!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In today&#x27;s blogpost, we&#x27;re going to take a look at our upstream
contribution to Apache HBase&#x27;s stochastic load balancer, based on our
experience of running HBase clusters to support OVHcloud&#x27;s monitoring.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-1.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-context&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-context&quot; aria-label=&quot;Anchor link for: the-context&quot;&gt;🔗&lt;&#x2F;a&gt;The context&lt;&#x2F;h2&gt;
&lt;p&gt;Have you ever wondered how:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we generate the graphs for your OVHcloud server or web hosting package?&lt;&#x2F;li&gt;
&lt;li&gt;our internal teams monitor their own servers and applications?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;All internal teams are constantly gathering telemetry and monitoring data&lt;&#x2F;strong&gt; and sending them to a &lt;strong&gt;dedicated team,&lt;&#x2F;strong&gt; who are responsible for &lt;strong&gt;handling all the metrics and logs generated by OVHcloud&#x27;s infrastructure&lt;&#x2F;strong&gt;: the Observability team.&lt;&#x2F;p&gt;
&lt;p&gt;We tried a lot of different &lt;strong&gt;Time Series databases&lt;&#x2F;strong&gt;, and eventually chose &lt;a href=&quot;https:&#x2F;&#x2F;warp10.io&#x2F;&quot;&gt;Warp10&lt;&#x2F;a&gt; to handle our workloads. &lt;strong&gt;Warp10&lt;&#x2F;strong&gt; can be integrated with the various &lt;strong&gt;big-data solutions&lt;&#x2F;strong&gt; provided by the &lt;a href=&quot;https:&#x2F;&#x2F;www.apache.org&#x2F;&quot;&gt;Apache Foundation.&lt;&#x2F;a&gt; In our case, we use &lt;a href=&quot;http:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase&lt;&#x2F;a&gt; as the long-term storage datastore for our metrics.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase&lt;&#x2F;a&gt;, a datastore built on top of &lt;a href=&quot;http:&#x2F;&#x2F;hadoop.apache.org&#x2F;&quot;&gt;Apache Hadoop&lt;&#x2F;a&gt;, provides &lt;strong&gt;an elastic, distributed, key-ordered map.&lt;&#x2F;strong&gt; As such, one of the key features of Apache HBase for us is the ability to &lt;strong&gt;scan&lt;&#x2F;strong&gt;, i.e. retrieve a range of keys. Thanks to this feature, we can fetch &lt;strong&gt;thousands of datapoints in an optimised way&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have our own dedicated clusters, the biggest of which has more than 270 nodes to spread our workloads:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;between 1.6 and 2 million writes per second, 24&#x2F;7&lt;&#x2F;li&gt;
&lt;li&gt;between 4 and 6 million reads per second&lt;&#x2F;li&gt;
&lt;li&gt;around 300TB of telemetry, stored within Apache HBase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As you can probably imagine, storing 300TB of data in 270 nodes comes with some challenges regarding repartition, as &lt;strong&gt;every&lt;&#x2F;strong&gt; &lt;strong&gt;bit is hot data, and should be accessible at any time&lt;&#x2F;strong&gt;. Let&#x27;s dive in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-balancing-work-in-apache-hbase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-balancing-work-in-apache-hbase&quot; aria-label=&quot;Anchor link for: how-does-balancing-work-in-apache-hbase&quot;&gt;🔗&lt;&#x2F;a&gt;How does balancing work in Apache HBase?&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into the balancer, let&#x27;s take a look at how it works. In Apache HBase, data is split into shards called &lt;code&gt;Regions&lt;&#x2F;code&gt;, and distributed through &lt;code&gt;RegionServers&lt;&#x2F;code&gt;. The number of regions will increase as the data is coming in, and regions will be split as a result. This is where the &lt;code&gt;Balancer&lt;&#x2F;code&gt; comes in. It will &lt;strong&gt;move regions&lt;&#x2F;strong&gt; to avoid hotspotting a single &lt;code&gt;RegionServer&lt;&#x2F;code&gt; and effectively distribute the load.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-2.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The actual implementation, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;master&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java&quot;&gt;StochasticBalancer&lt;&#x2F;a&gt;, uses &lt;strong&gt;a cost-based approach:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It first computes the &lt;strong&gt;overall cost&lt;&#x2F;strong&gt; of the cluster, by looping through &lt;code&gt;cost functions&lt;&#x2F;code&gt;. Every cost function &lt;strong&gt;returns a number between 0 and 1 inclusive&lt;&#x2F;strong&gt;, where 0 is the lowest cost-best solution, and 1 is the highest possible cost and worst solution. Apache Hbase is coming with several cost functions, which are measuring things like region load, table load, data locality, number of regions per RegionServers... The computed costs are &lt;strong&gt;scaled by their respective coefficients, defined in the configuration&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Now that the initial cost is computed, we can try to &lt;code&gt;Mutate&lt;&#x2F;code&gt; our cluster. For this, the Balancer creates a random &lt;code&gt;nextAction&lt;&#x2F;code&gt;, which could be something like &lt;strong&gt;swapping two regions&lt;&#x2F;strong&gt;, or &lt;strong&gt;moving one region to another RegionServer&lt;&#x2F;strong&gt;. The action is &lt;strong&gt;applied&lt;&#x2F;strong&gt; &lt;strong&gt;virtually&lt;&#x2F;strong&gt; , and then the &lt;strong&gt;new cost is calculated&lt;&#x2F;strong&gt;. If the new cost is lower than our previous one, the action is stored. If not, it is skipped. This operation is repeated &lt;code&gt;thousands of times&lt;&#x2F;code&gt;, hence the &lt;code&gt;Stochastic&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;At the end, &lt;strong&gt;the list of valid actions is applied to the actual cluster.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;what-was-not-working-for-us&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-not-working-for-us&quot; aria-label=&quot;Anchor link for: what-was-not-working-for-us&quot;&gt;🔗&lt;&#x2F;a&gt;What was not working for us?&lt;&#x2F;h2&gt;
&lt;p&gt;We found out that &lt;strong&gt;for our specific use case&lt;&#x2F;strong&gt;, which involved:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single table&lt;&#x2F;li&gt;
&lt;li&gt;Dedicated Apache HBase and Apache Hadoop, &lt;strong&gt;tailored for our requirements&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Good key distribution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;the number of regions per RegionServer was the real limit for us&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Even if the balancing strategy seems simple, &lt;strong&gt;we do think that being able to run an Apache HBase cluster on heterogeneous hardware is vital&lt;&#x2F;strong&gt;, especially in cloud environments, because you &lt;strong&gt;may not be able to buy the same server specs again in the future.&lt;&#x2F;strong&gt;
In our earlier example, our cluster grew from 80 to ~250 machines in
four years. Throughout that time, we bought new dedicated server
references, and even tested some special internal references.&lt;&#x2F;p&gt;
&lt;p&gt;We ended-up with differents groups of hardware: &lt;strong&gt;some servers can handle only 180 regions, whereas the biggest can handle more than 900&lt;&#x2F;strong&gt;. Because of this disparity, we had to disable the Load Balancer to avoid the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;master&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java#L1194&quot;&gt;RegionCountSkewCostFunction&lt;&#x2F;a&gt;, which would try to bring all RegionServers to the same number of regions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-3.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two years ago we developed some internal tools, which are responsible
for load balancing regions across RegionServers. The tooling worked
really good for our use case, simplifying the day-to-day operation of
our cluster.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Open source is at the DNA of OVHcloud&lt;&#x2F;strong&gt;, and that means that we build our tools on open source software, but also that we &lt;strong&gt;contribute&lt;&#x2F;strong&gt;
and give it back to the community. When we talked around, we saw that
we weren&#x27;t the only one concerned by the heterogenous cluster problem.
We decided to rewrite our tooling to make it more general, and to &lt;strong&gt;contribute&lt;&#x2F;strong&gt; it &lt;strong&gt;directly upstream&lt;&#x2F;strong&gt; to the HBase project &lt;strong&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-contributions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#our-contributions&quot; aria-label=&quot;Anchor link for: our-contributions&quot;&gt;🔗&lt;&#x2F;a&gt;Our contributions&lt;&#x2F;h2&gt;
&lt;p&gt;The first contribution was pretty simple, the cost function list was a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;8cb531f207b9f9f51ab1509655ae59701b66ac37&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;master&#x2F;balancer&#x2F;StochasticLoadBalancer.java#L199-L213&quot;&gt;constant&lt;&#x2F;a&gt;. We &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;commit&#x2F;836f26976e1ad8b35d778c563067ed0614c026e9&quot;&gt;added the possibility to load custom cost functions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The second contribution was about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;commit&#x2F;42d535a57a75b58f585b48df9af9c966e6c7e46a&quot;&gt;adding an optional costFunction to balance regions according to a capacity rule&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-it-works&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-works&quot; aria-label=&quot;Anchor link for: how-does-it-works&quot;&gt;🔗&lt;&#x2F;a&gt;How does it works?&lt;&#x2F;h2&gt;
&lt;p&gt;The balancer will load a file containing lines of rules. &lt;strong&gt;A rule is composed of a regexp for hostname, and a limit.&lt;&#x2F;strong&gt; For example, we could have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rs[0-9] 200
&lt;&#x2F;span&gt;&lt;span&gt;rs1[0-9] 50
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;RegionServers with &lt;strong&gt;hostnames matching the first rules will have a limit of 200&lt;&#x2F;strong&gt;, and &lt;strong&gt;the others 50&lt;&#x2F;strong&gt;. If there&#x27;s no match, a default is set.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to these rule, we have two key pieces of information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;max number of regions for this cluster&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the *&lt;em&gt;rules for each servers&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;HeterogeneousRegionCountCostFunction&lt;&#x2F;code&gt; will try to &lt;strong&gt;balance regions, according to their capacity.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take an example... Imagine that we have 20 RS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;10 RS, named &lt;code&gt;rs0&lt;&#x2F;code&gt; to &lt;code&gt;rs9&lt;&#x2F;code&gt;, loaded with 60 regions each, which can each handle 200 regions.&lt;&#x2F;li&gt;
&lt;li&gt;10 RS, named &lt;code&gt;rs10&lt;&#x2F;code&gt; to &lt;code&gt;rs19&lt;&#x2F;code&gt;, loaded with 60 regions each, which can each handle 50 regions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, based on the following rules:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rs[0-9] 200
&lt;&#x2F;span&gt;&lt;span&gt;rs1[0-9] 50
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;... we can see that the &lt;strong&gt;second group is overloaded&lt;&#x2F;strong&gt;, whereas the first group has plenty of space.&lt;&#x2F;p&gt;
&lt;p&gt;We know that we can handle a maximum of &lt;strong&gt;2,500 regions&lt;&#x2F;strong&gt; (200×10 + 50×10), and we have currently &lt;strong&gt;1,200 regions&lt;&#x2F;strong&gt; (60×20). As such, the &lt;code&gt;HeterogeneousRegionCountCostFunction&lt;&#x2F;code&gt; will understand that the cluster is &lt;strong&gt;full at 48.0%&lt;&#x2F;strong&gt; (1200&#x2F;2500). Based on this information, we will then &lt;strong&gt;try to put all the RegionServers at ~48% of the load, according to the rules.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-custom-data-balancing&#x2F;hbase-ovh-4.jpeg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-to-next&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-to-next&quot; aria-label=&quot;Anchor link for: where-to-next&quot;&gt;🔗&lt;&#x2F;a&gt;Where to next?&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to Apache HBase&#x27;s contributors, our patches are now &lt;strong&gt;merged&lt;&#x2F;strong&gt; into the master branch. As soon as Apache HBase maintainers publish a new release, we will deploy and use it at scale. This &lt;strong&gt;will allow more automation on our side, and ease operations for the Observability Team.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Contributing was an awesome journey. What I love most about open
source is the opportunity ability to contribute back, and build stronger
software. We &lt;strong&gt;had an opinion&lt;&#x2F;strong&gt; about how a particular issue should addressed, but &lt;strong&gt;the discussions with the community helped us to refine it&lt;&#x2F;strong&gt;. We spoke with e &lt;strong&gt;ngineers from other companies, who were struggling with Apache HBase&#x27;s cloud deployments, just as we were&lt;&#x2F;strong&gt;, and thanks to those exchanges, &lt;strong&gt;our contribution became more and more relevant.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Notes about FoundationDB</title>
        <published>2020-01-30T10:24:27+01:00</published>
        <updated>2020-01-30T10:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/notes-about-foundationdb/"/>
        <id>https://pierrezemb.fr/posts/notes-about-foundationdb/</id>
        
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="foundationdb" schema="https://pierrezemb.fr/tags/" label="foundationdb"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="notes" schema="https://pierrezemb.fr/tags/" label="notes"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/notes-about-foundationdb/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;fdb-white.jpg&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;notes&#x2F;&quot;&gt;Notes About&lt;&#x2F;a&gt; is a blogpost serie  you will find a lot of &lt;strong&gt;links, videos, quotes, podcasts to click on&lt;&#x2F;strong&gt; about a specific topic. Today we will discover FoundationDB.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;overview-of-foundationdb&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview-of-foundationdb&quot; aria-label=&quot;Anchor link for: overview-of-foundationdb&quot;&gt;🔗&lt;&#x2F;a&gt;Overview of FoundationDB&lt;&#x2F;h2&gt;
&lt;p&gt;As stated in the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;index.html&quot;&gt;official documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB is a distributed database designed to handle large volumes of structured data across clusters of commodity servers. It organizes data as an ordered key-value store and employs ACID transactions for all operations. It is especially well-suited for read&#x2F;write workloads but also has excellent performance for write-intensive workloads.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It has strong key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-model data store&lt;&#x2F;li&gt;
&lt;li&gt;Easily scalable and fault tolerant&lt;&#x2F;li&gt;
&lt;li&gt;Industry-leading performance&lt;&#x2F;li&gt;
&lt;li&gt;Open source.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From a database dialect, it provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jepsen.io&#x2F;consistency&#x2F;models&#x2F;strict-serializable&quot;&gt;strict serializability&lt;&#x2F;a&gt;(operations appear to have occurred in some order),&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;spanner&#x2F;docs&#x2F;true-time-external-consistency&quot;&gt;external consistency&lt;&#x2F;a&gt;(For any two transactions, T1 and T2, if T2 starts to commit after T1 finishes committing, then the timestamp for T2 is greater than the timestamp for T1).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-story&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-story&quot; aria-label=&quot;Anchor link for: the-story&quot;&gt;🔗&lt;&#x2F;a&gt;The story&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB started as a company in 2009, and then &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2015&#x2F;03&#x2F;24&#x2F;apple-acquires-durable-database-company-foundationdb&#x2F;&quot;&gt;has been acquired in 2015 by Apple&lt;&#x2F;a&gt;. It &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9259986&quot;&gt;was a bad public publicity for the database as the download were removed.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On April 19, 2018, Apple &lt;a href=&quot;https:&#x2F;&#x2F;www.foundationdb.org&#x2F;blog&#x2F;foundationdb-is-open-source&#x2F;&quot;&gt;open sourced the software, releasing it under the Apache 2.0 license&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tooling-before-coding&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tooling-before-coding&quot; aria-label=&quot;Anchor link for: tooling-before-coding&quot;&gt;🔗&lt;&#x2F;a&gt;Tooling before coding&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flow&quot; aria-label=&quot;Anchor link for: flow&quot;&gt;🔗&lt;&#x2F;a&gt;Flow&lt;&#x2F;h3&gt;
&lt;p&gt;From the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;engineering.html&quot;&gt;Engineering page&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB began with ambitious goals for both high performance per node and scalability. We knew that to achieve these goals we would face serious engineering challenges that would require tool breakthroughs. We’d need efficient asynchronous communicating processes like in Erlang or the Async in .NET, but we’d also need the raw speed, I&#x2F;O efficiency, and control of C++. To meet these challenges, we developed several new tools, the most important of which is &lt;strong&gt;Flow&lt;&#x2F;strong&gt;, a new programming language that brings actor-based concurrency to C++11.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Flow is more of a &lt;strong&gt;stateful distributed system framework&lt;&#x2F;strong&gt; than an asynchronous library. It takes a number of highly opinionated stances on how the overall distributed system should be written, and isn’t trying to be a widely reusable building block.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flow adds about 10 keywords to C++11 and is technically a trans-compiler: the Flow compiler reads Flow code and compiles it down to raw C++11, which is then compiled to a native binary with a traditional toolchain.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Flow was developed before FDB, as stated in this &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=5319163&quot;&gt;2013&#x27;s post&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB founder here. Flow sounds crazy. What hubris to think that you need a new programming language for your project? Three years later: Best decision we ever made.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We knew this was going to be a long project so we invested heavily in tools at the beginning. The first two weeks of FoundationDB were building this new programming language to give us the speed of C++ with high level tools for actor-model concurrency. But, the real magic is how Flow enables us to use our real code to do deterministic simulations of a cluster in a single thread. We have a white paper upcoming on this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We&#x27;ve had quite a bit of interest in Flow over the years and I&#x27;ve given several talks on it at meetups&#x2F;conferences. We&#x27;ve always thought about open-sourcing it... It&#x27;s not as elegant as some other actor-model languages like Scala or Erlang (see: C++) but it&#x27;s nice and fast at run-time and really helps productivity vs. writing callbacks, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(Fun fact: We&#x27;ve only ever found two bugs in Flow. After the first, we decided that we never wanted a bug again in our programming language. So, we built a program in Python that generates random Flow code and independently-executes it to validate Flow&#x27;s behavior. This fuzz tester found one more bug, and we&#x27;ve never found another.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A very good overview of Flow is available &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;flow.html&quot;&gt;here&lt;&#x2F;a&gt; and some details &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;why-was-flow-developed&#x2F;1711&#x2F;3&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simulation-driven-development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simulation-driven-development&quot; aria-label=&quot;Anchor link for: simulation-driven-development&quot;&gt;🔗&lt;&#x2F;a&gt;Simulation-Driven development&lt;&#x2F;h3&gt;
&lt;p&gt;One of Flow’s most important job is enabling &lt;strong&gt;Simulation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We wanted FoundationDB to survive failures of machines, networks, disks, clocks, racks, data centers, file systems, etc., so we created a simulation framework closely tied to Flow. By replacing physical interfaces with shims, replacing the main epoll-based run loop with a time-based simulation, and running multiple logical processes as concurrent Flow Actors, Simulation is able to conduct a deterministic simulation of an entire FoundationDB cluster within a single-thread! Even better, we are able to execute this simulation in a deterministic way, enabling us to reproduce problems and add instrumentation ex post facto. This incredible capability enabled us to build FoundationDB exclusively in simulation for the first 18 months and ensure exceptional fault tolerance long before it sent its first real network packet. For a database with as strong a contract as the FoundationDB, testing is crucial, and over the years we have run the equivalent of a trillion CPU-hours of simulated stress testing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A good overview of the simulation can be found &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;testing.html&quot;&gt;here&lt;&#x2F;a&gt;. You can also have a look at this awesome talk!&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4fFDFbi3toc&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Simulation has been made possible by combining:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single-threaded pseudo-concurrency,&lt;&#x2F;li&gt;
&lt;li&gt;Simulated implementation of all external communication,&lt;&#x2F;li&gt;
&lt;li&gt;determinism.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s an example of a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;tests&#x2F;slow&#x2F;SwizzledCycleTest.txt&quot;&gt;testfile&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;testTitle=SwizzledCycleTest
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Cycle
&lt;&#x2F;span&gt;&lt;span&gt;    transactionsPerSecond=5000.0
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    expectedRate=0.01
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=RandomClogging
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    swizzle = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Attrition
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToKill=10
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToLeave=3
&lt;&#x2F;span&gt;&lt;span&gt;    reboot=true
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=Attrition
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToKill=10
&lt;&#x2F;span&gt;&lt;span&gt;    machinesToLeave=3
&lt;&#x2F;span&gt;&lt;span&gt;    reboot=true
&lt;&#x2F;span&gt;&lt;span&gt;    testDuration=30.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    testName=ChangeConfig
&lt;&#x2F;span&gt;&lt;span&gt;    maxDelayBeforeChange=30.0
&lt;&#x2F;span&gt;&lt;span&gt;    coordinators=auto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The test is splitted into two parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The goal&lt;&#x2F;strong&gt;, for example doing transaction pointing to another with thousands of transactions per sec and there should be only 0.01% of success.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What will be done to try to prevent the test to succeed&lt;&#x2F;strong&gt;. In this example it will &lt;strong&gt;at the same time&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;do random clogging. Which means that &lt;strong&gt;network connections will be stopped&lt;&#x2F;strong&gt; (preventing actors to send and receive packets). Swizzle flag means that a subset of network connections will be stopped and bring back in reverse order, 😳&lt;&#x2F;li&gt;
&lt;li&gt;will &lt;strong&gt;poweroff&#x2F;reboot machines&lt;&#x2F;strong&gt; (attritions) pseudo-randomly while keeping a minimal of three machines, 🤯&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;change configuration&lt;&#x2F;strong&gt;, which means a coordination changes through multi-paxos for the whole cluster. 😱&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Keep in mind that all these failures will appears &lt;strong&gt;at the same time!&lt;&#x2F;strong&gt; Do you think that your current &lt;strong&gt;datastore has gone through the same test on a daily basis?&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;pull&#x2F;11308&quot;&gt;I think not&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Applications written using the FoundationDB simulator have hierarchy: &lt;code&gt;DataCenter -&amp;gt; Machine -&amp;gt; Process -&amp;gt; Interface&lt;&#x2F;code&gt;. &lt;strong&gt;Each of these can be killed&#x2F;freezed&#x2F;nuked&lt;&#x2F;strong&gt;. Even faulty admin commands fired by some DevOps are tested!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;known-limitations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#known-limitations&quot; aria-label=&quot;Anchor link for: known-limitations&quot;&gt;🔗&lt;&#x2F;a&gt;Known limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Limitations are well described in the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;known-limitations.html&quot;&gt;official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recap&quot; aria-label=&quot;Anchor link for: recap&quot;&gt;🔗&lt;&#x2F;a&gt;Recap&lt;&#x2F;h3&gt;
&lt;p&gt;An awesome recap is available on the &lt;a href=&quot;https:&#x2F;&#x2F;softwareengineeringdaily.com&#x2F;2019&#x2F;07&#x2F;01&#x2F;foundationdb-with-ryan-worl&#x2F;&quot;&gt;Software Engineering Daily podcast&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;FoundationDB is tested in a very rigorous way using what&#x27;s called &lt;strong&gt;a deterministic simulation&lt;&#x2F;strong&gt;. The reason they needed a new programming language to do this, is that to get a deterministic simulation, you have to make something that is deterministic. It&#x27;s kind of obvious, but it&#x27;s hard to do.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, if your process interacts with the network, or disks, or clocks, it&#x27;s not deterministic. If you have multiple threads, not deterministic. So, they needed a way to write a concurrent program that could talk with networks and disks and that type of thing. They needed a way to write a concurrent program that does all of those things that you would think are non-deterministic in a deterministic way.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, all FoundationDB processes, and FoundationDB, it&#x27;s basically all written in Flow except a very small amount of it from the SQLite B-tree. The reason why that was useful is that when you use Flow, you get all of these higher level abstraction that let what you do what feels to you like asynchronous stuff, but under the hood, it&#x27;s all implemented using callbacks in C++, which you can make deterministic by running it in a single thread. So, there&#x27;s a scheduler that just calls these callbacks one after another and it&#x27;s very crazy looking C++ code, like you wouldn&#x27;t want to read it, but it&#x27;s because of Flow they were able to implement that deterministic simulation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-architecture&quot; aria-label=&quot;Anchor link for: the-architecture&quot;&gt;🔗&lt;&#x2F;a&gt;The Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;According to the &lt;a href=&quot;https:&#x2F;&#x2F;apple.github.io&#x2F;foundationdb&#x2F;administration.html#fdbmonitor-and-fdbserver&quot;&gt;fdbmonitor and fdbserver&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core FoundationDB server process is &lt;code&gt;fdbserver&lt;&#x2F;code&gt;. Each &lt;code&gt;fdbserver&lt;&#x2F;code&gt; process uses up to one full CPU core, so a production FoundationDB cluster will usually run N such processes on an N-core system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To make configuring, starting, stopping, and restarting fdbserver processes easy, FoundationDB also comes with a singleton daemon process, &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt;, which is started automatically on boot. &lt;code&gt;fdbmonitor&lt;&#x2F;code&gt; reads the &lt;code&gt;foundationdb.conf&lt;&#x2F;code&gt; file and starts the configured set of fdbserver processes. It is also responsible for starting backup-agent.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The whole architecture is designed to automatically:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;load-balanced data and traffic,&lt;&#x2F;li&gt;
&lt;li&gt;self-healing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;microservices&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#microservices&quot; aria-label=&quot;Anchor link for: microservices&quot;&gt;🔗&lt;&#x2F;a&gt;Microservices&lt;&#x2F;h3&gt;
&lt;p&gt;A typical FDB cluster is composed of different actors which are describe &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;blob&#x2F;master&#x2F;documentation&#x2F;sphinx&#x2F;source&#x2F;kv-architecture.rst&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The most important role in FDB is the &lt;code&gt;Coordinator&lt;&#x2F;code&gt;, it uses &lt;code&gt;Paxos&lt;&#x2F;code&gt; to manage membership on a quorum to do writes. The &lt;code&gt;Coordinator&lt;&#x2F;code&gt; is mostly only used to elect some peers and during recovery. You can view it as a Zookeeper-like stack.&lt;&#x2F;p&gt;
&lt;p&gt;The Coordinator starts by electing a &lt;code&gt;Cluster Controller&lt;&#x2F;code&gt;. It provides administratives informations about the cluster(I have 4 storage processes). Every process needs to register to the &lt;code&gt;Cluster Controller&lt;&#x2F;code&gt; and then it will assign roles to them. It is the one that will heart-beat all the processes.&lt;&#x2F;p&gt;
&lt;p&gt;Then a &lt;code&gt;Master&lt;&#x2F;code&gt; is elected. The &lt;code&gt;Master&lt;&#x2F;code&gt; process is reponsible for the &lt;code&gt;data distribution&lt;&#x2F;code&gt; algorithms. Fun fact, the mapping between keys and storage servers is stored within FDB, which is you can actually move data by running transactions like any other application. He is also the one providing &lt;code&gt;read versions&lt;&#x2F;code&gt; and &lt;code&gt;version number&lt;&#x2F;code&gt; internally. He is also acting as the &lt;code&gt;RateKeeper&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;The Proxies&lt;&#x2F;code&gt; are responsible for providing read versions, committing transactions, and tracking the storage servers responsible for each range of keys.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;The Transaction Resolvers&lt;&#x2F;code&gt; are responsible determining conflicts between transactions. A transaction conflicts if it reads a key that has been written between the transaction’s read version and commit version. The resolver does this by holding the last 5 seconds of committed writes in memory, and comparing a new transaction’s reads against this set of commits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;architecture.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;read-and-write-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-and-write-path&quot; aria-label=&quot;Anchor link for: read-and-write-path&quot;&gt;🔗&lt;&#x2F;a&gt;Read and Write Path&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;EMwhsGsxfPU&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h4 id=&quot;read-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-path&quot; aria-label=&quot;Anchor link for: read-path&quot;&gt;🔗&lt;&#x2F;a&gt;Read Path&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Retrieve a consistend read version for the transaction&lt;&#x2F;li&gt;
&lt;li&gt;Do reads from a consistent MVCC snapshot at that read version on the storage node&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;write-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-path&quot; aria-label=&quot;Anchor link for: write-path&quot;&gt;🔗&lt;&#x2F;a&gt;Write Path&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;client is sending a bundle to the &lt;code&gt;proxy&lt;&#x2F;code&gt; containing:
&lt;ul&gt;
&lt;li&gt;read version for the transaction&lt;&#x2F;li&gt;
&lt;li&gt;every readen key&lt;&#x2F;li&gt;
&lt;li&gt;every mutation that you want to do&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The proxy will assign a &lt;code&gt;Commit version&lt;&#x2F;code&gt; to a batch of transactions. &lt;code&gt;Commit version&lt;&#x2F;code&gt; is generated by the &lt;code&gt;Master&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Proxy is sending to the resolver. This will check if the data that you want to mutate has been changed between your &lt;code&gt;read Version&lt;&#x2F;code&gt; and your &lt;code&gt;Commit version&lt;&#x2F;code&gt;. They are sharded by key-range.&lt;&#x2F;li&gt;
&lt;li&gt;Transaction is made durable within the &lt;code&gt;Transaction Logs&lt;&#x2F;code&gt; by &lt;code&gt;fsync&lt;&#x2F;code&gt;ing the data. Before the data is even written to disk it is forwarded to the &lt;code&gt;storage servers&lt;&#x2F;code&gt; responsible for that mutation. Internally, &lt;code&gt;Transactions Logs&lt;&#x2F;code&gt; are creating &lt;strong&gt;a stream per &lt;code&gt;Storage Server&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;. Once the &lt;code&gt;storage servers&lt;&#x2F;code&gt; have made the mutation durable, they pop it from the log. This generally happens roughly 6 seconds after the mutation was originally committed to the log.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Storage servers&lt;&#x2F;code&gt; are lazily updating data on disk from the &lt;code&gt;Transaction logs&lt;&#x2F;code&gt;. They are keeping new write in-memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Transaction Logs&lt;&#x2F;code&gt; is responding OK to the Proxy and then the proxy is replying OK to the client.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can find more diagrams about transactions &lt;a href=&quot;https:&#x2F;&#x2F;forums.foundationdb.org&#x2F;t&#x2F;technical-overview-of-the-database&#x2F;135&#x2F;3&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recovery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recovery&quot; aria-label=&quot;Anchor link for: recovery&quot;&gt;🔗&lt;&#x2F;a&gt;Recovery&lt;&#x2F;h3&gt;
&lt;p&gt;Recovery processes are detailled at around 25min.&lt;&#x2F;p&gt;
&lt;p&gt;During failure of a process (Except storage servers), the systems will try to create a new &lt;code&gt;generation&lt;&#x2F;code&gt;, so new &lt;code&gt;Master&lt;&#x2F;code&gt;, &lt;code&gt;proxies&lt;&#x2F;code&gt;, &lt;code&gt;resolvers&lt;&#x2F;code&gt; and &lt;code&gt;transactions logs&lt;&#x2F;code&gt;. New master will get a read version from transactions logs, and commit with &lt;code&gt;Paxos&lt;&#x2F;code&gt; the fact that starting from &lt;code&gt;Read version&lt;&#x2F;code&gt;, the new generation is the one in charge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Storage servers&lt;&#x2F;code&gt; are replicating data on failures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-5-second-transaction-limit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-5-second-transaction-limit&quot; aria-label=&quot;Anchor link for: the-5-second-transaction-limit&quot;&gt;🔗&lt;&#x2F;a&gt;The 5-second transaction limit&lt;&#x2F;h3&gt;
&lt;p&gt;FoundationDB currently does not support transactions running for over five seconds. More details around 16min but the &lt;code&gt;tl;dr&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Storage servers are caching latest read in-memory,&lt;&#x2F;li&gt;
&lt;li&gt;Resolvers are caching the last 5 seconds transactions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ratekeeper&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ratekeeper&quot; aria-label=&quot;Anchor link for: ratekeeper&quot;&gt;🔗&lt;&#x2F;a&gt;Ratekeeper&lt;&#x2F;h3&gt;
&lt;p&gt;More details around 31min but the &lt;code&gt;tl;dr&lt;&#x2F;code&gt; is that when system is saturated, retrieving the &lt;code&gt;Read version&lt;&#x2F;code&gt; is slowed down.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;storage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storage&quot; aria-label=&quot;Anchor link for: storage&quot;&gt;🔗&lt;&#x2F;a&gt;Storage&lt;&#x2F;h3&gt;
&lt;p&gt;A lot of information are available in this talk:&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;nlus1Z7TVTI&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memory&lt;&#x2F;code&gt; is optimized for small databases. Data is stored in memory and logged to disk. In this storage engine, all data must be resident in memory at all times, and all reads are satisfied from memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SSD&lt;&#x2F;code&gt; Storage Engine is based on SQLite B-Tree&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redwood&lt;&#x2F;code&gt; will be a new storage engine based on Versioned B+Tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;developer-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#developer-experience&quot; aria-label=&quot;Anchor link for: developer-experience&quot;&gt;🔗&lt;&#x2F;a&gt;Developer experience&lt;&#x2F;h2&gt;
&lt;p&gt;FoundationDB’s keys are ordered, making &lt;code&gt;tuples&lt;&#x2F;code&gt; a particularly useful tool for data modeling. FoundationDB provides a &lt;strong&gt;tuple layer&lt;&#x2F;strong&gt; (available in each language binding) that encodes tuples into keys. This layer lets you store data using a tuple like &lt;code&gt;(state, county)&lt;&#x2F;code&gt; as a key. Later, you can perform reads using a prefix like &lt;code&gt;(state,)&lt;&#x2F;code&gt;. The layer works by preserving the natural ordering of the tuples.&lt;&#x2F;p&gt;
&lt;p&gt;Everything is wrapped into a transaction in FDB.&lt;&#x2F;p&gt;
&lt;p&gt;You can have a nice overview by reading the README of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;richardartoul&#x2F;tsdb-layer&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;tsdb-layer&lt;&#x2F;a&gt;, an experiment combining Time Series and FoundationDB: Millions of writes&#x2F;s and 10x compression in under 2,000 lines of Go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fdb-one-more-things-layers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fdb-one-more-things-layers&quot; aria-label=&quot;Anchor link for: fdb-one-more-things-layers&quot;&gt;🔗&lt;&#x2F;a&gt;FDB One more things: Layers&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;concept-of-layers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept-of-layers&quot; aria-label=&quot;Anchor link for: concept-of-layers&quot;&gt;🔗&lt;&#x2F;a&gt;Concept of layers&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HLE8chgw6LI&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;FDB is resolving many distributed problems, but you still need things like &lt;strong&gt;security, multi-tenancy, query optimizations, schema, indexing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Layers are designed to develop features &lt;strong&gt;above FDB.&lt;&#x2F;strong&gt; The record-layer provided by Apple is a good starting point to build things above it, as it provides &lt;strong&gt;structured schema, indexes, and (async) query planner.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The record-layer provided by Apple is a good starting point to build things above it, as it provides &lt;strong&gt;structured schema, indexes, and (async) query planner.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;extract-layer-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apple-s-record-layer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#apple-s-record-layer&quot; aria-label=&quot;Anchor link for: apple-s-record-layer&quot;&gt;🔗&lt;&#x2F;a&gt;Apple&#x27;s Record Layer&lt;&#x2F;h3&gt;
&lt;p&gt;The paper is located &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1901.04452.pdf&quot;&gt;FoundationDB Record Layer:A Multi-Tenant Structured Datastore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;SvoUHHM9IKU&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Record Layer was designed to solve CloudKit problem.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Record allow multi-tenancy with schema above FDB&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Record Layers is providing stateless compute&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-4.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And streaming queries!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;record-extract-5.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;kubernetes-operators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kubernetes-operators&quot; aria-label=&quot;Anchor link for: kubernetes-operators&quot;&gt;🔗&lt;&#x2F;a&gt;Kubernetes Operators&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;overview-of-the-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview-of-the-operator&quot; aria-label=&quot;Anchor link for: overview-of-the-operator&quot;&gt;🔗&lt;&#x2F;a&gt;Overview of the operator&lt;&#x2F;h3&gt;
&lt;div &gt;&lt;&#x2F;div&gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;A3U8M8pt3Ks&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-1.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-2.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Upgrade is done by &lt;strong&gt;bumping all processes at once&lt;&#x2F;strong&gt; 😱&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-3.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;notes-about-foundationdb&#x2F;operator-extract-4.png&quot; alt=&quot;fdb image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;combining-chaos-mesh-and-the-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#combining-chaos-mesh-and-the-operator&quot; aria-label=&quot;Anchor link for: combining-chaos-mesh-and-the-operator&quot;&gt;🔗&lt;&#x2F;a&gt;Combining chaos-mesh and the operator&lt;&#x2F;h3&gt;
&lt;p&gt;I played a bit with the operator by combining:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FoundationDB&#x2F;fdb-kubernetes-operator&quot;&gt;FoundationDB&#x2F;fdb-kubernetes-operator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;go-ycsb&quot;&gt;pingcap&#x2F;go-ycsb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;chaos-mesh&quot;&gt;pingcap&#x2F;chaos-mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-prometheus-exporter&#x2F;&quot;&gt;PierreZ&#x2F;fdb-prometheus-exporter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The experiment is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;fdb-k8s-chaos&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;roadmap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#roadmap&quot; aria-label=&quot;Anchor link for: roadmap&quot;&gt;🔗&lt;&#x2F;a&gt;Roadmap&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;foundationdb&#x2F;wiki&#x2F;FoundationDB-Release-7.0-Planning&quot;&gt;FoundationDB Release 7.0 Planning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Diving into Hbase&#x27;s MemStore</title>
        <published>2019-11-17T10:24:27+01:00</published>
        <updated>2019-11-17T10:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/diving-into-hbase-memstore/"/>
        <id>https://pierrezemb.fr/posts/diving-into-hbase-memstore/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="hbase" schema="https://pierrezemb.fr/tags/" label="hbase"/>
        <category term="performance" schema="https://pierrezemb.fr/tags/" label="performance"/>
        <category term="diving" schema="https://pierrezemb.fr/tags/" label="diving"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/diving-into-hbase-memstore/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;diving&#x2F;&quot;&gt;Diving Into&lt;&#x2F;a&gt; is a blogpost serie where we are digging a specific part of of the project&#x27;s basecode. In this episode, we will digg into the implementation behind Hbase&#x27;s MemStore.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;tl;dr:&lt;&#x2F;code&gt; Hbase is using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;ConcurrentSkipListMap.html&quot;&gt;ConcurrentSkipListMap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-memstore&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-memstore&quot; aria-label=&quot;Anchor link for: what-is-the-memstore&quot;&gt;🔗&lt;&#x2F;a&gt;What is the MemStore?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;memtable&lt;&#x2F;code&gt; from the official &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;archive&#x2F;bigtable-osdi06.pdf&quot;&gt;BigTable paper&lt;&#x2F;a&gt; is the equivalent of the &lt;code&gt;MemStore&lt;&#x2F;code&gt; in Hbase.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As rows are &lt;strong&gt;sorted lexicographically&lt;&#x2F;strong&gt; in Hbase, when data comes in, you need to have some kind of a &lt;strong&gt;in-memory buffer&lt;&#x2F;strong&gt; to order those keys. This is where the &lt;code&gt;MemStore&lt;&#x2F;code&gt; comes in. It absorbs the recent write (or put in Hbase semantics) operations. All the rest are immutable files called &lt;code&gt;HFile&lt;&#x2F;code&gt; stored in HDFS. There is one &lt;code&gt;MemStore&lt;&#x2F;code&gt; per &lt;code&gt;column family&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s dig into how the MemStore internally works in Hbase 1.X.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-1&quot; aria-label=&quot;Anchor link for: hbase-1&quot;&gt;🔗&lt;&#x2F;a&gt;Hbase 1&lt;&#x2F;h2&gt;
&lt;p&gt;All extract of code for this section are taken from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;tree&#x2F;rel&#x2F;1.4.9&quot;&gt;rel&#x2F;1.4.9&lt;&#x2F;a&gt; tag.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-memory-storage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-memory-storage&quot; aria-label=&quot;Anchor link for: in-memory-storage&quot;&gt;🔗&lt;&#x2F;a&gt;in-memory storage&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L35&quot;&gt;MemStore interface&lt;&#x2F;a&gt; is giving us insight on how it is working internally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * Write an update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; approximate size of the passed cell.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;long add(final Cell cell);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L68-L73&quot;&gt;add function on the MemStore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The implementation is hold by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;DefaultMemStore.java&quot;&gt;DefaultMemStore&lt;&#x2F;a&gt;. &lt;code&gt;add&lt;&#x2F;code&gt; is wrapped by several functions, but in the end, we are arriving here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addToCellSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Cell&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.activeSection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCellSkipListSet&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;DefaultMemStore.java#L202-L213&quot;&gt;addToCellSet on the DefaultMemStore&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;1.4.9&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;CellSkipListSet.java#L33-L48&quot;&gt;CellSkipListSet class&lt;&#x2F;a&gt; is built on top of &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;ConcurrentSkipListMap.html&quot;&gt;ConcurrentSkipListMap&lt;&#x2F;a&gt;, which provide nice features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;concurrency&lt;&#x2F;li&gt;
&lt;li&gt;sorted elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;flush-on-hdfs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#flush-on-hdfs&quot; aria-label=&quot;Anchor link for: flush-on-hdfs&quot;&gt;🔗&lt;&#x2F;a&gt;Flush on HDFS&lt;&#x2F;h3&gt;
&lt;p&gt;As we seen above, the &lt;code&gt;MemStore&lt;&#x2F;code&gt; is supporting all the puts. When asked to flush, the current memstore is &lt;strong&gt;moved to snapshot and is cleared&lt;&#x2F;strong&gt;. Flushed file are called (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;io&#x2F;hfile&#x2F;HFile.java&quot;&gt;HFiles&lt;&#x2F;a&gt;) and they are similar to &lt;code&gt;SSTables&lt;&#x2F;code&gt; introduced by the official &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;archive&#x2F;bigtable-osdi06.pdf&quot;&gt;BigTable paper&lt;&#x2F;a&gt;. HFiles are flushed on the Hadoop Distributed File System called &lt;code&gt;HDFS&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want deeper insight about SSTables, I recommend reading &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;rocksdb&#x2F;wiki&#x2F;Rocksdb-BlockBasedTable-Format&quot;&gt;Table Format from the awesome RocksDB wiki&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;compaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compaction&quot; aria-label=&quot;Anchor link for: compaction&quot;&gt;🔗&lt;&#x2F;a&gt;Compaction&lt;&#x2F;h3&gt;
&lt;p&gt;Compaction are only run on HFiles. It means that &lt;strong&gt;if hot data is continuously updated, we are overusing memory due to duplicate entries per row per MemStore&lt;&#x2F;strong&gt;. Accordion tends to solve this problem through &lt;em&gt;in-memory compactions&lt;&#x2F;em&gt;. Let&#x27;s have a look to Hbase 2.X!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-2&quot; aria-label=&quot;Anchor link for: hbase-2&quot;&gt;🔗&lt;&#x2F;a&gt;Hbase 2&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;storing-data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storing-data&quot; aria-label=&quot;Anchor link for: storing-data&quot;&gt;🔗&lt;&#x2F;a&gt;storing data&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;All extract of code starting from here are taken from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;tree&#x2F;rel&#x2F;2.1.2&quot;&gt;rel&#x2F;2.1.2&lt;&#x2F;a&gt; tag.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Does &lt;code&gt;MemStore&lt;&#x2F;code&gt; interface changed?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * Write an update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memstoreSizing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; The delta in memstore size will be passed back via this.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *        This will include both data size and heap overhead delta.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  void add(final Cell cell, MemStoreSizing memstoreSizing);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;MemStore.java#L67-L73&quot;&gt;add function in MemStore interface&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The signature changed a bit, to include passing a object instead of returning a long. Moving on.&lt;&#x2F;p&gt;
&lt;p&gt;The new structure implementing MemStore is called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;AbstractMemStore.java#L42&quot;&gt;AbstractMemStore&lt;&#x2F;a&gt;. Again, we have some layers, where AbstractMemStore is writing to a &lt;code&gt;MutableSegment&lt;&#x2F;code&gt;, which itsef is wrapping &lt;code&gt;Segment&lt;&#x2F;code&gt;. If you dig far enough, you will find that data are stored into the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;hbase&#x2F;blob&#x2F;rel&#x2F;2.1.2&#x2F;hbase-server&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;hadoop&#x2F;hbase&#x2F;regionserver&#x2F;CellSet.java#L35-L51&quot;&gt;CellSet class&lt;&#x2F;a&gt; which is also things built on top of &lt;strong&gt;ConcurrentSkipListMap&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-memory-compactions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-memory-compactions&quot; aria-label=&quot;Anchor link for: in-memory-compactions&quot;&gt;🔗&lt;&#x2F;a&gt;in-memory Compactions&lt;&#x2F;h3&gt;
&lt;p&gt;Hbase 2.0 introduces a big change to the original memstore called Accordion which is a codename for in-memory compactions. An awesome blogpost is available here: &lt;a href=&quot;https:&#x2F;&#x2F;blogs.apache.org&#x2F;hbase&#x2F;entry&#x2F;accordion-hbase-breathes-with-in&quot;&gt;Accordion: HBase Breathes with In-Memory Compaction&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;secure&#x2F;attachment&#x2F;12709471&#x2F;HBaseIn-MemoryMemstoreCompactionDesignDocument.pdf&quot;&gt;document design&lt;&#x2F;a&gt; is also available.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! feel free to react to this article, I&#x27;m also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Playing with TTL in HBase</title>
        <published>2019-05-27T22:07:11+02:00</published>
        <updated>2019-05-27T22:07:11+02:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/ttl-hbase/"/>
        <id>https://pierrezemb.fr/posts/ttl-hbase/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="hbase" schema="https://pierrezemb.fr/tags/" label="hbase"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="expiration" schema="https://pierrezemb.fr/tags/" label="expiration"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/ttl-hbase/">&lt;header class=&quot;row text-center header&quot;&gt;
   &lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;HBase Image&quot; class=&quot;text-center&quot;&gt;
&lt;&#x2F;header&gt;
&lt;p&gt;Among all features provided by HBase, there is one that is pretty handy to deal with your data&#x27;s lifecyle: the fact that every cell version can have &lt;strong&gt;Time to Live&lt;&#x2F;strong&gt; or TTL. Let&#x27;s dive into the feature!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;time-to-live-ttl&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#time-to-live-ttl&quot; aria-label=&quot;Anchor link for: time-to-live-ttl&quot;&gt;🔗&lt;&#x2F;a&gt;Time To Live (TTL)&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s read the doc first!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ColumnFamilies can set a TTL length in seconds, and &lt;strong&gt;HBase will automatically delete rows once the expiration time is reached&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#ttl&quot;&gt;HBase Book: Time To Live (TTL)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s play with it! You can easily start an standalone HBase by following &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#quickstart&quot;&gt;the HBase Book&lt;&#x2F;a&gt;. Once your standalone cluster is started, we can get started:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bin&#x2F;hbase&lt;&#x2F;span&gt;&lt;span&gt; shell
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:001:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; create &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TTL&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; 30} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 30 sec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that our test_table is created, we can &lt;code&gt;put&lt;&#x2F;code&gt; some data on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:002:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; put &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TTL Demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can &lt;code&gt;get&lt;&#x2F;code&gt; it with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:003:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;                          timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.0080 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s our row! But if you wait a bit, it will &lt;strong&gt;disappear&lt;&#x2F;strong&gt; thanks to the TTL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:004:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.0220 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It has been filtered from the result, but the data is still here.  You can trigger a &lt;strong&gt;raw&lt;&#x2F;strong&gt; scan to check:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:002:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {RAW =&amp;gt; true}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                                COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;                            column=cf1:desc, timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.3280 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will be removed only when a &lt;strong&gt;major-compaction&lt;&#x2F;strong&gt; will occur. As we are playing, we can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;force the memstore to be &lt;strong&gt;flushed as HFiles&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;force the &lt;strong&gt;compaction&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
You may have heard about &lt;b&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blogs.apache.org&#x2F;hbase&#x2F;entry&#x2F;accordion-hbase-breathes-with-in&quot;&gt;Accordion&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;, the new feature in HBase 2. If you are playing with HBase 2, you can enable it by following &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#inmemory_compaction&quot;&gt;this link&lt;&#x2F;a&gt; and run &lt;b&gt;compactions directly in the MemStores.&lt;&#x2F;b&gt;
&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:014:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; flush &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.4456 seconds    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:015:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; compact &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0468 seconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# wait a bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:016:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {RAW =&amp;gt; true}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                            COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; row(s)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0060 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;how-does-it-works&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-works&quot; aria-label=&quot;Anchor link for: how-does-it-works&quot;&gt;🔗&lt;&#x2F;a&gt;How does it works?&lt;&#x2F;h1&gt;
&lt;p&gt;As always, the truth is held by the documentation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A {row, column, version} tuple exactly specifies a cell in HBase. It’s possible to have an unbounded number of cells where the row and column are the same but the cell address differs only in its version dimension.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;While rows and column keys are expressed as bytes, &lt;strong&gt;the version is specified using a long integer&lt;&#x2F;strong&gt;. Typically &lt;strong&gt;this long contains time instances&lt;&#x2F;strong&gt; such as those returned by java.util.Date.getTime() or &lt;strong&gt;System.currentTimeMillis()&lt;&#x2F;strong&gt;,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#versions&quot;&gt;HBase Book: Versions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may have seen it during our scan earlier, there is a &lt;strong&gt;timestamp associated&lt;&#x2F;strong&gt; with the version of the cell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:003:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; get &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COLUMN&lt;&#x2F;span&gt;&lt;span&gt;                             CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;                          timestamp=1558366581134, value=TTL Demo
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#                           here  ^^^^^^^^^^^^^^^^^^^^^^^ 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hbase used the &lt;code&gt;System.currentTimeMillis()&lt;&#x2F;code&gt; at ingest time to add it. During scanner and compaction, as time went by, &lt;strong&gt;there was more than TTL seconds between the cell version and now, so the row was discarded&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now the real question is: &lt;strong&gt;can you set it by yourself and be real Time-Lord&lt;&#x2F;strong&gt; (of HBase)?&lt;&#x2F;p&gt;
&lt;p&gt;The reponse is &lt;em&gt;yes!&lt;&#x2F;em&gt; There is also a bit of a warning a bit &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#_explicit_version_example&quot;&gt;below:&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caution:&lt;&#x2F;em&gt; the version timestamp is used internally by HBase for things like &lt;strong&gt;time-to-live calculations&lt;&#x2F;strong&gt;. It’s usually best to avoid setting this timestamp yourself. Prefer using a separate timestamp attribute of the row, or have the timestamp as a part of the row key, or both.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s try it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt; +%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+2 min&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1558472441  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# don&amp;#39;t forget to add 3 zeroes as the time need to be in millisecond!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bin&#x2F;hbase&lt;&#x2F;span&gt;&lt;span&gt; shell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:001:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; put &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;row1234&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cf1:desc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;timestamp Demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, 1558472441000  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hbase&lt;&#x2F;span&gt;&lt;span&gt;(main)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:044:0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; scan &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ROW&lt;&#x2F;span&gt;&lt;span&gt;                            COLUMN+CELL
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row1234&lt;&#x2F;span&gt;&lt;span&gt;                       column=cf1:desc, timestamp=1558473315, value=timestamp Demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row(s)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Took&lt;&#x2F;span&gt;&lt;span&gt; 0.0031 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we are using a timestamp at the end of the &lt;code&gt;put&lt;&#x2F;code&gt; method? This will &lt;strong&gt;add the desired timestamp to the version&lt;&#x2F;strong&gt;. Which means that &lt;strong&gt;your application can control when your version will be removed, even with a TTL on your column-qualifier.&lt;&#x2F;strong&gt; You just need to compute a timestamp like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ts = now - ttlCF + desiredTTL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What are ACID transactions?</title>
        <published>2019-02-03T00:00:00+00:00</published>
        <updated>2019-02-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/acid-transactions/"/>
        <id>https://pierrezemb.fr/posts/acid-transactions/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="transactions" schema="https://pierrezemb.fr/tags/" label="transactions"/>
        <category term="sql" schema="https://pierrezemb.fr/tags/" label="sql"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/acid-transactions/">&lt;h1 id=&quot;transaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transaction&quot; aria-label=&quot;Anchor link for: transaction&quot;&gt;🔗&lt;&#x2F;a&gt;Transaction?&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;Programming should be about transforming data&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;--- Programming Elixir 1.3 by Dave Thomas&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As developers, we are interacting oftenly with data, whenever handling it from an API or a messaging consumer. To store it, we started to create softwares called &lt;strong&gt;relational database management system&lt;&#x2F;strong&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_database_management_system&quot;&gt;RDBMS&lt;&#x2F;a&gt;. Thanks to them, we, as developers, can develop applications pretty easily, &lt;strong&gt;without the need to implement our own storage solution&lt;&#x2F;strong&gt;. Interacting with &lt;a href=&quot;https:&#x2F;&#x2F;www.mysql.com&#x2F;&quot;&gt;mySQL&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt; have now become a &lt;strong&gt;commodity&lt;&#x2F;strong&gt;. Handling a database is not that easy though, because anything can happen, from failures to concurrency isssues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How can we interact with &lt;strong&gt;datastores that can fail?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;What is happening if two users are  &lt;strong&gt;updating a value at the same time?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a database user, we are using &lt;code&gt;transactions&lt;&#x2F;code&gt; to answer these questions. As a developer, a transaction is a &lt;strong&gt;single unit of logic or work&lt;&#x2F;strong&gt;, sometimes made up of multiple operations. It is mainly an &lt;strong&gt;abstraction&lt;&#x2F;strong&gt; that we are using to &lt;strong&gt;hide underlying problems&lt;&#x2F;strong&gt;, such as concurrency or hardware faults.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ACID&lt;&#x2F;code&gt; appears in a paper published in 1983 called &lt;a href=&quot;https:&#x2F;&#x2F;sites.fas.harvard.edu&#x2F;~cs265&#x2F;papers&#x2F;haerder-1983.pdf&quot;&gt;&quot;Principles of transaction-oriented database recovery&quot;&lt;&#x2F;a&gt; written by &lt;em&gt;Theo Haerder&lt;&#x2F;em&gt; and &lt;em&gt;Andreas Reuter&lt;&#x2F;em&gt;. This paper introduce a terminology of properties for a transaction:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A&lt;&#x2F;strong&gt;tomic, &lt;strong&gt;C&lt;&#x2F;strong&gt;onsistency, &lt;strong&gt;I&lt;&#x2F;strong&gt;solation, &lt;strong&gt;D&lt;&#x2F;strong&gt;urability&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;atomic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#atomic&quot; aria-label=&quot;Anchor link for: atomic&quot;&gt;🔗&lt;&#x2F;a&gt;Atomic&lt;&#x2F;h2&gt;
&lt;p&gt;Atomic, as you may have guessed, &lt;code&gt;atomic&lt;&#x2F;code&gt; represents something that &lt;strong&gt;cannot be splitted&lt;&#x2F;strong&gt;. In the database transaction world, it means for example that if a transaction with several writes is &lt;strong&gt;started and failed&lt;&#x2F;strong&gt; at some point, &lt;strong&gt;none of the write will be committed&lt;&#x2F;strong&gt;. As stated by many, the word &lt;code&gt;atomic&lt;&#x2F;code&gt; could be reword as &lt;code&gt;abortability&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;consistency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consistency&quot; aria-label=&quot;Anchor link for: consistency&quot;&gt;🔗&lt;&#x2F;a&gt;Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;You will hear about &lt;code&gt;consistency&lt;&#x2F;code&gt; a lot of this serie. Unfortunately, this word can be used in a lot of context. In the ACID definition, it refers to the fact that a transaction will &lt;strong&gt;bring the database from one valid state to another.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;isolation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation&quot; aria-label=&quot;Anchor link for: isolation&quot;&gt;🔗&lt;&#x2F;a&gt;Isolation&lt;&#x2F;h2&gt;
&lt;p&gt;Think back to your database. Were you the only user on it? I don&#x27;t think so. Maybe they were concurrent transactions at the same time, beside yours. &lt;strong&gt;Isolation while keeping good performance is the most difficult item on the list.&lt;&#x2F;strong&gt; There&#x27;s a lot of litterature and papers about it, and we will only scratch the surface. There is different transaction isolation levels, depending on the number of guarantees provided.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;isolation-by-the-theory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-by-the-theory&quot; aria-label=&quot;Anchor link for: isolation-by-the-theory&quot;&gt;🔗&lt;&#x2F;a&gt;Isolation by the theory&lt;&#x2F;h3&gt;
&lt;p&gt;The SQL standard defines four isolation levels: &lt;code&gt;Serializable&lt;&#x2F;code&gt;, &lt;code&gt;Repeatable Read&lt;&#x2F;code&gt;, &lt;code&gt;Read Commited&lt;&#x2F;code&gt; and &lt;code&gt;Read Uncommited&lt;&#x2F;code&gt;. The strongest isolation is &lt;code&gt;Serializable&lt;&#x2F;code&gt; where transaction are &lt;strong&gt;not runned in parallel&lt;&#x2F;strong&gt;. As you may have guessed, it is also the slowest. &lt;strong&gt;Weaker isolation level are trading speed against anomalies&lt;&#x2F;strong&gt; that can be sum-up like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Isolation level&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Dirty_reads&quot;&gt;dirty reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_%28database_systems%29#Non-repeatable_reads&quot;&gt;Non-repeatable reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Phantom_reads&quot;&gt;Phantom reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;Performance&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Serializable&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;👍&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Repeatable Read&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;👍👍&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read Commited&lt;&#x2F;td&gt;&lt;td&gt;😎&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;👍👍👍&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read uncommited&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;😱&lt;&#x2F;td&gt;&lt;td&gt;👍👍👍👍&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;I encourage you to click on all the links within the table to &lt;strong&gt;see everything that could go wrong in a weak database!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;isolation-in-real-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-in-real-databases&quot; aria-label=&quot;Anchor link for: isolation-in-real-databases&quot;&gt;🔗&lt;&#x2F;a&gt;Isolation in Real Databases&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we saw some theory, let&#x27;s have a look on a particular well-known database: PostgreSQL. What kind of isolation PostgreSQL is offering?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL provides a rich set of tools for developers to manage concurrent access to data. Internally, data consistency is maintained by using a multiversion model (&lt;strong&gt;Multiversion Concurrency Control, MVCC&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;--- &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;mvcc-intro.html&quot;&gt;Concurrency Control introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wait what? What is MVCC? Well, turns out that after the SQL standards came another type of Isolation: &lt;strong&gt;Snapshot Isolation&lt;&#x2F;strong&gt;. Instead of locking that row for reading when somebody starts working on it, it ensures that &lt;strong&gt;any transaction will see a version of the data that is corresponding to the start of the query&lt;&#x2F;strong&gt;. As it is providing a good balance between &lt;strong&gt;performance and consistency&lt;&#x2F;strong&gt;, it became &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_databases_using_MVCC&quot;&gt;a standard used by the industry&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;durability&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#durability&quot; aria-label=&quot;Anchor link for: durability&quot;&gt;🔗&lt;&#x2F;a&gt;Durability&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Durability&lt;&#x2F;code&gt; ensure that your database is a &lt;strong&gt;safe place&lt;&#x2F;strong&gt; where data can be stored without fear of losing it. If a transaction has commited successfully, any written data will not be forgotten.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;that-s-it&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-s-it&quot; aria-label=&quot;Anchor link for: that-s-it&quot;&gt;🔗&lt;&#x2F;a&gt;That&#x27;s it?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;All these properties may seems obvious to you&lt;&#x2F;strong&gt; but each of the item is involving a lot of engineering and researchs. And this is only valid for a single machine, &lt;strong&gt;the distributed transaction field&lt;&#x2F;strong&gt; is even more complicated, but we will get to it in another blogpost!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hbase Data Model</title>
        <published>2019-01-27T20:24:27+01:00</published>
        <updated>2019-01-27T20:24:27+01:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/hbase-data-model/"/>
        <id>https://pierrezemb.fr/posts/hbase-data-model/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="distributed" schema="https://pierrezemb.fr/tags/" label="distributed"/>
        <category term="hbase" schema="https://pierrezemb.fr/tags/" label="hbase"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <category term="design" schema="https://pierrezemb.fr/tags/" label="design"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/hbase-data-model/">&lt;h2 id=&quot;hbase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase&quot; aria-label=&quot;Anchor link for: hbase&quot;&gt;🔗&lt;&#x2F;a&gt;HBase?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;hbase-data-model&#x2F;hbase.jpg&quot; alt=&quot;hbase image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;&quot;&gt;Apache HBase™&lt;&#x2F;a&gt; is a type of &quot;NoSQL&quot; database. &quot;NoSQL&quot; is a general term meaning that the database isn’t an RDBMS which supports SQL as its primary access language. Technically speaking, HBase is really more a &quot;Data Store&quot; than &quot;Data Base&quot; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.nosql&quot;&gt;Hbase architecture overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hbase-data-model&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hbase-data-model&quot; aria-label=&quot;Anchor link for: hbase-data-model&quot;&gt;🔗&lt;&#x2F;a&gt;Hbase data model&lt;&#x2F;h2&gt;
&lt;p&gt;The data model is simple: it&#x27;s like a multi-dimensional map:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Elements are stored as &lt;strong&gt;rows&lt;&#x2F;strong&gt; in a &lt;strong&gt;table&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each table has only &lt;strong&gt;one index, the row key&lt;&#x2F;strong&gt;. There are no secondary indices.&lt;&#x2F;li&gt;
&lt;li&gt;Rows are &lt;strong&gt;sorted lexicographically by row key&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A range of rows is called a &lt;strong&gt;region&lt;&#x2F;strong&gt;. It is similar to a shard.&lt;&#x2F;li&gt;
&lt;li&gt;A row in HBase consists of a &lt;strong&gt;row key&lt;&#x2F;strong&gt; and &lt;strong&gt;one or more columns&lt;&#x2F;strong&gt;, which are holding the cells.&lt;&#x2F;li&gt;
&lt;li&gt;Values are stored into what we call a &lt;strong&gt;cell&lt;&#x2F;strong&gt; and are versioned with a timestamp.&lt;&#x2F;li&gt;
&lt;li&gt;A column is divided between a &lt;strong&gt;Column Family&lt;&#x2F;strong&gt; and a &lt;strong&gt;Column Qualifier&lt;&#x2F;strong&gt;. Long story short, a Column Family is kind of like a column in classic SQL, and a qualifier is a sub-structure inside a Colum family. A column Family is &lt;strong&gt;static&lt;&#x2F;strong&gt;, you need to create it during table creation, whereas Column Qualifiers can be created on the fly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not as easy as you thought? Here&#x27;s an example! Let&#x27;s say that we&#x27;re trying to &lt;strong&gt;save the whole internet&lt;&#x2F;strong&gt;. To do this, we need to store the content of each pages, and versioned it. We can use &lt;strong&gt;the page address as the row key&lt;&#x2F;strong&gt; and store the contents in a &lt;strong&gt;column called &quot;Contents&quot;&lt;&#x2F;strong&gt;. Nowadays, website &lt;strong&gt;contents can be anything&lt;&#x2F;strong&gt;, from a HTML file to a binary such as a PDF. To handle that, we can create as many &lt;strong&gt;qualifiers&lt;&#x2F;strong&gt; as we want, such as &quot;content:html&quot; or &quot;content:video&quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fr.pierrezemb.www&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Row key
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Column family
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content:html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Column qualifier
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2017-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A timestamp
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The actual value
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2016-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another timestamp
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another cell
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content:pdf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Another Column qualifier
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2015-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;pdf&amp;gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; my website may only contained a pdf in 2015
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;key-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-design&quot; aria-label=&quot;Anchor link for: key-design&quot;&gt;🔗&lt;&#x2F;a&gt;Key design&lt;&#x2F;h2&gt;
&lt;p&gt;Hbase is most efficient at queries when we&#x27;re getting a &lt;strong&gt;single row key&lt;&#x2F;strong&gt;, or during &lt;strong&gt;row range&lt;&#x2F;strong&gt;, ie. getting a block of contiguous data because keys are &lt;strong&gt;sorted lexicographically by row key&lt;&#x2F;strong&gt;. For example, my website &lt;code&gt;fr.pierrezemb.www&lt;&#x2F;code&gt; and &lt;code&gt;org.pierrezemb.www&lt;&#x2F;code&gt; would not be &quot;near&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;As such, the &lt;strong&gt;key design&lt;&#x2F;strong&gt; is really important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If your data are too spread, you will have poor performance.&lt;&#x2F;li&gt;
&lt;li&gt;If your data are too much collocate, you will also have poor performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As stated by the official &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#rowkey.design&quot;&gt;documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hotspotting occurs when a &lt;strong&gt;large amount of client traffic is directed at one node, or only a few nodes, of a cluster&lt;&#x2F;strong&gt;. This traffic may represent reads, writes, or other operations. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As you may have guessed, this is why we are using the &lt;strong&gt;reverse address name&lt;&#x2F;strong&gt; in my example, because &lt;code&gt;www&lt;&#x2F;code&gt; is too generic, we would have hotspot the poor region holding data for &lt;code&gt;www&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are curious about Hbase schema, you should have a look on &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;bigtable&#x2F;docs&#x2F;schema-design&quot;&gt;Designing Your BigTable Schema&lt;&#x2F;a&gt;, as BigTable is kind of the proprietary version of Hbase.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-warned&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-warned&quot; aria-label=&quot;Anchor link for: be-warned&quot;&gt;🔗&lt;&#x2F;a&gt;Be warned&lt;&#x2F;h2&gt;
&lt;p&gt;I have been working with Hbase for the past three years, &lt;strong&gt;including operation and on-call duty.&lt;&#x2F;strong&gt; It is a really nice data store, but it diverges from classical RDBMS. Here&#x27;s some warnings extracted from the well-written documentation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;HBase is really more a &quot;Data Store&quot; than &quot;Data Base&quot; because it lacks many of the features you find in an RDBMS, such as typed columns, secondary indexes, triggers, and advanced query languages, etc. However, HBase has many features which supports both linear and modular scaling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.nosql&quot;&gt;NoSQL?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have hundreds of millions or billions of rows, then HBase is a good candidate. If you only have a few thousand&#x2F;million rows, then using a traditional RDBMS might be a better choice due to the fact that all of your data might wind up on a single node (or two) and the rest of the cluster may be sitting idle.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;hbase.apache.org&#x2F;book.html#arch.overview.when&quot;&gt;When Should I Use HBase?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Engage maximum warp speed in time series analysis with WarpScript</title>
        <published>2017-10-08T20:43:05.198+00:00</published>
        <updated>2017-10-08T20:43:05.198+00:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/"/>
        <id>https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="timeseries" schema="https://pierrezemb.fr/tags/" label="timeseries"/>
        <category term="analytics" schema="https://pierrezemb.fr/tags/" label="analytics"/>
        <category term="performance" schema="https://pierrezemb.fr/tags/" label="performance"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/engage-maximum-warp-speed-in-time-series-analysis-with-warpscript/">&lt;p&gt;&lt;strong&gt;update 2019:&lt;&#x2F;strong&gt; this is a repost on my own blog. original article can be read on &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@PierreZ&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript-c97a9f4a0016&quot;&gt;medium&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;1.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We, at &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt;, are working everyday with &lt;a href=&quot;http:&#x2F;&#x2F;www.warp10.io&#x2F;&quot;&gt;Warp10 Platform&lt;&#x2F;a&gt;, an open source Time Series database. You may not know it because it’s not as famous as &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;docs.influxdata.com&#x2F;influxdb&#x2F;&quot;&gt;InfluxDB&lt;&#x2F;a&gt; but Warp10 is the most &lt;strong&gt;powerful and generic solution&lt;&#x2F;strong&gt; to store and analyze sensor data. It’s the &lt;strong&gt;core&lt;&#x2F;strong&gt; of Metrics, and many internal teams from OVH are using &lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt; to monitor their infrastructure. As a result, we are handling a pretty nice traffic 24&#x2F;7&#x2F;365, as you can see below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;6.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not only Warp10 allows us to reach an unbelievable scalability but it also comes with his own language called &lt;strong&gt;WarpScript&lt;&#x2F;strong&gt;, to manipulate and perform heavy time series analysis. Before digging into the need of a new language, let’s talk a bit about the need of time series analysis.### What is a time serie ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A time serie, or sensor data, is simply a sequence of measurements over time&lt;&#x2F;strong&gt;. The definition is quite generic, because many things can be represented as a time serie:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the evolution of the stock exchange or a bank account&lt;&#x2F;li&gt;
&lt;li&gt;the number of calls on a webserver&lt;&#x2F;li&gt;
&lt;li&gt;the fuel consumption of a car&lt;&#x2F;li&gt;
&lt;li&gt;the time to insert a value into a database&lt;&#x2F;li&gt;
&lt;li&gt;the time a customer is taking to register on your website&lt;&#x2F;li&gt;
&lt;li&gt;the heart rate of a person measured through a smartwatch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From an historical point of view, time series appeared shortly after the creation of the Web, to &lt;strong&gt;help engineers monitor the networks&lt;&#x2F;strong&gt;. It quickly expands to also monitors servers. With the right monitoring system, you can have &lt;strong&gt;insights&lt;&#x2F;strong&gt; and &lt;strong&gt;KPIs&lt;&#x2F;strong&gt; about your service:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Analysis of long-term trend&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How fast is my database growing?&lt;&#x2F;li&gt;
&lt;li&gt;At what speed my number of active user accounts grows?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;The comparison over time&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My queries run faster with the new version of my library? Is my site slower than last week?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Alerts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger alerts based on advanced queries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Displaying data through dashboards&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dashboards help answer basic questions on the service, and in particular the 4 indispensable metrics: &lt;strong&gt;latency, traffic, errors and service saturation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;The possibility of designing retrospective&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Our latency is doubling, what’s going on?### Time series are complicated to handle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Storage, retrieval and analysis of time series cannot be done through standard relational databases. Generally, highly scalable databases are used to support volumetry. For example, the &lt;strong&gt;300,000 Airbus A380 sensors on board can generate an average of 16 TB of data per flight&lt;&#x2F;strong&gt;. On a smaller scale, &lt;strong&gt;a single sensor that measures every second generates 31.5 million values per year&lt;&#x2F;strong&gt;. Handling time series at scale is difficult, because you’re running into advanced distributed systems issues, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ingestion scalability&lt;&#x2F;strong&gt;, i.e. how to absorb all the datapoints 24⁄7&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;query scalability&lt;&#x2F;strong&gt;, i.e. how to query in a raisonnable amount of time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;delete capability&lt;&#x2F;strong&gt;, i.e. how to handle deletes without stopping ingestion and query&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Frustration with existing open source monitoring tools like &lt;strong&gt;Nagios&lt;&#x2F;strong&gt; and &lt;strong&gt;Ganglia&lt;&#x2F;strong&gt; is why the giants created their own tools — &lt;strong&gt;Google has Borgmon&lt;&#x2F;strong&gt; and &lt;strong&gt;Facebook has&lt;&#x2F;strong&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.vldb.org&#x2F;pvldb&#x2F;vol8&#x2F;p1816-teller.pdf&quot;&gt;&lt;strong&gt;Gorilla&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, just to name two. They are closed sources but the idea of treating time-series data as a data source for generating alerts is now accessible to everyone, thanks to the &lt;strong&gt;former Googlers who decided to rewrite Borgmon&lt;&#x2F;strong&gt; outside Google.### Why another time series database?&lt;&#x2F;p&gt;
&lt;p&gt;Now the time series ecosystem is bigger than ever, here’s a short list of what you can find to handle time series data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;InfluxDB.&lt;&#x2F;li&gt;
&lt;li&gt;Prometheus.&lt;&#x2F;li&gt;
&lt;li&gt;Riak TS.&lt;&#x2F;li&gt;
&lt;li&gt;OpenTSDB.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then there’s &lt;strong&gt;Warp10&lt;&#x2F;strong&gt;. The difference is quite simple, Warp10 is &lt;strong&gt;a platform&lt;&#x2F;strong&gt; whereas all the time series listed above are &lt;strong&gt;stores&lt;&#x2F;strong&gt;. This is game changing, for multiples reasons.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;security-first-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#security-first-design&quot; aria-label=&quot;Anchor link for: security-first-design&quot;&gt;🔗&lt;&#x2F;a&gt;Security-first design&lt;&#x2F;h4&gt;
&lt;p&gt;Security is mandatory for data access and sharing job’s results, but in most of the above databases, security access is not handled by default. With Warp10, security is handled with crypto tokens similar to &lt;a href=&quot;https:&#x2F;&#x2F;research.google.com&#x2F;pubs&#x2F;pub41892.html&quot;&gt;Macaroons&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;high-level-analysis-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#high-level-analysis-capabilities&quot; aria-label=&quot;Anchor link for: high-level-analysis-capabilities&quot;&gt;🔗&lt;&#x2F;a&gt;High level analysis capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;Using classical time series database, &lt;strong&gt;high level analysis must be done elsewhere&lt;&#x2F;strong&gt;, with R, Spark, Flink, Python, or whatever languages or frameworks that you want to use. Using Warp10, you can just &lt;strong&gt;submit your script&lt;&#x2F;strong&gt; and &lt;em&gt;voilà&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;server-side-calculation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#server-side-calculation&quot; aria-label=&quot;Anchor link for: server-side-calculation&quot;&gt;🔗&lt;&#x2F;a&gt;Server-side calculation&lt;&#x2F;h4&gt;
&lt;p&gt;Algorithms are resource heavy. Whatever they’re using CPU, ram, disk and network, you’ll hit &lt;strong&gt;limitations&lt;&#x2F;strong&gt; on your personal computer. Can you really aggregate and analyze one year of data from thousands of sensors on your laptop? Maybe, but what if you’re submitting the job from a mobile? To be &lt;strong&gt;scalable&lt;&#x2F;strong&gt;, analysis must be done &lt;strong&gt;server-side&lt;&#x2F;strong&gt;.### Meet WarpScript&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;2.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Warp10 folks created WarpScript, an &lt;strong&gt;extensible&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stack-oriented_programming_language&quot;&gt;&lt;strong&gt;stack oriented programming language&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; which offers more than &lt;strong&gt;800 functions&lt;&#x2F;strong&gt; and &lt;strong&gt;several high level frameworks&lt;&#x2F;strong&gt; to ease and speed your data analysis. Simply &lt;strong&gt;create scripts&lt;&#x2F;strong&gt; containing your data analysis code and &lt;strong&gt;submit them to the platform&lt;&#x2F;strong&gt;, they will &lt;strong&gt;execute close to where the data resides&lt;&#x2F;strong&gt; and you will get the result of that analysis as a &lt;strong&gt;JSON object&lt;&#x2F;strong&gt; that you can &lt;strong&gt;integrate into your application&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, you’ll be able to run that &lt;strong&gt;awesome query that is fetching millions of datapoints&lt;&#x2F;strong&gt; and only get the result. You need all the data, or just the timestamp of a weird datapoint? &lt;strong&gt;The result of the script is simply what’s left on the stack&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dataflow-language&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dataflow-language&quot; aria-label=&quot;Anchor link for: dataflow-language&quot;&gt;🔗&lt;&#x2F;a&gt;Dataflow language&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript is really easy to code, &lt;strong&gt;because of the stack design&lt;&#x2F;strong&gt;. You’ll be &lt;strong&gt;pushing elements into the stack and consume them&lt;&#x2F;strong&gt;. Coding became logical. First you need to &lt;strong&gt;fetch&lt;&#x2F;strong&gt; your points, then &lt;strong&gt;applying some downsampling&lt;&#x2F;strong&gt; and then &lt;strong&gt;aggregate&lt;&#x2F;strong&gt;. These 3 steps are translated into &lt;strong&gt;3 lines of WarpScript&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FETCH&lt;&#x2F;strong&gt; will push the needed Geo Time Series into the stack&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;BUCKETIZE&lt;&#x2F;strong&gt; will take the Geo Time Series from the stack, apply some downsampling, and push the result into the stack&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;REDUCE&lt;&#x2F;strong&gt; will take the Geo Time Series from the stack, aggregate them, and push them back into the stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Debugguing as never be that easy, just use the keyword &lt;strong&gt;STOP&lt;&#x2F;strong&gt; to see the stack at any moment.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rich-programming-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rich-programming-capabilities&quot; aria-label=&quot;Anchor link for: rich-programming-capabilities&quot;&gt;🔗&lt;&#x2F;a&gt;Rich programming capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript is coming with more than &lt;strong&gt;800 functions&lt;&#x2F;strong&gt;, ready to use. Things like &lt;strong&gt;Patterns and outliers detections, rolling average, FFT, IDWT&lt;&#x2F;strong&gt; are built-in.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;geo-fencing-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geo-fencing-capabilities&quot; aria-label=&quot;Anchor link for: geo-fencing-capabilities&quot;&gt;🔗&lt;&#x2F;a&gt;Geo-Fencing capabilities&lt;&#x2F;h4&gt;
&lt;p&gt;Both &lt;strong&gt;space&lt;&#x2F;strong&gt; (location) and &lt;strong&gt;time&lt;&#x2F;strong&gt; are considered &lt;strong&gt;first class citizens&lt;&#x2F;strong&gt;. Complex searches like “&lt;strong&gt;find all the sensors active during last Monday in the perimeter delimited by this geo-fencing polygon&lt;&#x2F;strong&gt;” can be done without involving expensive joins between separate time series for the same source.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unified-language&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#unified-language&quot; aria-label=&quot;Anchor link for: unified-language&quot;&gt;🔗&lt;&#x2F;a&gt;Unified Language&lt;&#x2F;h4&gt;
&lt;p&gt;WarpScript can be used in &lt;strong&gt;batch&lt;&#x2F;strong&gt; mode, or in &lt;strong&gt;real-time&lt;&#x2F;strong&gt;, because you need both of them in the real world.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;geez-give-me-an-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#geez-give-me-an-example&quot; aria-label=&quot;Anchor link for: geez-give-me-an-example&quot;&gt;🔗&lt;&#x2F;a&gt;Geez, give me an example&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s an example of a simple but advanced query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; Fetching all values  
&lt;&#x2F;span&gt;&lt;span&gt;[ $token ‘temperature’ {} NOW 1 h ] FETCH &#x2F;&#x2F; Get max value for each minute  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP bucketizer.max 0 1 m 0 ] BUCKETIZE &#x2F;&#x2F; Round to nearest long  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP mapper.round 0 0 0 ] MAP &#x2F;&#x2F; reduce the data by keeping the max, grouping by &amp;#39;buildingID&amp;#39;  
&lt;&#x2F;span&gt;&lt;span&gt;[ SWAP [ &amp;#39;buildingID&amp;#39; ] reducer.max ] REDUCE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Have you guessed the goal? The result will &lt;strong&gt;display the temperature from now to 1 hour of the hottest room per buildingID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-about-a-more-complex-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-a-more-complex-example&quot; aria-label=&quot;Anchor link for: what-about-a-more-complex-example&quot;&gt;🔗&lt;&#x2F;a&gt;What about a more complex example?&lt;&#x2F;h3&gt;
&lt;p&gt;You’re still here? Good, let’s have a more complex example. Let’s say that I want to do some patterns recognition. Let’s take an example. Here’s a cosinus with an increasing amplitude:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;3.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I want to &lt;strong&gt;detect the green part&lt;&#x2F;strong&gt; of the time series, because I know that my service is crashing when I have that kind of load. With WarpScript, it’s only a &lt;strong&gt;2 functions calls&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PATTERNS&lt;&#x2F;strong&gt; is generating a list of motifs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PATTERNDETECTION&lt;&#x2F;strong&gt; is running the list of motifs on all the time series you have.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s the code&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; defining some variables  
&lt;&#x2F;span&gt;&lt;span&gt;32 &amp;#39;windowSize&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;8 &amp;#39;patternLength&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;16 &amp;#39;quantizationScale&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Generate patterns   
&lt;&#x2F;span&gt;&lt;span&gt;$pattern.to.detect 0 GET   
&lt;&#x2F;span&gt;&lt;span&gt;$windowSize $patternLength $quantizationScale PATTERNS  
&lt;&#x2F;span&gt;&lt;span&gt;VALUES &amp;#39;patterns&amp;#39; STORE  
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Running the patterns through a list of GTS (Geo Time Series)  
&lt;&#x2F;span&gt;&lt;span&gt;$list.of.gts $patterns   
&lt;&#x2F;span&gt;&lt;span&gt;$windowSize $patternLength $quantizationScale  PATTERNDETECTION
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s the result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;engage-maximum-warp-speed-in-time-series-analysis-with-warpscript&#x2F;4.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, &lt;strong&gt;PATTERNDETECTION&lt;&#x2F;strong&gt; is working even with the increasing amplitude! You can discover this example by yourself by using &lt;a href=&quot;https:&#x2F;&#x2F;home.cityzendata.net&#x2F;quantum&#x2F;preview&#x2F;#&#x2F;plot&#x2F;TkVXR1RTICdjb3MnIFJFTkFNRQoxIDEwODAKPCUgRFVQICdpJyBTVE9SRSBEVVAgMiAqIFBJICogMzYwIC8gQ09TICRpICogTmFOIE5hTiBOYU4gNCBST0xMIEFERFZBTFVFICU+IEZPUgoKWyBTV0FQIGJ1Y2tldGl6ZXIubGFzdCAxMDgwIDEgMCBdIEJVQ0tFVElaRSAnY29zJyBTVE9SRQoKTkVXR1RTICdwYXR0ZXJuLnRvLmRldGVjdCcgUkVOQU1FCjIwMCAzNzAKPCUgIERVUCAnaScgU1RPUkUgRFVQIDIgKiBQSSAqIDM2MCAvIENPUyAkaSAqIE5hTiBOYU4gTmFOIDQgUk9MTCBBRERWQUxVRSAlPiBGT1IKClsgU1dBUCBidWNrZXRpemVyLmxhc3QgMjE2MCAxIDAgXSBCVUNLRVRJWkUgJ3BhdHRlcm4udG8uZGV0ZWN0JyBTVE9SRQoKLy8gQ3JlYXRlIFBhdHRlcm4KMzIgJ3dpbmRvd1NpemUnIFNUT1JFCjggJ3BhdHRlcm5MZW5ndGgnIFNUT1JFCjE2ICdxdWFudGl6YXRpb25TY2FsZScgU1RPUkUKCiRwYXR0ZXJuLnRvLmRldGVjdCAwIEdFVCAkd2luZG93U2l6ZSAkcGF0dGVybkxlbmd0aCAkcXVhbnRpemF0aW9uU2NhbGUgUEFUVEVSTlMgVkFMVUVTICdwYXR0ZXJucycgU1RPUkUKCiRjb3MgJHBhdHRlcm5zICR3aW5kb3dTaXplICRwYXR0ZXJuTGVuZ3RoICRxdWFudGl6YXRpb25TY2FsZSAgUEFUVEVSTkRFVEVDVElPTiAnY29zLmRldGVjdGlvbicgUkVOQU1FICdjb3MuZGV0ZWN0aW9uJyBTVE9SRQoKJGNvcy5kZXRlY3Rpb24KLy8gTGV0J3MgY3JlYXRlIGEgZ3RzIGZvciBlYWNoIHRyaXAKMTAgICAgICAgLy8gIFF1aWV0IHBlcmlvZAo1ICAgICAgICAgLy8gTWluIG51bWJlciBvZiB2YWx1ZXMKJ3N1YlBhdHRlcm4nICAvLyBMYWJlbApUSU1FU1BMSVQKCiRjb3M=&#x2F;eyJ1cmwiOiJodHRwczovL3dhcnAuY2l0eXplbmRhdGEubmV0L2FwaS92MCIsImhlYWRlck5hbWUiOiJYLUNpdHl6ZW5EYXRhIn0=&quot;&gt;Quantum&lt;&#x2F;a&gt;, the official web-based IDE for WarpScript. &lt;strong&gt;You need to switch X-axis scale to Timestamp in order to see the courbe&lt;&#x2F;strong&gt;.Thanks for reading, here’s a nice list of additionnals informations about the time series subject and Warp10:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ovh.com&#x2F;fr&#x2F;data-platforms&#x2F;metrics&#x2F;&quot;&gt;Metrics Data Platform&lt;&#x2F;a&gt;, our product&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;warp10.io&#x2F;&quot;&gt;Warp10 official documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tour.warp10.io&#x2F;&quot;&gt;Warp10 tour&lt;&#x2F;a&gt;, similar to “The Go Tour”&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=mNkfBR9KofY&quot;&gt;Presentation of the Warp 10 Time Series Platform at the 42 US school in Fremont&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!forum&#x2F;warp10-users&quot;&gt;Warp10 Google Groups&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
