<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Pierre Zemb&#x27;s Blog - sql</title>
    <subtitle>Pierre Zemb personal blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://pierrezemb.fr/tags/sql/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://pierrezemb.fr"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-04T00:00:00+00:00</updated>
    <id>https://pierrezemb.fr/tags/sql/atom.xml</id>
    <entry xml:lang="en">
        <title>Thank You, DataFusion: Queries in Rust, Without the Pain</title>
        <published>2025-06-04T00:00:00+00:00</published>
        <updated>2025-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/thank-you-datafusion/"/>
        <id>https://pierrezemb.fr/posts/thank-you-datafusion/</id>
        
        <category term="rust" schema="https://pierrezemb.fr/tags/" label="rust"/>
        <category term="datafusion" schema="https://pierrezemb.fr/tags/" label="datafusion"/>
        <category term="sql" schema="https://pierrezemb.fr/tags/" label="sql"/>
        <category term="query-engine" schema="https://pierrezemb.fr/tags/" label="query-engine"/>
        <category term="databases" schema="https://pierrezemb.fr/tags/" label="databases"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/thank-you-datafusion/">&lt;h2 id=&quot;that-yatta-moment-rebooted&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-yatta-moment-rebooted&quot; aria-label=&quot;Anchor link for: that-yatta-moment-rebooted&quot;&gt;üîó&lt;&#x2F;a&gt;That ‚ÄúYATTA!‚Äù Moment, Rebooted&lt;&#x2F;h2&gt;
&lt;p&gt;We just merged at work our first successful data retrieval using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&quot;&gt;DataFusion&lt;&#x2F;a&gt; ‚Äî a real SQL query, over real data, flowing through a system we built. And I‚Äôll be honest: I haven‚Äôt had a ‚ÄúYATTA!‚Äù moment like this in years. This wasn&#x27;t just a feature shipped; it felt like unlocking a new superpower for our entire system, a complex vision finally materializing.&lt;&#x2F;p&gt;
&lt;p&gt;Not a silent nod. Not ‚Äúhuh, that works.‚Äù A &lt;em&gt;real&lt;&#x2F;em&gt;, physical, joyful reaction. The kind that makes you want to run a lap around the office (or, in my remote-first case, the living room).&lt;&#x2F;p&gt;
&lt;p&gt;Because plugging a query engine into your software isn‚Äôt supposed to feel this smooth. It&#x27;s usually a battle. But this one did. This one felt like an invitation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-don-t-just-add-a-query-engine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-don-t-just-add-a-query-engine&quot; aria-label=&quot;Anchor link for: you-don-t-just-add-a-query-engine&quot;&gt;üîó&lt;&#x2F;a&gt;You Don‚Äôt Just Add a Query Engine&lt;&#x2F;h2&gt;
&lt;p&gt;Adding a query engine to a codebase isn‚Äôt something you do lightly. It‚Äôs a foundational piece of infrastructure, the kind of decision that usually ends in regret, or at least a &lt;em&gt;lot&lt;&#x2F;em&gt; of rewriting. Most engines assume they own the world: they want to dictate your storage, your execution model, your schema, your optimizer, often forcing you to contort your application around their idiosyncrasies. It&#x27;s a path often paved with impedance mismatches, performance bottlenecks, and the haunting feeling that you‚Äôve just bolted an opinionated, unyielding black box onto your carefully crafted system.&lt;&#x2F;p&gt;
&lt;p&gt;But then there‚Äôs DataFusion. A SQL engine written in Rust, and ‚Äî against all odds ‚Äî one you can actually &lt;em&gt;use&lt;&#x2F;em&gt;. Drop-in? Not quite. But close enough to be kind of magical, offering a set of powerful, composable tools rather than a rigid framework.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ve-been-watching-from-day-one&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-ve-been-watching-from-day-one&quot; aria-label=&quot;Anchor link for: i-ve-been-watching-from-day-one&quot;&gt;üîó&lt;&#x2F;a&gt;I‚Äôve Been Watching From Day One&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôve been following DataFusion since it was a weekend project. I still remember the early blog posts, the prototypes, the potential. And more importantly, I read &lt;a href=&quot;https:&#x2F;&#x2F;andygrove.io&#x2F;how-query-engines-work&#x2F;&quot;&gt;Andy Grove‚Äôs book &lt;em&gt;How Query Engines Work&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. That book unlocked it for me.&lt;&#x2F;p&gt;
&lt;p&gt;It demystified concepts like logical plans, physical plans, and execution trees ‚Äî enough to give me the confidence to experiment. I first played with Apache Calcite, then circled back to DataFusion. Eventually, I contributed a small example: a custom &lt;code&gt;TableProvider&lt;&#x2F;code&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;issues&#x2F;1864&quot;&gt;added to DataFusion in this issue&lt;&#x2F;a&gt; to demonstrate how to integrate custom datasources.&lt;&#x2F;p&gt;
&lt;p&gt;And then... it only took me &lt;strong&gt;three years&lt;&#x2F;strong&gt; to actually write the code that &lt;em&gt;used&lt;&#x2F;em&gt; it. Why so long? Well, let&#x27;s just say a gazillion other things, the never-ending sagas of on-call, and a &lt;a href=&quot;&#x2F;posts&#x2F;back-engineering&quot;&gt;brief-but-eventful detour into management&lt;&#x2F;a&gt; kept my dance card impressively full. But hey, it still felt amazing when it finally clicked.&lt;&#x2F;p&gt;
&lt;p&gt;More recently, I was genuinely happy to see that &lt;strong&gt;Andrew Lamb&lt;&#x2F;strong&gt; co-authored an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;datafusion&#x2F;issues&#x2F;6782&quot;&gt;academic paper describing DataFusion‚Äôs architecture&lt;&#x2F;a&gt;. There‚Äôs something really validating about seeing a project you‚Äôve followed for years get formalized in research ‚Äî it‚Äôs a sign that the internals are solid and the ideas are worth sharing. And they are.&lt;&#x2F;p&gt;
&lt;p&gt;That moment was big. Because here was a Rust-native query engine where I could plug in &lt;em&gt;my own data&lt;&#x2F;em&gt;, and get &lt;em&gt;real queries&lt;&#x2F;em&gt; back. No layers of JVM glue, no corroded abstractions. Just composable, hackable Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modular-composable-respectful&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#modular-composable-respectful&quot; aria-label=&quot;Anchor link for: modular-composable-respectful&quot;&gt;üîó&lt;&#x2F;a&gt;Modular, Composable, Respectful&lt;&#x2F;h2&gt;
&lt;p&gt;What I love about DataFusion is that it doesn‚Äôt try to control your application. It‚Äôs a query engine that knows it‚Äôs a library ‚Äî not a database.&lt;&#x2F;p&gt;
&lt;p&gt;It lets you:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Plug in your own data sources&lt;&#x2F;li&gt;
&lt;li&gt;Register logical tables dynamically&lt;&#x2F;li&gt;
&lt;li&gt;Push down filters, projections, even partitions&lt;&#x2F;li&gt;
&lt;li&gt;Swap in or extend physical execution nodes&lt;&#x2F;li&gt;
&lt;li&gt;Keep your own runtime, threading, and lifecycle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And all that without feeling like you‚Äôre stepping into ‚Äúinternal‚Äù code. It‚Äôs all open, cleanly layered, and welcoming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-goal-join-indexes-without-going-insane&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-goal-join-indexes-without-going-insane&quot; aria-label=&quot;Anchor link for: my-goal-join-indexes-without-going-insane&quot;&gt;üîó&lt;&#x2F;a&gt;My Goal: Join Indexes Without Going Insane&lt;&#x2F;h2&gt;
&lt;p&gt;From the beginning, my goal was never to just scan data ‚Äî it was to &lt;strong&gt;query it properly&lt;&#x2F;strong&gt;, with indexes, joins, and all the things a real engine should do. I never had any intention of writing a join execution engine myself. That‚Äôs not the kind of wheel I want to reinvent.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s no secret that at work, we&#x27;re building a system on top of FoundationDB that draws inspiration from Apple&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;&quot;&gt;FDB Record Layer&lt;&#x2F;a&gt; (you can learn more about its concepts in &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SvoUHHM9IKU&quot;&gt;this talk&lt;&#x2F;a&gt;). We offer &lt;a href=&quot;https:&#x2F;&#x2F;foundationdb.github.io&#x2F;fdb-record-layer&#x2F;GettingStarted.html&quot;&gt;a similar programmatic API for constructing queries&lt;&#x2F;a&gt;, which naturally leads to similar requirements. For example, developers need to express sophisticated data retrieval logic, much like this FDB Record Layer example for querying orders:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt; query = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RecordQuery&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newBuilder&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setRecordType&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Order&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFilter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lessThan&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equalsValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FlowerType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ROSE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()))))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The challenge then becomes translating such programmatic queries into efficient, index-backed scans and, crucially, leveraging a robust engine for complex operations like joins‚Äîwithout rebuilding that engine from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;What I wanted was the ability to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch rows efficiently through custom index-backed scans&lt;&#x2F;li&gt;
&lt;li&gt;Join them using &lt;code&gt;HashJoinExec&lt;&#x2F;code&gt; or &lt;code&gt;MergeJoinExec&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Let the planner and execution engine figure out the hard parts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This vision is what spurred me to start working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;datafusion-contrib&#x2F;datafusion-index-provider&quot;&gt;&lt;code&gt;datafusion-index-provider&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, a library hosted in the &lt;code&gt;datafusion-contrib&lt;&#x2F;code&gt; GitHub organization ‚Äî part of the growing ecosystem around DataFusion. At the time of writing, I‚Äôve built a PoC ‚Äî you can find it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PierreZ&#x2F;datafusion-index-provider&#x2F;tree&#x2F;init-v2&quot;&gt;on this branch&lt;&#x2F;a&gt; ‚Äî and I‚Äôm integrating it into our internal stack before opening a proper PR upstream.&lt;&#x2F;p&gt;
&lt;p&gt;The architecture makes it feel possible. The abstractions are ready. And I still don‚Äôt have to write a join engine. Victory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-joy-of-real-libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-joy-of-real-libraries&quot; aria-label=&quot;Anchor link for: the-joy-of-real-libraries&quot;&gt;üîó&lt;&#x2F;a&gt;The Joy of Real Libraries&lt;&#x2F;h2&gt;
&lt;p&gt;There‚Äôs a special joy in finding a library that &lt;em&gt;slots in&lt;&#x2F;em&gt; ‚Äî that doesn‚Äôt just solve a problem, but fits the shape of your system. DataFusion was that for me.&lt;&#x2F;p&gt;
&lt;p&gt;It didn‚Äôt just let me query data; it gave me a better way to think about the data I already had, and how I wanted to work with it. Instead of manually stitching together filters and projections, I could describe my intent, and let the engine handle the rest.&lt;&#x2F;p&gt;
&lt;p&gt;What‚Äôs even more exciting is that this isn‚Äôt happening in a vacuum.&lt;&#x2F;p&gt;
&lt;p&gt;We‚Äôre seeing a quiet shift in how query engines are built and used. Projects like &lt;a href=&quot;https:&#x2F;&#x2F;duckdb.org&#x2F;&quot;&gt;DuckDB&lt;&#x2F;a&gt; have shown just how powerful it is to have &lt;strong&gt;SQL as a library&lt;&#x2F;strong&gt;, not a service. No server to deploy. No socket to connect to. Just an API, embedded right in your code.&lt;&#x2F;p&gt;
&lt;p&gt;DataFusion follows that same philosophy ‚Äî Rust-native, embeddable, and unapologetically library-first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-the-datafusion-team-thank-you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#to-the-datafusion-team-thank-you&quot; aria-label=&quot;Anchor link for: to-the-datafusion-team-thank-you&quot;&gt;üîó&lt;&#x2F;a&gt;To the DataFusion Team: Thank You&lt;&#x2F;h2&gt;
&lt;p&gt;To Andy Grove, to all the contributors, to everyone filing issues and refining abstractions: thank you. Your work is enabling a new generation of Rust systems to think like databases ‚Äî without becoming one.&lt;&#x2F;p&gt;
&lt;p&gt;I don‚Äôt know if you realize how rare that is. I just know it changed what I thought was possible in my software.&lt;&#x2F;p&gt;
&lt;p&gt;And I‚Äôm having a lot more fun because of it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Feel free to reach out with any questions or to share your experiences with DataFusion. You can find me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;pierrezemb.fr&quot;&gt;Bluesky&lt;&#x2F;a&gt; or through my &lt;a href=&quot;https:&#x2F;&#x2F;pierrezemb.fr&quot;&gt;website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What are ACID transactions?</title>
        <published>2019-02-03T00:00:00+00:00</published>
        <updated>2019-02-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Pierre Zemb
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pierrezemb.fr/posts/acid-transactions/"/>
        <id>https://pierrezemb.fr/posts/acid-transactions/</id>
        
        <category term="database" schema="https://pierrezemb.fr/tags/" label="database"/>
        <category term="transactions" schema="https://pierrezemb.fr/tags/" label="transactions"/>
        <category term="sql" schema="https://pierrezemb.fr/tags/" label="sql"/>
        <category term="storage" schema="https://pierrezemb.fr/tags/" label="storage"/>
        <content type="html" xml:base="https://pierrezemb.fr/posts/acid-transactions/">&lt;h1 id=&quot;transaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transaction&quot; aria-label=&quot;Anchor link for: transaction&quot;&gt;üîó&lt;&#x2F;a&gt;Transaction?&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;Programming should be about transforming data&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;--- Programming Elixir 1.3 by Dave Thomas&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As developers, we are interacting oftenly with data, whenever handling it from an API or a messaging consumer. To store it, we started to create softwares called &lt;strong&gt;relational database management system&lt;&#x2F;strong&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Relational_database_management_system&quot;&gt;RDBMS&lt;&#x2F;a&gt;. Thanks to them, we, as developers, can develop applications pretty easily, &lt;strong&gt;without the need to implement our own storage solution&lt;&#x2F;strong&gt;. Interacting with &lt;a href=&quot;https:&#x2F;&#x2F;www.mysql.com&#x2F;&quot;&gt;mySQL&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt; have now become a &lt;strong&gt;commodity&lt;&#x2F;strong&gt;. Handling a database is not that easy though, because anything can happen, from failures to concurrency isssues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How can we interact with &lt;strong&gt;datastores that can fail?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;What is happening if two users are  &lt;strong&gt;updating a value at the same time?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a database user, we are using &lt;code&gt;transactions&lt;&#x2F;code&gt; to answer these questions. As a developer, a transaction is a &lt;strong&gt;single unit of logic or work&lt;&#x2F;strong&gt;, sometimes made up of multiple operations. It is mainly an &lt;strong&gt;abstraction&lt;&#x2F;strong&gt; that we are using to &lt;strong&gt;hide underlying problems&lt;&#x2F;strong&gt;, such as concurrency or hardware faults.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ACID&lt;&#x2F;code&gt; appears in a paper published in 1983 called &lt;a href=&quot;https:&#x2F;&#x2F;sites.fas.harvard.edu&#x2F;~cs265&#x2F;papers&#x2F;haerder-1983.pdf&quot;&gt;&quot;Principles of transaction-oriented database recovery&quot;&lt;&#x2F;a&gt; written by &lt;em&gt;Theo Haerder&lt;&#x2F;em&gt; and &lt;em&gt;Andreas Reuter&lt;&#x2F;em&gt;. This paper introduce a terminology of properties for a transaction:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A&lt;&#x2F;strong&gt;tomic, &lt;strong&gt;C&lt;&#x2F;strong&gt;onsistency, &lt;strong&gt;I&lt;&#x2F;strong&gt;solation, &lt;strong&gt;D&lt;&#x2F;strong&gt;urability&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;atomic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#atomic&quot; aria-label=&quot;Anchor link for: atomic&quot;&gt;üîó&lt;&#x2F;a&gt;Atomic&lt;&#x2F;h2&gt;
&lt;p&gt;Atomic, as you may have guessed, &lt;code&gt;atomic&lt;&#x2F;code&gt; represents something that &lt;strong&gt;cannot be splitted&lt;&#x2F;strong&gt;. In the database transaction world, it means for example that if a transaction with several writes is &lt;strong&gt;started and failed&lt;&#x2F;strong&gt; at some point, &lt;strong&gt;none of the write will be committed&lt;&#x2F;strong&gt;. As stated by many, the word &lt;code&gt;atomic&lt;&#x2F;code&gt; could be reword as &lt;code&gt;abortability&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;consistency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consistency&quot; aria-label=&quot;Anchor link for: consistency&quot;&gt;üîó&lt;&#x2F;a&gt;Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;You will hear about &lt;code&gt;consistency&lt;&#x2F;code&gt; a lot of this serie. Unfortunately, this word can be used in a lot of context. In the ACID definition, it refers to the fact that a transaction will &lt;strong&gt;bring the database from one valid state to another.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;isolation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation&quot; aria-label=&quot;Anchor link for: isolation&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation&lt;&#x2F;h2&gt;
&lt;p&gt;Think back to your database. Were you the only user on it? I don&#x27;t think so. Maybe they were concurrent transactions at the same time, beside yours. &lt;strong&gt;Isolation while keeping good performance is the most difficult item on the list.&lt;&#x2F;strong&gt; There&#x27;s a lot of litterature and papers about it, and we will only scratch the surface. There is different transaction isolation levels, depending on the number of guarantees provided.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;isolation-by-the-theory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-by-the-theory&quot; aria-label=&quot;Anchor link for: isolation-by-the-theory&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation by the theory&lt;&#x2F;h3&gt;
&lt;p&gt;The SQL standard defines four isolation levels: &lt;code&gt;Serializable&lt;&#x2F;code&gt;, &lt;code&gt;Repeatable Read&lt;&#x2F;code&gt;, &lt;code&gt;Read Commited&lt;&#x2F;code&gt; and &lt;code&gt;Read Uncommited&lt;&#x2F;code&gt;. The strongest isolation is &lt;code&gt;Serializable&lt;&#x2F;code&gt; where transaction are &lt;strong&gt;not runned in parallel&lt;&#x2F;strong&gt;. As you may have guessed, it is also the slowest. &lt;strong&gt;Weaker isolation level are trading speed against anomalies&lt;&#x2F;strong&gt; that can be sum-up like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Isolation level&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Dirty_reads&quot;&gt;dirty reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_%28database_systems%29#Non-repeatable_reads&quot;&gt;Non-repeatable reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Isolation_(database_systems)#Phantom_reads&quot;&gt;Phantom reads&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;Performance&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Serializable&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Repeatable Read&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read Commited&lt;&#x2F;td&gt;&lt;td&gt;üòé&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read uncommited&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üò±&lt;&#x2F;td&gt;&lt;td&gt;üëçüëçüëçüëç&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;I encourage you to click on all the links within the table to &lt;strong&gt;see everything that could go wrong in a weak database!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;isolation-in-real-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolation-in-real-databases&quot; aria-label=&quot;Anchor link for: isolation-in-real-databases&quot;&gt;üîó&lt;&#x2F;a&gt;Isolation in Real Databases&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we saw some theory, let&#x27;s have a look on a particular well-known database: PostgreSQL. What kind of isolation PostgreSQL is offering?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL provides a rich set of tools for developers to manage concurrent access to data. Internally, data consistency is maintained by using a multiversion model (&lt;strong&gt;Multiversion Concurrency Control, MVCC&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;--- &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;mvcc-intro.html&quot;&gt;Concurrency Control introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wait what? What is MVCC? Well, turns out that after the SQL standards came another type of Isolation: &lt;strong&gt;Snapshot Isolation&lt;&#x2F;strong&gt;. Instead of locking that row for reading when somebody starts working on it, it ensures that &lt;strong&gt;any transaction will see a version of the data that is corresponding to the start of the query&lt;&#x2F;strong&gt;. As it is providing a good balance between &lt;strong&gt;performance and consistency&lt;&#x2F;strong&gt;, it became &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_databases_using_MVCC&quot;&gt;a standard used by the industry&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;durability&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#durability&quot; aria-label=&quot;Anchor link for: durability&quot;&gt;üîó&lt;&#x2F;a&gt;Durability&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Durability&lt;&#x2F;code&gt; ensure that your database is a &lt;strong&gt;safe place&lt;&#x2F;strong&gt; where data can be stored without fear of losing it. If a transaction has commited successfully, any written data will not be forgotten.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;that-s-it&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-s-it&quot; aria-label=&quot;Anchor link for: that-s-it&quot;&gt;üîó&lt;&#x2F;a&gt;That&#x27;s it?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;All these properties may seems obvious to you&lt;&#x2F;strong&gt; but each of the item is involving a lot of engineering and researchs. And this is only valid for a single machine, &lt;strong&gt;the distributed transaction field&lt;&#x2F;strong&gt; is even more complicated, but we will get to it in another blogpost!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;&#x2F;strong&gt; for reading my post! Feel free to react to this article, I am also available on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PierreZ&quot;&gt;Twitter&lt;&#x2F;a&gt; if needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
