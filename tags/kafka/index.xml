<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kafka on Pierre Zemb</title>
    <link>https://pierrezemb.fr/tags/kafka/</link>
    <description>Recent content in kafka on Pierre Zemb</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Some Rights Reserved&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 08 Dec 2019 15:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://pierrezemb.fr/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Diving into Kafka&#39;s Protocol</title>
      <link>https://pierrezemb.fr/posts/diving-into-kafka-protocol/</link>
      <pubDate>Sun, 08 Dec 2019 15:00:00 +0100</pubDate>
      
      <guid>https://pierrezemb.fr/posts/diving-into-kafka-protocol/</guid>
      <description>Diving Into is a blogpost serie where we are digging a specific part of of the project&#39;s basecode. In this episode, we will digg into Kafka&#39;s protocol.
 The protocol reference For the last few months, I worked a lot around Kafka&#39;s protocols, first by creating a fully async Kafka to Pulsar Proxy in Rust, and now by contributing directly to KoP (Kafka On Pulsar). The full Kafka Protocol documentation is available here, but it does not offer a global view of what is happening for a classic Producer and Consumer exchange.</description>
    </item>
    
  </channel>
</rss>